{"version":3,"file":"js/904.8a385365.js","mappings":"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","sources":["webpack://vue3/./node_modules/lingo3d-vue/dist/cannon-es.js"],"sourcesContent":["class ObjectCollisionMatrix {\n  constructor() {\n    this.matrix = {};\n  }\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n    return `${i}-${j}` in this.matrix;\n  }\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n    if (value) {\n      this.matrix[`${i}-${j}`] = true;\n    } else {\n      delete this.matrix[`${i}-${j}`];\n    }\n  }\n  reset() {\n    this.matrix = {};\n  }\n  setNumObjects(n) {\n  }\n}\nclass Mat3 {\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n    this.elements = elements;\n  }\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0], a12 = A[1], a13 = A[2], a21 = A[3], a22 = A[4], a23 = A[5], a31 = A[6], a32 = A[7], a33 = A[8];\n    const b11 = B[0], b12 = B[1], b13 = B[2], b21 = B[3], b22 = B[4], b23 = B[5], b31 = B[6], b32 = B[7], b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n    const e = this.elements;\n    const t = target.elements;\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n    return target;\n  }\n  solve(b2, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const nr = 3;\n    const nc = 4;\n    const eqns = [];\n    let i;\n    let j;\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n    eqns[3 + 4 * 0] = b2.x;\n    eqns[3 + 4 * 1] = b2.y;\n    eqns[3 + 4 * 2] = b2.z;\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4;\n    let p;\n    do {\n      i = k - n;\n      if (eqns[i + nc * i] === 0) {\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n            do {\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n            break;\n          }\n        }\n      }\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n          do {\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n);\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b2.toString()}], A=[${this.toString()}]`;\n    }\n    return target;\n  }\n  e(row, column, value) {\n    if (value === void 0) {\n      return this.elements[column + 3 * row];\n    } else {\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n    return this;\n  }\n  toString() {\n    let r = \"\";\n    const sep = \",\";\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n    return r;\n  }\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n    const nr = 3;\n    const nc = 6;\n    const eqns = reverse_eqns;\n    let i;\n    let j;\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1;\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc;\n    let p;\n    do {\n      i = k - n;\n      if (eqns[i + nc * i] === 0) {\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n            do {\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n            break;\n          }\n        }\n      }\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n          do {\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n);\n    i = 2;\n    do {\n      j = i - 1;\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i);\n    i = 2;\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n    i = 2;\n    do {\n      j = 2;\n      do {\n        p = eqns[nr + j + nc * i];\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n    return target;\n  }\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n    const M = this.elements;\n    const T = target.elements;\n    let tmp2;\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp2 = M[1];\n    T[1] = M[3];\n    T[3] = tmp2;\n    tmp2 = M[2];\n    T[2] = M[6];\n    T[6] = tmp2;\n    tmp2 = M[5];\n    T[5] = M[7];\n    T[7] = tmp2;\n    return target;\n  }\n}\nconst reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nclass Vec3 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (z === void 0) {\n      z = 0;\n    }\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n    if (n > 0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n    return n;\n  }\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n    if (ninv > 0) {\n      ninv = 1 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n    return target;\n  }\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  lengthSquared() {\n    return this.dot(this);\n  }\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  tangents(t1, t2) {\n    const norm = this.length();\n    if (norm > 0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n      n.cross(t1, t2);\n    } else {\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n    return true;\n  }\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n    return true;\n  }\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\nclass AABB {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion;\n    l.copy(points[0]);\n    if (q) {\n      q.vmult(l, l);\n    }\n    u.copy(l);\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n      if (q) {\n        q.vmult(p, tmp$1);\n        p = tmp$1;\n      }\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    }\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n    return this;\n  }\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  clone() {\n    return new AABB().copy(this);\n  }\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound;\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  }\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound;\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n  getCorners(a2, b2, c2, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a2.copy(l);\n    b2.set(u.x, l.y, l.z);\n    c2.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a2 = corners[0];\n    const b2 = corners[1];\n    const c2 = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7];\n    this.getCorners(a2, b2, c2, d, e, f, g, h);\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n    return target.setFromPoints(corners);\n  }\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a2 = corners[0];\n    const b2 = corners[1];\n    const c2 = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7];\n    this.getCorners(a2, b2, c2, d, e, f, g, h);\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n    return target.setFromPoints(corners);\n  }\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray;\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z;\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ;\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));\n    if (tmax < 0) {\n      return false;\n    }\n    if (tmin > tmax) {\n      return false;\n    }\n    return true;\n  }\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nclass ArrayCollisionMatrix {\n  constructor() {\n    this.matrix = [];\n  }\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n}\nclass EventTarget {\n  addEventListener(type, listener) {\n    if (this._listeners === void 0) {\n      this._listeners = {};\n    }\n    const listeners = this._listeners;\n    if (listeners[type] === void 0) {\n      listeners[type] = [];\n    }\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n    return this;\n  }\n  hasEventListener(type, listener) {\n    if (this._listeners === void 0) {\n      return false;\n    }\n    const listeners = this._listeners;\n    if (listeners[type] !== void 0 && listeners[type].includes(listener)) {\n      return true;\n    }\n    return false;\n  }\n  hasAnyEventListener(type) {\n    if (this._listeners === void 0) {\n      return false;\n    }\n    const listeners = this._listeners;\n    return listeners[type] !== void 0;\n  }\n  removeEventListener(type, listener) {\n    if (this._listeners === void 0) {\n      return this;\n    }\n    const listeners = this._listeners;\n    if (listeners[type] === void 0) {\n      return this;\n    }\n    const index = listeners[type].indexOf(listener);\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n    return this;\n  }\n  dispatchEvent(event) {\n    if (this._listeners === void 0) {\n      return this;\n    }\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n    if (listenerArray !== void 0) {\n      event.target = this;\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n    return this;\n  }\n}\nclass Quaternion {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n    if (y === void 0) {\n      y = 0;\n    }\n    if (z === void 0) {\n      z = 0;\n    }\n    if (w === void 0) {\n      w = 1;\n    }\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3();\n    }\n    this.normalize();\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w);\n    if (s < 1e-3) {\n      targetAxis.x = this.x;\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s;\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n    return [targetAxis, angle];\n  }\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a2 = u.cross(v);\n      this.x = a2.x;\n      this.y = a2.y;\n      this.z = a2.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n    return this;\n  }\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n    return this;\n  }\n  normalizeFast() {\n    const f = (3 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2;\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n    return this;\n  }\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w;\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = \"YZX\";\n    }\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    switch (order) {\n      case \"YZX\":\n        const test = x * y + z * w;\n        if (test > 0.499) {\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n        if (test < -0.499) {\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n        if (heading === void 0) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz);\n          attitude = Math.asin(2 * test);\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz);\n        }\n        break;\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = \"XYZ\";\n    }\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n    if (order === \"XYZ\") {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === \"YXZ\") {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === \"ZXY\") {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === \"ZYX\") {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === \"YZX\") {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === \"XZY\") {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n    return this;\n  }\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1;\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    if (cosom < 0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    }\n    if (1 - cosom > 1e-6) {\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      scale0 = 1 - t;\n      scale1 = t;\n    }\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n    const ax = angularVelocity.x * angularFactor.x, ay = angularVelocity.y * angularFactor.y, az = angularVelocity.z * angularFactor.z, bx = this.x, by = this.y, bz = this.z, bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\nconst SHAPE_TYPES = {\n  SPHERE: 1,\n  PLANE: 2,\n  BOX: 4,\n  COMPOUND: 8,\n  CONVEXPOLYHEDRON: 16,\n  HEIGHTFIELD: 32,\n  PARTICLE: 64,\n  CYLINDER: 128,\n  TRIMESH: 256\n};\nclass Shape {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== void 0 ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== void 0 ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\nclass Transform {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1);\n    tmpQuat$1.vmult(result, result);\n    return result;\n  }\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n}\nconst tmpQuat$1 = new Quaternion();\nclass ConvexPolyhedron extends Shape {\n  constructor(props) {\n    if (props === void 0) {\n      props = {};\n    }\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n    this.worldVertices = [];\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = [];\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  computeNormals() {\n    this.faceNormals.length = this.faces.length;\n    for (let i = 0; i < this.faces.length; i++) {\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n        }\n      }\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n      if (n.dot(vertex) < 0) {\n        console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n        }\n      }\n    }\n  }\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va2 = this.vertices[f[0]];\n    const vb2 = this.vertices[f[1]];\n    const vc2 = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va2, vb2, vc2, target);\n  }\n  static computeNormal(va2, vb2, vc2, target) {\n    const cb2 = new Vec3();\n    const ab2 = new Vec3();\n    vb2.vsub(va2, ab2);\n    vc2.vsub(vb2, cb2);\n    cb2.cross(ab2, target);\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n    const worldVertsB1 = [];\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b2 = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b2);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i;\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n        if (d === false) {\n          return false;\n        }\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n        if (d === false) {\n          return false;\n        }\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n    if (!hullB.uniqueAxes) {\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n        if (d === false) {\n          return false;\n        }\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n        if (d === false) {\n          return false;\n        }\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    }\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n          if (dist === false) {\n            return false;\n          }\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n    posB.vsub(posA, deltaC);\n    if (deltaC.dot(target) > 0) {\n      target.negate(target);\n    }\n    return true;\n  }\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n    if (maxA < minB || maxB < minA) {\n      return false;\n    }\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  calculateLocalInertia(mass, target) {\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1 / 12 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1 / 12 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1 / 12 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c2 = -n.dot(v);\n    return c2;\n  }\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE;\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n    if (closestFaceA < 0) {\n      return;\n    }\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (polyA.indexOf(hullA.faces[i][j]) !== -1 && i !== closestFaceA && polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    }\n    const numVerticesA = polyA.length;\n    for (let i = 0; i < numVerticesA; i++) {\n      const a2 = hullA.vertices[polyA[i]];\n      const b2 = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a2.vsub(b2, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a2);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq2 = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS2 = localPlaneEq2 - planeNormalWS.dot(posA);\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS2);\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    }\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS;\n      if (depth <= minDist) {\n        console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n        depth = minDist;\n      }\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n    if (numVerts < 2) {\n      return outVertices;\n    }\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n    return outVertices;\n  }\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n    this.worldVerticesNeedsUpdate = false;\n  }\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  updateBoundingSphereRadius() {\n    let max2 = 0;\n    const verts = this.vertices;\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n      if (minx === void 0 || v.x < minx) {\n        minx = v.x;\n      }\n      if (maxx === void 0 || v.x > maxx) {\n        maxx = v.x;\n      }\n      if (miny === void 0 || v.y < miny) {\n        miny = v.y;\n      }\n      if (maxy === void 0 || v.y > maxy) {\n        maxy = v.y;\n      }\n      if (minz === void 0 || v.z < minz) {\n        minz = v.z;\n      }\n      if (maxz === void 0 || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  volume() {\n    return 4 * Math.PI * this.boundingSphereRadius / 3;\n  }\n  getAveragePointLocal(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const verts = this.vertices;\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices;\n    if (quat) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      }\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n    }\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const positiveResult = null;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]];\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false;\n      }\n    }\n    return positiveResult ? 1 : -1;\n  }\n  static project(shape, axis, pos, quat, result) {\n    const n = shape.vertices.length;\n    project_worldVertex;\n    const localAxis = project_localAxis;\n    let max = 0;\n    let min = 0;\n    const localOrigin = project_localOrigin;\n    const vs = shape.vertices;\n    localOrigin.setZero();\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    const add = localOrigin.dot(localAxis);\n    min = max = vs[0].dot(localAxis);\n    for (let i = 1; i < n; i++) {\n      const val = vs[i].dot(localAxis);\n      if (val > max) {\n        max = val;\n      }\n      if (val < min) {\n        min = val;\n      }\n    }\n    min -= add;\n    max -= add;\n    if (min > max) {\n      const temp = min;\n      min = max;\n      max = temp;\n    }\n    result[0] = max;\n    result[1] = min;\n  }\n}\nconst maxminA = [];\nconst maxminB = [];\nconst project_worldVertex = new Vec3();\nconst project_localAxis = new Vec3();\nconst project_localOrigin = new Vec3();\nclass Box extends Shape {\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [\n      [3, 2, 1, 0],\n      [4, 5, 6, 7],\n      [5, 4, 0, 1],\n      [2, 3, 7, 6],\n      [0, 4, 7, 3],\n      [1, 2, 6, 5]\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n  static calculateInertia(halfExtents, mass, target) {\n    const e = halfExtents;\n    target.x = 1 / 12 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n    target.y = 1 / 12 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n    target.z = 1 / 12 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n  }\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n    if (quat !== void 0) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n    return sides;\n  }\n  volume() {\n    return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for (let i = 1; i < 8; i++) {\n      const wc2 = worldCornersTemp[i];\n      quat.vmult(wc2, wc2);\n      pos.vadd(wc2, wc2);\n      const x = wc2.x;\n      const y = wc2.y;\n      const z = wc2.z;\n      if (x > max.x) {\n        max.x = x;\n      }\n      if (y > max.y) {\n        max.y = y;\n      }\n      if (z > max.z) {\n        max.z = z;\n      }\n      if (x < min.x) {\n        min.x = x;\n      }\n      if (y < min.y) {\n        min.y = y;\n      }\n      if (z < min.z) {\n        min.z = z;\n      }\n    }\n  }\n}\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst BODY_TYPES = {\n  DYNAMIC: 1,\n  STATIC: 2,\n  KINEMATIC: 4\n};\nconst BODY_SLEEP_STATES = {\n  AWAKE: 0,\n  SLEEPY: 1,\n  SLEEPING: 2\n};\nclass Body extends EventTarget {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === \"number\" ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === \"number\" ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === \"boolean\" ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n    this.velocity = new Vec3();\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === \"number\" ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === \"number\" ? options.linearDamping : 0.01;\n    this.type = mass <= 0 ? Body.STATIC : Body.DYNAMIC;\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n    this.allowSleep = typeof options.allowSleep !== \"undefined\" ? options.allowSleep : true;\n    this.sleepState = Body.AWAKE;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== \"undefined\" ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== \"undefined\" ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n    this.angularVelocity = new Vec3();\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== \"undefined\" ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== \"undefined\" ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n    this.angularFactor = new Vec3(1, 1, 1);\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n    this.isTrigger = Boolean(options.isTrigger);\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n    this.updateMassProperties();\n  }\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = Body.AWAKE;\n    this.wakeUpAfterNarrowphase = false;\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY;\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp();\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep();\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  pointToLocalFrame(worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  vectorToLocalFrame(worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  pointToWorldFrame(localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n    if (_offset) {\n      offset.copy(_offset);\n    }\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n    if (index === -1) {\n      console.warn(\"Shape does not belong to the body\");\n      return this;\n    }\n    this.shapes.splice(index, 1);\n    this.shapeOffsets.splice(index, 1);\n    this.shapeOrientations.splice(index, 1);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = null;\n    return this;\n  }\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n    this.boundingRadius = radius;\n  }\n  updateAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = updateAABB_shapeAABB;\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset);\n      bodyQuat.mult(shapeOrientations[i], orientation);\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n    this.aabbNeedsUpdate = false;\n  }\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force)\n      ;\n    else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      uiw_m3;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n  applyForce(force, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    }\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce);\n    this.force.vadd(force, this.force);\n    this.torque.vadd(rotForce, this.torque);\n  }\n  applyLocalForce(localForce, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld;\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n  applyTorque(torque2) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    }\n    this.torque.vadd(torque2, this.torque);\n  }\n  applyImpulse(impulse, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    }\n    const r = relativePoint;\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo);\n    this.velocity.vadd(velo, this.velocity);\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    this.invInertiaWorld.vmult(rotVelo, rotVelo);\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint;\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation;\n    this.updateAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1 / I.x : 0, I.y > 0 && !fixed ? 1 / I.y : 0, I.z > 0 && !fixed ? 1 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      return;\n    }\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque2 = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque2.x * angularFactor.x;\n    const ty = torque2.y * angularFactor.y;\n    const tz = torque2.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz);\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n    this.aabbNeedsUpdate = true;\n    this.updateInertiaWorld();\n  }\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = \"collide\";\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: \"wakeup\"\n};\nBody.sleepyEvent = {\n  type: \"sleepy\"\n};\nBody.sleepEvent = {\n  type: \"sleep\"\n};\nconst tmpVec = new Vec3();\nconst tmpQuat = new Quaternion();\nconst updateAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\nconst uiw_m3 = new Mat3();\nconst Body_applyForce_rotForce = new Vec3();\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\nclass Broadphase {\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  collisionPairs(world, p1, p2) {\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n  }\n  needBroadphaseCollision(bodyA, bodyB) {\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    }\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      return false;\n    }\n    return true;\n  }\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.updateAABB();\n    }\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.updateAABB();\n    }\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n    pairs1.length = 0;\n    pairs2.length = 0;\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;\n      t[key] = i;\n      t.keys.push(key);\n    }\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  setWorld(world) {\n  }\n  static boundingSphereCheck(bodyA, bodyB) {\n    const dist = new Vec3();\n    bodyA.position.vsub(bodyB.position, dist);\n    const sa = bodyA.shapes[0];\n    const sb = bodyB.shapes[0];\n    return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n  }\n  aabbQuery(world, aabb, result) {\n    console.warn(\".aabbQuery is not implemented in this Broadphase subclass.\");\n    return [];\n  }\n}\nconst Broadphase_collisionPairs_r = new Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\nnew Vec3();\nclass GridBroadphase extends Broadphase {\n  constructor(aabbMin, aabbMax, nx, ny, nz) {\n    if (aabbMin === void 0) {\n      aabbMin = new Vec3(100, 100, 100);\n    }\n    if (aabbMax === void 0) {\n      aabbMax = new Vec3(-100, -100, -100);\n    }\n    if (nx === void 0) {\n      nx = 10;\n    }\n    if (ny === void 0) {\n      ny = 10;\n    }\n    if (nz === void 0) {\n      nz = 10;\n    }\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n    this.bins = [];\n    this.binLengths = [];\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.bodies.length;\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    types.BOX;\n    types.COMPOUND;\n    types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length;\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n    const ceil = Math.ceil;\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    }\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n      switch (si.type) {\n        case SPHERE: {\n          const shape = si;\n          const x = bi.position.x;\n          const y = bi.position.y;\n          const z = bi.position.z;\n          const r = shape.radius;\n          addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n          break;\n        }\n        case PLANE: {\n          const shape = si;\n          if (shape.worldNormalNeedsUpdate) {\n            shape.computeWorldNormal(bi.quaternion);\n          }\n          const planeNormal = shape.worldNormal;\n          const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n          const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n          const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n          const d = GridBroadphase_collisionPairs_d;\n          d.set(xreset, yreset, zreset);\n          for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n            for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n              for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                if (d.dot(planeNormal) < binRadius) {\n                  const idx = xoff + yoff + zoff;\n                  bins[idx][binLengths[idx]++] = bi;\n                }\n              }\n            }\n          }\n          break;\n        }\n        default: {\n          if (bi.aabbNeedsUpdate) {\n            bi.updateAABB();\n          }\n          addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n          break;\n        }\n      }\n    }\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i];\n      if (binLength > 1) {\n        const bin = bins[i];\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    }\n    this.makePairsUnique(pairs1, pairs2);\n  }\n}\nconst GridBroadphase_collisionPairs_d = new Vec3();\nnew Vec3();\nclass NaiveBroadphase extends Broadphase {\n  constructor() {\n    super();\n  }\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj;\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b2 = world.bodies[i];\n      if (b2.aabbNeedsUpdate) {\n        b2.updateAABB();\n      }\n      if (b2.aabb.overlaps(aabb)) {\n        result.push(b2);\n      }\n    }\n    return result;\n  }\n}\nclass RaycastResult {\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  abort() {\n    this.shouldStop = true;\n  }\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n}\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\nconst RAY_MODES = {\n  CLOSEST: 1,\n  ANY: 2,\n  ALL: 4\n};\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\nclass Ray {\n  get [_Shape$types$SPHERE]() {\n    return this._intersectSphere;\n  }\n  get [_Shape$types$PLANE]() {\n    return this._intersectPlane;\n  }\n  get [_Shape$types$BOX]() {\n    return this._intersectBox;\n  }\n  get [_Shape$types$CYLINDER]() {\n    return this._intersectConvex;\n  }\n  get [_Shape$types$CONVEXPO]() {\n    return this._intersectConvex;\n  }\n  get [_Shape$types$HEIGHTFI]() {\n    return this._intersectHeightfield;\n  }\n  get [_Shape$types$TRIMESH]() {\n    return this._intersectTrimesh;\n  }\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3();\n    }\n    if (to === void 0) {\n      to = new Vec3();\n    }\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 1e-4;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n    this.callback = (result) => {\n    };\n  }\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== \"undefined\" ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== \"undefined\" ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== \"undefined\" ? options.checkCollisionResponse : true;\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n    this.callback = options.callback || (() => {\n    });\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n    const checkCollisionResponse = this.checkCollisionResponse;\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue;\n      }\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n  intersectShape(shape, quat, position, body) {\n    const from = this.from;\n    const distance = distanceFromIntersection(from, this.direction, position);\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n    const intersectMethod = this[shape.type];\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n    if (planeToFrom * planeToTo > 0) {\n      return;\n    }\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n    const n_dot_dir = worldNormal.dot(direction);\n    if (Math.abs(n_dot_dir) < this.precision) {\n      return;\n    }\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize;\n    const localRay = intersectHeightfield_localRay;\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection();\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY;\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n        shape.getAabbAtIndex(i, j, aabb);\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        }\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n        if (this.result.shouldStop) {\n          return;\n        }\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a2 = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b2 = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c2 = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b2 ** 2 - 4 * a2 * c2;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n    if (delta < 0) {\n      return;\n    } else if (delta === 0) {\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b2 - Math.sqrt(delta)) / (2 * a2);\n      const d2 = (-b2 + Math.sqrt(delta)) / (2 * a2);\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n      if (this.result.shouldStop) {\n        return;\n      }\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    intersectConvex_minDistNormal;\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    intersectConvex_minDistIntersect;\n    const faceList = options && options.faceList || null;\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position;\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector);\n      vector.vsub(from, vector);\n      q.vmult(faceNormal, normal);\n      const dot = direction.dot(normal);\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      }\n      const scalar = normal.dot(vector) / dot;\n      if (scalar < 0) {\n        continue;\n      }\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint);\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n        if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      }\n    }\n  }\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal;\n    const indices = mesh.indices;\n    mesh.vertices;\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal);\n      mesh.getVertex(indices[trianglesIndex * 3], a);\n      a.vsub(localFrom, vector);\n      const dot = localDirection.dot(normal);\n      const scalar = normal.dot(vector) / dot;\n      if (scalar < 0) {\n        continue;\n      }\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint);\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n      if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      }\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n    triangles.length = 0;\n  }\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result;\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n    result.hitFaceIndex = typeof hitFaceIndex !== \"undefined\" ? hitFaceIndex : -1;\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n      case Ray.CLOSEST:\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n        break;\n      case Ray.ANY:\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  static pointInTriangle(p, a2, b2, c2) {\n    c2.vsub(a2, v0);\n    b2.vsub(a2, v1);\n    p.vsub(a2, v2);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_minDistNormal = new Vec3();\nconst intersectConvex_minDistIntersect = new Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n  position.vsub(from, v0);\n  const dot = v0.dot(direction);\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\nclass SAPBroadphase extends Broadphase {\n  static checkBounds(bi, bj, axisIndex) {\n    let biPos;\n    let bjPos;\n    if (axisIndex === 0) {\n      biPos = bi.position.x;\n      bjPos = bj.position.x;\n    } else if (axisIndex === 1) {\n      biPos = bi.position.y;\n      bjPos = bj.position.y;\n    } else if (axisIndex === 2) {\n      biPos = bi.position.z;\n      bjPos = bj.position.z;\n    }\n    const ri = bi.boundingRadius, rj = bj.boundingRadius, boundA2 = biPos + ri, boundB1 = bjPos - rj;\n    return boundB1 < boundA2;\n  }\n  static insertionSortX(a2) {\n    for (let i = 1, l = a2.length; i < l; i++) {\n      const v = a2[i];\n      let j;\n      for (j = i - 1; j >= 0; j--) {\n        if (a2[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n          break;\n        }\n        a2[j + 1] = a2[j];\n      }\n      a2[j + 1] = v;\n    }\n    return a2;\n  }\n  static insertionSortY(a2) {\n    for (let i = 1, l = a2.length; i < l; i++) {\n      const v = a2[i];\n      let j;\n      for (j = i - 1; j >= 0; j--) {\n        if (a2[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n          break;\n        }\n        a2[j + 1] = a2[j];\n      }\n      a2[j + 1] = v;\n    }\n    return a2;\n  }\n  static insertionSortZ(a2) {\n    for (let i = 1, l = a2.length; i < l; i++) {\n      const v = a2[i];\n      let j;\n      for (j = i - 1; j >= 0; j--) {\n        if (a2[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n          break;\n        }\n        a2[j + 1] = a2[j];\n      }\n      a2[j + 1] = v;\n    }\n    return a2;\n  }\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n    this._addBodyHandler = (event) => {\n      axisList.push(event.body);\n    };\n    this._removeBodyHandler = (event) => {\n      const idx = axisList.indexOf(event.body);\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  setWorld(world) {\n    this.axisList.length = 0;\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    }\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length;\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n      if (bi.aabbNeedsUpdate) {\n        bi.updateAABB();\n      }\n    }\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n    for (let i = 0; i !== N; i++) {\n      const b2 = bodies[i];\n      const centerX = b2.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b2.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b2.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n    const axisIndex = this.axisIndex;\n    let axis = \"x\";\n    if (axisIndex === 1) {\n      axis = \"y\";\n    }\n    if (axisIndex === 2) {\n      axis = \"z\";\n    }\n    const axisList = this.axisList;\n    aabb.lowerBound[axis];\n    aabb.upperBound[axis];\n    for (let i = 0; i < axisList.length; i++) {\n      const b2 = axisList[i];\n      if (b2.aabbNeedsUpdate) {\n        b2.updateAABB();\n      }\n      if (b2.aabb.overlaps(aabb)) {\n        result.push(b2);\n      }\n    }\n    return result;\n  }\n}\nclass Utils {\n  static defaults(options, defaults) {\n    if (options === void 0) {\n      options = {};\n    }\n    for (let key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n    return options;\n  }\n}\nclass Constraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  update() {\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n  }\n  enable() {\n    const eqs = this.equations;\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  disable() {\n    const eqs = this.equations;\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n}\nConstraint.idCounter = 0;\nclass JacobianElement {\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n}\nclass Equation {\n  constructor(bi, bj, minForce, maxForce) {\n    if (minForce === void 0) {\n      minForce = -1e6;\n    }\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    this.id = Equation.idCounter++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0;\n    this.b = 0;\n    this.eps = 0;\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60);\n  }\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4 / (h * (1 + 4 * d));\n    this.b = 4 * d / (1 + 4 * d);\n    this.eps = 4 / (h * h * k * (1 + 4 * d));\n  }\n  computeB(a2, b2, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a2 - GW * b2 - GiMf * h;\n  }\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp);\n    result += tmp.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp);\n    result += tmp.dot(GB.rotational);\n    return result;\n  }\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp;\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda);\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n}\nEquation.idCounter = 0;\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\nconst tmp = new Vec3();\nconst addToWlambda_temp = new Vec3();\nclass ContactEquation extends Equation {\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n  computeB(h) {\n    const a2 = this.a;\n    const b2 = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    bi.force;\n    bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    bj.force;\n    bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni;\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn);\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec);\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a2 - GW * b2 - h * GiMf;\n    return B;\n  }\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n}\nconst ContactEquation_computeB_temp1 = new Vec3();\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\nclass PointToPointConstraint extends Constraint {\n  constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {\n    if (pivotA === void 0) {\n      pivotA = new Vec3();\n    }\n    if (pivotB === void 0) {\n      pivotB = new Vec3();\n    }\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB);\n    this.equations.push(x, y, z);\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ;\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n}\nclass ConeEquation extends Equation {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const maxForce = typeof options.maxForce !== \"undefined\" ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== \"undefined\" ? options.angle : 0;\n  }\n  computeB(h) {\n    const a2 = this.a;\n    const b2 = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$2;\n    const njxni = tmpVec2$2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a2 - GW * b2 - h * GiMf;\n    return B;\n  }\n}\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\nclass RotationalEquation extends Equation {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const maxForce = typeof options.maxForce !== \"undefined\" ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n  computeB(h) {\n    const a2 = this.a;\n    const b2 = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a2 - GW * b2 - h * GiMf;\n    return B;\n  }\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\nclass ConeTwistConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const maxForce = typeof options.maxForce !== \"undefined\" ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== \"undefined\" ? options.angle : 0;\n    const c2 = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== \"undefined\" ? options.twistAngle : 0;\n    c2.maxForce = 0;\n    c2.minForce = -maxForce;\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c2, t);\n  }\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update();\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n}\nnew Vec3();\nnew Vec3();\nclass DistanceConstraint extends Constraint {\n  constructor(bodyA, bodyB, distance, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    super(bodyA, bodyB);\n    if (typeof distance === \"undefined\") {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n}\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const maxForce = typeof options.maxForce !== \"undefined\" ? options.maxForce : 1e6;\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z);\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    LockConstraint_update_tmpVec1;\n    LockConstraint_update_tmpVec2;\n    super.update();\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n}\nconst LockConstraint_update_tmpVec1 = new Vec3();\nconst LockConstraint_update_tmpVec2 = new Vec3();\nclass RotationalMotorEquation extends Equation {\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n  computeB(h) {\n    this.a;\n    const b2 = this.b;\n    this.bi;\n    this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b2 - h * GiMf;\n    return B;\n  }\n}\nclass HingeConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const maxForce = typeof options.maxForce !== \"undefined\" ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false;\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update();\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\nclass FrictionEquation extends Equation {\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n  computeB(h) {\n    this.a;\n    const b2 = this.b;\n    this.bi;\n    this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t;\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt);\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b2 - h * GiMf;\n    return B;\n  }\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\nclass ContactMaterial {\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n}\nContactMaterial.idCounter = 0;\nclass Material {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    let name = \"\";\n    if (typeof options === \"string\") {\n      name = options;\n      options = {};\n    }\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== \"undefined\" ? options.friction : -1;\n    this.restitution = typeof options.restitution !== \"undefined\" ? options.restitution : -1;\n  }\n}\nMaterial.idCounter = 0;\nclass Spring {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.restLength = typeof options.restLength === \"number\" ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp2 = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f;\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj);\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize();\n    bodyB.velocity.vsub(bodyA.velocity, u);\n    bodyB.angularVelocity.cross(rj, tmp2);\n    u.vadd(tmp2, u);\n    bodyA.angularVelocity.cross(ri, tmp2);\n    u.vsub(tmp2, u);\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f);\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force);\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\nclass WheelInfo {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10.5,\n      forwardAcceleration: 1,\n      sideAcceleration: 1,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.forwardAcceleration = options.forwardAcceleration;\n    this.sideAcceleration = options.sideAcceleration;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0;\n        this.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1;\n    }\n  }\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\nclass RaycastVehicle {\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== \"undefined\" ? options.indexRightAxis : 2;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== \"undefined\" ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== \"undefined\" ? options.indexUpAxis : 1;\n    this.constraints = [];\n    this.preStepCallback = () => {\n    };\n    this.currentVehicleSpeedKmHour = 0;\n    this.numWheelsOnGround = 0;\n  }\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  addToWorld(world) {\n    world.addBody(this.chassisBody);\n    const that = this;\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n    world.addEventListener(\"preStep\", this.preStepCallback);\n    this.world = world;\n  }\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    }\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos2 = new Vec3();\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos2);\n      chassisBody.applyImpulse(impulse, relpos2);\n    }\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n      let m = 1;\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      }\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n      wheel.rotation += wheel.deltaRotation;\n      wheel.deltaRotation *= 0.99;\n    }\n  }\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n      if (wheel.isInContact) {\n        let force;\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  removeFromWorld(world) {\n    this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener(\"preStep\", this.preStepCallback);\n    this.world = null;\n  }\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset();\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius;\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint2 = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint2);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint2);\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1;\n    }\n    return depth;\n  }\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize();\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n    this.numWheelsOnGround = 0;\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      if (groundObject) {\n        this.numWheelsOnGround++;\n      }\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i);\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep;\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      }\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction;\n        const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;\n        const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    }\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp);\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos[\"xyz\"[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos);\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nnew Ray();\nnew Vec3();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld;\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel;\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1);\n  j1 = -vrel * jacDiagABInv;\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n  return j1;\n}\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3();\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n  if (normalLenSqr > 1.1) {\n    return 0;\n  }\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\nclass Sphere extends Shape {\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== void 0 ? radius : 1;\n    if (this.radius < 0) {\n      throw new Error(\"The sphere radius cannot be negative.\");\n    }\n    this.updateBoundingSphereRadius();\n  }\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    const I = 2 * mass * this.radius * this.radius / 5;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n  volume() {\n    return 4 * Math.PI * Math.pow(this.radius, 3) / 3;\n  }\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = [\"x\", \"y\", \"z\"];\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n}\nclass RigidVehicle {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== \"undefined\" ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 0.5, 2))\n      });\n    }\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    let wheelBody;\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n    const position = typeof options.position !== \"undefined\" ? options.position.clone() : new Vec3();\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n    const axis = typeof options.axis !== \"undefined\" ? options.axis.clone() : new Vec3(0, 0, 1);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  setSteeringValue(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const c2 = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const z = axis.z;\n    this.constraints[wheelIndex].axisA.set(-c2 * x + s * z, 0, s * x + c2 * z);\n  }\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n    world.addEventListener(\"preStep\", this._update.bind(this));\n  }\n  _update() {\n    const wheelForces = this.wheelForces;\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\nclass SPHSystem {\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 1e-6;\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  add(particle) {\n    this.particles.push(particle);\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      const neighbors = this.neighbors[i];\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]);\n      const numNeighbors = neighbors.length;\n      let sum = 0;\n      for (let j = 0; j !== numNeighbors; j++) {\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      }\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0);\n      let Pij;\n      let nabla;\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length;\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j];\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length();\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW);\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure);\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1 / (1e-4 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u);\n        a_visc.vadd(u, a_visc);\n      }\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure);\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  }\n  w(r) {\n    const h = this.smoothingRadius;\n    return 315 / (64 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  }\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945 / (32 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  }\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945 / (32 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n}\nconst SPHSystem_getNeighbors_dist = new Vec3();\nconst SPHSystem_update_dist = new Vec3();\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\nclass Cylinder extends ConvexPolyhedron {\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n    if (height === void 0) {\n      height = 1;\n    }\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n    if (radiusTop < 0) {\n      throw new Error(\"The cylinder radiusTop cannot be negative.\");\n    }\n    if (radiusBottom < 0) {\n      throw new Error(\"The cylinder radiusBottom cannot be negative.\");\n    }\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin;\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0);\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n      if (i < N - 1) {\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2);\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3);\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]);\n      }\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0));\n    const temp = [];\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n    this.type = Shape.types.CYLINDER;\n    this.radiusTop = radiusTop;\n    this.radiusBottom = radiusBottom;\n    this.height = height;\n    this.numSegments = numSegments;\n  }\n}\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    target.set(0, 0, 0);\n    return target;\n  }\n  volume() {\n    return 0;\n  }\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    min.copy(pos);\n    max.copy(pos);\n  }\n}\nclass Plane extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    });\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    return target;\n  }\n  volume() {\n    return Number.MAX_VALUE;\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    tempNormal.set(0, 0, 1);\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n}\nconst tempNormal = new Vec3();\nclass Heightfield extends Shape {\n  constructor(data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius();\n    this._cachedPillars = {};\n  }\n  update() {\n    this._cachedPillars = {};\n  }\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n    this.minValue = minValue;\n  }\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n    this.maxValue = maxValue;\n  }\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value;\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n    if (result === void 0) {\n      result = [];\n    }\n    const data = this.data;\n    let max = this.minValue;\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  getIndexOfPosition(x, y, result, clamp) {\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n    if (clamp) {\n      if (xi < 0) {\n        xi = 0;\n      }\n      if (yi < 0) {\n        yi = 0;\n      }\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    }\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n    return true;\n  }\n  getTriangleAt(x, y, edgeClamp, a2, b2, c2) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a2, b2, c2);\n    return upper;\n  }\n  getNormalAt(x, y, edgeClamp, result) {\n    const a2 = getNormalAt_a;\n    const b2 = getNormalAt_b;\n    const c2 = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a2, b2, c2);\n    b2.vsub(a2, e0);\n    c2.vsub(a2, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  getAabbAtIndex(xi, yi, _ref) {\n    let {\n      lowerBound,\n      upperBound\n    } = _ref;\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a2 = getHeightAt_a;\n    const b2 = getHeightAt_b;\n    const c2 = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n    const upper = this.getTriangleAt(x, y, edgeClamp, a2, b2, c2);\n    barycentricWeights(x, y, a2.x, a2.y, b2.x, b2.y, c2.x, c2.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n    if (upper) {\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n  }\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  getTriangle(xi, yi, upper, a2, b2, c2) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n    if (upper) {\n      a2.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b2.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c2.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      a2.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b2.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c2.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n    if (this.cacheEnabled) {\n      const data2 = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n      if (data2) {\n        this.pillarConvex = data2.convex;\n        this.pillarOffset = data2.offset;\n        return;\n      }\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces;\n    result.vertices.length = 6;\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    }\n    faces.length = 5;\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n    if (!getUpperTriangle) {\n      offsetResult.set((xi + 0.25) * elementSize, (yi + 0.25) * elementSize, h);\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h);\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1);\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2;\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3;\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3;\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4;\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      offsetResult.set((xi + 0.75) * elementSize, (yi + 0.75) * elementSize, h);\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h);\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1);\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2;\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3;\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0;\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0;\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n    target.set(0, 0, 0);\n    return target;\n  }\n  volume() {\n    return Number.MAX_VALUE;\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n  updateBoundingSphereRadius() {\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext(\"2d\");\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n      for (let j = 0; j < imageData.width; j++) {\n        const a2 = imageData.data[(i * imageData.height + j) * 4];\n        const b2 = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c2 = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a2 + b2 + c2) / 4 / 255 * z;\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3();\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\nclass OctreeNode {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  insert(aabb, elementData, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n    const nodeData = this.data;\n    if (!this.aabb.contains(aabb)) {\n      return false;\n    }\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n    if (level < maxDepth) {\n      let subdivided = false;\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      }\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n      if (subdivided) {\n        children.length = 0;\n      }\n    }\n    nodeData.push(elementData);\n    return true;\n  }\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i];\n      child.root = root;\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound);\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  aabbQuery(aabb, result) {\n    this.data;\n    this.children;\n    const queue2 = [this];\n    while (queue2.length) {\n      const node = queue2.pop();\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n      Array.prototype.push.apply(queue2, node.children);\n    }\n    return result;\n  }\n  rayQuery(ray, treeTransform, result) {\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n    return result;\n  }\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n}\nclass Octree extends OctreeNode {\n  constructor(aabb, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== \"undefined\" ? options.maxDepth : 8;\n  }\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB = new AABB();\nclass Trimesh extends Shape {\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale;\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n    const triangleAABB = new AABB();\n    const a2 = new Vec3();\n    const b2 = new Vec3();\n    const c2 = new Vec3();\n    const points = [a2, b2, c2];\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      this._getUnscaledVertex(this.indices[i3], a2);\n      this._getUnscaledVertex(this.indices[i3 + 1], b2);\n      this._getUnscaledVertex(this.indices[i3 + 2], c2);\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n  }\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb);\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n    if (!(wasUniform && isUniform)) {\n      this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  updateNormals() {\n    const n = computeNormals_n;\n    const normals = this.normals;\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a2 = this.indices[i3];\n      const b2 = this.indices[i3 + 1];\n      const c2 = this.indices[i3 + 2];\n      this.getVertex(a2, va);\n      this.getVertex(b2, vb);\n      this.getVertex(c2, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  updateEdges() {\n    const edges = {};\n    const add = (a2, b2) => {\n      const key = a2 < b2 ? `${a2}_${b2}` : `${b2}_${a2}`;\n      edges[key] = true;\n    };\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a2 = this.indices[i3];\n      const b2 = this.indices[i3 + 1];\n      const c2 = this.indices[i3 + 2];\n      add(a2, b2);\n      add(b2, c2);\n      add(c2, a2);\n    }\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split(\"_\");\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va2 = getEdgeVector_va;\n    const vb2 = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va2);\n    this.getEdgeVertex(edgeIndex, 1, vb2);\n    vb2.vsub(va2, vectorStore);\n  }\n  static computeNormal(va2, vb2, vc2, target) {\n    vb2.vsub(va2, ab);\n    vc2.vsub(vb2, cb);\n    cb.cross(ab, target);\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  getVertex(i, out) {\n    const scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  getTriangleVertices(i, a2, b2, c2) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a2);\n    this.getVertex(this.indices[i3 + 1], b2);\n    this.getVertex(this.indices[i3 + 2], c2);\n  }\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  calculateLocalInertia(mass, target) {\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1 / 12 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1 / 12 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1 / 12 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  updateBoundingSphereRadius() {\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  calculateWorldAABB(pos, quat, min, max) {\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  volume() {\n    return 4 * Math.PI * this.boundingSphereRadius / 3;\n  }\n  static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n    if (tube === void 0) {\n      tube = 0.5;\n    }\n    if (radialSegments === void 0) {\n      radialSegments = 8;\n    }\n    if (tubularSegments === void 0) {\n      tubularSegments = 6;\n    }\n    if (arc === void 0) {\n      arc = Math.PI * 2;\n    }\n    const vertices = [];\n    const indices = [];\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n        const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        const z = tube * Math.sin(v);\n        vertices.push(x, y, z);\n      }\n    }\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        const a2 = (tubularSegments + 1) * j + i - 1;\n        const b2 = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c2 = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n        indices.push(a2, b2, d);\n        indices.push(b2, c2, d);\n      }\n    }\n    return new Trimesh(vertices, indices);\n  }\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\nconst cb = new Vec3();\nconst ab = new Vec3();\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\nclass Solver {\n  constructor() {\n    this.equations = [];\n  }\n  solve(dt, world) {\n    return 0;\n  }\n  addEquation(eq) {\n    if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {\n      this.equations.push(eq);\n    }\n  }\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n}\nclass GSSolver extends Solver {\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj;\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    }\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for (let i = 0; i !== Neq; i++) {\n      const c2 = equations[i];\n      lambda[i] = 0;\n      Bs[i] = c2.computeB(h);\n      invCs[i] = 1 / c2.computeC();\n    }\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        const b2 = bodies[i];\n        const vlambda = b2.vlambda;\n        const wlambda = b2.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      }\n      for (iter = 0; iter !== maxIter; iter++) {\n        deltalambdaTot = 0;\n        for (let j = 0; j !== Neq; j++) {\n          const c2 = equations[j];\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c2.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c2.eps * lambdaj);\n          if (lambdaj + deltalambda < c2.minForce) {\n            deltalambda = c2.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c2.maxForce) {\n            deltalambda = c2.maxForce - lambdaj;\n          }\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0 ? deltalambda : -deltalambda;\n          c2.addToWlambda(deltalambda);\n        }\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      }\n      for (let i = 0; i !== Nbodies; i++) {\n        const b2 = bodies[i];\n        const v = b2.velocity;\n        const w = b2.angularVelocity;\n        b2.vlambda.vmul(b2.linearFactor, b2.vlambda);\n        v.vadd(b2.vlambda, v);\n        b2.wlambda.vmul(b2.angularFactor, b2.wlambda);\n        w.vadd(b2.wlambda, w);\n      }\n      let l = equations.length;\n      const invDt = 1 / h;\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n    return iter;\n  }\n}\nconst GSSolver_solve_lambda = [];\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\nclass SplitSolver extends Solver {\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver;\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    }\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n      subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n    return n;\n  }\n}\nconst SplitSolver_solve_nodes = [];\nconst SplitSolver_solve_eqs = [];\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n};\nconst STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n  return false;\n}\nconst queue = [];\nfunction bfs(root, visitFunc2, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc2(root, bds, eqs);\n  while (queue.length) {\n    const node = queue.pop();\n    let child;\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc2(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\nfunction sortById(a2, b2) {\n  return b2.id - a2.id;\n}\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n  release() {\n    const Nargs = arguments.length;\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(i < 0 || arguments.length <= i ? void 0 : arguments[i]);\n    }\n    return this;\n  }\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  constructObject() {\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n  }\n  resize(size) {\n    const objects = this.objects;\n    while (objects.length > size) {\n      objects.pop();\n    }\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n    return this;\n  }\n}\nclass Vec3Pool extends Pool {\n  constructor() {\n    super(...arguments);\n    this.type = Vec3;\n  }\n  constructObject() {\n    return new Vec3();\n  }\n}\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\nclass Narrowphase {\n  get [COLLISION_TYPES.sphereSphere]() {\n    return this.sphereSphere;\n  }\n  get [COLLISION_TYPES.spherePlane]() {\n    return this.spherePlane;\n  }\n  get [COLLISION_TYPES.boxBox]() {\n    return this.boxBox;\n  }\n  get [COLLISION_TYPES.sphereBox]() {\n    return this.sphereBox;\n  }\n  get [COLLISION_TYPES.planeBox]() {\n    return this.planeBox;\n  }\n  get [COLLISION_TYPES.convexConvex]() {\n    return this.convexConvex;\n  }\n  get [COLLISION_TYPES.sphereConvex]() {\n    return this.sphereConvex;\n  }\n  get [COLLISION_TYPES.planeConvex]() {\n    return this.planeConvex;\n  }\n  get [COLLISION_TYPES.boxConvex]() {\n    return this.boxConvex;\n  }\n  get [COLLISION_TYPES.sphereHeightfield]() {\n    return this.sphereHeightfield;\n  }\n  get [COLLISION_TYPES.boxHeightfield]() {\n    return this.boxHeightfield;\n  }\n  get [COLLISION_TYPES.convexHeightfield]() {\n    return this.convexHeightfield;\n  }\n  get [COLLISION_TYPES.sphereParticle]() {\n    return this.sphereParticle;\n  }\n  get [COLLISION_TYPES.planeParticle]() {\n    return this.planeParticle;\n  }\n  get [COLLISION_TYPES.boxParticle]() {\n    return this.boxParticle;\n  }\n  get [COLLISION_TYPES.convexParticle]() {\n    return this.convexParticle;\n  }\n  get [COLLISION_TYPES.cylinderCylinder]() {\n    return this.convexConvex;\n  }\n  get [COLLISION_TYPES.sphereCylinder]() {\n    return this.sphereConvex;\n  }\n  get [COLLISION_TYPES.planeCylinder]() {\n    return this.planeConvex;\n  }\n  get [COLLISION_TYPES.boxCylinder]() {\n    return this.boxConvex;\n  }\n  get [COLLISION_TYPES.convexCylinder]() {\n    return this.convexConvex;\n  }\n  get [COLLISION_TYPES.heightfieldCylinder]() {\n    return this.heightfieldCylinder;\n  }\n  get [COLLISION_TYPES.particleCylinder]() {\n    return this.particleCylinder;\n  }\n  get [COLLISION_TYPES.sphereTrimesh]() {\n    return this.sphereTrimesh;\n  }\n  get [COLLISION_TYPES.planeTrimesh]() {\n    return this.planeTrimesh;\n  }\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c2;\n    if (this.contactPointPool.length) {\n      c2 = this.contactPointPool.pop();\n      c2.bi = bi;\n      c2.bj = bj;\n    } else {\n      c2 = new ContactEquation(bi, bj);\n    }\n    c2.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c2.restitution = cm.restitution;\n    c2.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c2.restitution = matA.restitution * matB.restitution;\n    }\n    c2.si = overrideShapeA || si;\n    c2.sj = overrideShapeB || sj;\n    return c2;\n  }\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial;\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n    if (friction > 0) {\n      const mug = friction * world.gravity.length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass;\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj);\n      contactEquation.ni.tangents(c1.t, c2.t);\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n    return false;\n  }\n  createFrictionFromAverage(numContacts) {\n    let c2 = this.result[this.result.length - 1];\n    if (!this.createFrictionEquationsFromContact(c2, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c2.bi;\n    c2.bj;\n    for (let i = 0; i !== numContacts; i++) {\n      c2 = this.result[this.result.length - 1 - i];\n      if (c2.bi !== bodyA) {\n        averageNormal.vadd(c2.ni, averageNormal);\n        averageContactPointA.vadd(c2.ri, averageContactPointA);\n        averageContactPointB.vadd(c2.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c2.ni, averageNormal);\n        averageContactPointA.vadd(c2.rj, averageContactPointA);\n        averageContactPointB.vadd(c2.ri, averageContactPointB);\n      }\n    }\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri);\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n  }\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1;\n    const xj = tmpVec2;\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      const bi = p1[k];\n      const bj = p2[k];\n      let bodyContactMaterial = null;\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n        for (let j = 0; j < bj.shapes.length; j++) {\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          }\n          let shapeContactMaterial = null;\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n          if (resolver) {\n            let retval = false;\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n            if (retval && justTest) {\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    }\n    const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n    xj.vsub(xi, contactEq.ni);\n    contactEq.ni.normalize();\n    contactEq.ri.copy(contactEq.ni);\n    contactEq.rj.copy(contactEq.ni);\n    contactEq.ri.scale(si.radius, contactEq.ri);\n    contactEq.rj.scale(-sj.radius, contactEq.rj);\n    contactEq.ri.vadd(xi, contactEq.ri);\n    contactEq.ri.vsub(bi.position, contactEq.ri);\n    contactEq.rj.vadd(xj, contactEq.rj);\n    contactEq.rj.vsub(bj.position, contactEq.rj);\n    this.result.push(contactEq);\n    this.createFrictionEquationsFromContact(contactEq, this.frictionResult);\n  }\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni);\n    r.ni.normalize();\n    r.ni.scale(si.radius, r.ri);\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj);\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      }\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n    let found = false;\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize();\n      const dot = box_to_sphere.dot(ns);\n      if (dot < h + R && dot > 0) {\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist2 = Math.abs(dot - h - R);\n          if (side_distance === null || dist2 < side_distance) {\n            side_distance = dist2;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    if (side_penetrations) {\n      found = true;\n      const r2 = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r2.ri);\n      r2.ni.copy(side_ns);\n      r2.ni.negate(r2.ni);\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r2.rj);\n      r2.ri.vadd(xi, r2.ri);\n      r2.ri.vsub(bi.position, r2.ri);\n      r2.rj.vadd(xj, r2.rj);\n      r2.rj.vsub(bj.position, r2.rj);\n      this.result.push(r2);\n      this.createFrictionEquationsFromContact(r2, this.frictionResult);\n    }\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          }\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n            found = true;\n            const r2 = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r2.ri.copy(sphere_to_corner);\n            r2.ri.normalize();\n            r2.ni.copy(r2.ri);\n            r2.ri.scale(R, r2.ri);\n            r2.rj.copy(rj);\n            r2.ri.vadd(xi, r2.ri);\n            r2.ri.vsub(bi.position, r2.ri);\n            r2.rj.vadd(xj, r2.rj);\n            r2.rj.vsub(bj.position, r2.rj);\n            this.result.push(r2);\n            this.createFrictionEquationsFromContact(r2, this.frictionResult);\n          }\n        }\n      }\n    }\n    v3pool.release(rj);\n    rj = null;\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get();\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent);\n          edgeTangent.scale(orthonorm, orthogonal);\n          let l = 0;\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          }\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist);\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj);\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri);\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point);\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj);\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    let found = false;\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i];\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj);\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    }\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i];\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal);\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint);\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec);\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        const faceVerts = [];\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          if (justTest) {\n            return true;\n          }\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri);\n          worldNormal.negate(r.ni);\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint);\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj);\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj);\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n          return;\n        } else {\n          for (let j = 0; j !== face.length; j++) {\n            const v12 = v3pool.get();\n            const v22 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v12);\n            qj.vmult(verts[face[(j + 2) % face.length]], v22);\n            xj.vadd(v12, v12);\n            xj.vadd(v22, v22);\n            const edge = sphereConvex_edge;\n            v22.vsub(v12, edge);\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit);\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v12, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v12, p);\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p);\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              if (justTest) {\n                return true;\n              }\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri);\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj);\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult);\n              for (let j2 = 0, Nfaceverts = faceVerts.length; j2 !== Nfaceverts; j2++) {\n                v3pool.release(faceVerts[j2]);\n              }\n              v3pool.release(v12);\n              v3pool.release(v22);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n            v3pool.release(v12);\n            v3pool.release(v22);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        }\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal);\n    let numContacts = 0;\n    const relpos2 = planeConvex_relpos;\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos2);\n      const dot = worldNormal.dot(relpos2);\n      if (dot <= 0) {\n        if (justTest) {\n          return true;\n        }\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj);\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos2), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri);\n        r.ni.copy(worldNormal);\n        worldVertex.vsub(convexPosition, r.rj);\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset2 = sphereHeightfield_tmp2;\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    }\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1];\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n    const result = this.result;\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false;\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset2);\n        if (spherePos.distanceTo(worldPillarOffset2) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset2, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n        if (justTest && intersecting) {\n          return true;\n        }\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset2);\n        if (spherePos.distanceTo(worldPillarOffset2) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset2, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n        if (justTest && intersecting) {\n          return true;\n        }\n        const numContacts = result.length - numContactsBefore;\n        if (numContacts > 2) {\n          return;\n        }\n      }\n    }\n  }\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset2 = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList;\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    }\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1];\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false;\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset2);\n        if (convexPos.distanceTo(worldPillarOffset2) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset2, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n        if (justTest && intersecting) {\n          return true;\n        }\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset2);\n        if (convexPos.distanceTo(worldPillarOffset2) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset2, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal);\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal);\n    const relpos2 = particlePlane_relpos;\n    xi.vsub(bj.position, relpos2);\n    const dot = normal.dot(relpos2);\n    if (dot <= 0) {\n      if (justTest) {\n        return true;\n      }\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal);\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0);\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected);\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local);\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      }\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i];\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n      if (penetratedFaceIndex !== -1) {\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec);\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec);\n        penetratedFaceNormal.negate(r.ni);\n        r.ri.set(0, 0, 0);\n        const ri = r.ri;\n        const rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn(\"Point found inside convex, but did not find penetrating face!\");\n      }\n    }\n  }\n  heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {\n    return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);\n  }\n  particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);\n  }\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp2 = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v22 = sphereTrimesh_v2;\n    const relpos2 = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles;\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n        v.vsub(localSpherePos, relpos2);\n        if (relpos2.lengthSquared() <= radiusSquared) {\n          v22.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v22, v);\n          v.vsub(spherePos, relpos2);\n          if (justTest) {\n            return true;\n          }\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos2);\n          r.ni.normalize();\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector);\n        localSpherePos.vsub(edgeVertexB, tmp2);\n        const positionAlongEdgeB = tmp2.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp2);\n        let positionAlongEdgeA = tmp2.dot(edgeVector);\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          localSpherePos.vsub(edgeVertexA, tmp2);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp2.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp2);\n          tmp2.vadd(edgeVertexA, tmp2);\n          const dist = tmp2.distanceTo(localSpherePos);\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp2.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp2, tmp2);\n            tmp2.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n    const va2 = sphereTrimesh_va;\n    const vb2 = sphereTrimesh_vb;\n    const vc2 = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va2, vb2, vc2);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va2, tmp2);\n      let dist = tmp2.dot(normal);\n      normal.scale(dist, tmp2);\n      localSpherePos.vsub(tmp2, tmp2);\n      dist = tmp2.distanceTo(localSpherePos);\n      if (Ray.pointInTriangle(tmp2, va2, vb2, vc2) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp2.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp2, tmp2);\n        tmp2.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n    triangles.length = 0;\n  }\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal);\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      trimeshShape.getVertex(i, v);\n      const v22 = new Vec3();\n      v22.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v22, v);\n      const relpos2 = planeTrimesh_relpos;\n      v.vsub(planePos, relpos2);\n      const dot = normal.dot(relpos2);\n      if (dot <= 0) {\n        if (justTest) {\n          return true;\n        }\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal);\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos2.dot(normal), projected);\n        v.vsub(projected, projected);\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  }\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nnew Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3();\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i];\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge);\n    const edge_x_normal = pointInPolygon_edge_x_normal;\n    edge.cross(normal, edge_x_normal);\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p);\n    const r = edge_x_normal.dot(vertex_to_p);\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n      continue;\n    } else {\n      return false;\n    }\n  }\n  return true;\n}\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nnew Vec3();\nnew Vec3();\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nconst particleSphere_normal = new Vec3();\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nnew Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\nclass OverlapKeeper {\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n    return i << 16 | j;\n  }\n  set(i, j) {\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n    while (key > current[index]) {\n      index++;\n    }\n    if (key === current[index]) {\n      return;\n    }\n    for (let j2 = current.length - 1; j2 >= index; j2--) {\n      current[j2 + 1] = current[j2];\n    }\n    current[index] = key;\n  }\n  tick() {\n    const tmp2 = this.current;\n    this.current = this.previous;\n    this.previous = tmp2;\n    this.current.length = 0;\n  }\n  getDiff(additions2, removals2) {\n    const a2 = this.current;\n    const b2 = this.previous;\n    const al = a2.length;\n    const bl = b2.length;\n    let j = 0;\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a2[i];\n      while (keyA > b2[j]) {\n        j++;\n      }\n      found = keyA === b2[j];\n      if (!found) {\n        unpackAndPush(additions2, keyA);\n      }\n    }\n    j = 0;\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b2[i];\n      while (keyB > a2[j]) {\n        j++;\n      }\n      found = a2[j] === keyB;\n      if (!found) {\n        unpackAndPush(removals2, keyB);\n      }\n    }\n  }\n}\nfunction unpackAndPush(array, key) {\n  array.push((key & 4294901760) >> 16, key & 65535);\n}\nconst getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n  get(i, j) {\n    const key = getKey(i, j);\n    return this.data[key];\n  }\n  set(i, j, value) {\n    const key = getKey(i, j);\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n    this.data[key] = value;\n  }\n  delete(i, j) {\n    const key = getKey(i, j);\n    const index = this.data.keys.indexOf(key);\n    if (index !== -1) {\n      this.data.keys.splice(index, 1);\n    }\n    delete this.data[key];\n  }\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n}\nclass World extends EventTarget {\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== void 0 ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== void 0 ? options.quatNormalizeFast : false;\n    this.time = 0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n    this.broadphase = options.broadphase !== void 0 ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== void 0 ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material(\"default\");\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: \"addBody\",\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: \"removeBody\",\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  addConstraint(c2) {\n    this.constraints.push(c2);\n  }\n  removeConstraint(c2) {\n    const idx = this.constraints.indexOf(c2);\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  raycastAll(from, to, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n  }\n  raycastAny(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  raycastClosest(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n    if (idx !== -1) {\n      bodies.splice(idx, 1);\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  }\n  getShapeById(id) {\n    const bodies = this.bodies;\n    for (let i = 0; i < bodies.length; i++) {\n      const shapes = bodies[i].shapes;\n      for (let j = 0; j < shapes.length; j++) {\n        const shape = shapes[j];\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n    return null;\n  }\n  addContactMaterial(cmat) {\n    this.contactmaterials.push(cmat);\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  removeContactMaterial(cmat) {\n    const idx = this.contactmaterials.indexOf(cmat);\n    if (idx === -1) {\n      return;\n    }\n    this.contactmaterials.splice(idx, 1);\n    this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);\n  }\n  fixedStep(dt, maxSubSteps) {\n    if (dt === void 0) {\n      dt = 1 / 60;\n    }\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n    const time = performance.now() / 1e3;\n    if (!this.lastCallTime) {\n      this.step(dt, void 0, maxSubSteps);\n    } else {\n      const timeSinceLastCalled = time - this.lastCallTime;\n      this.step(dt, timeSinceLastCalled, maxSubSteps);\n    }\n    this.lastCallTime = time;\n  }\n  step(dt, timeSinceLastCalled, maxSubSteps) {\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n    if (timeSinceLastCalled === void 0) {\n      this.internalStep(dt);\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      const t0 = performance.now();\n      let substeps = 0;\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n        if (performance.now() - t0 > dt * 1e3) {\n          break;\n        }\n      }\n      this.accumulator = this.accumulator % dt;\n      const t = this.accumulator / dt;\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b2 = this.bodies[j];\n        b2.previousPosition.lerp(b2.position, t, b2.interpolatedPosition);\n        b2.previousQuaternion.slerp(b2.quaternion, t, b2.interpolatedQuaternion);\n        b2.previousQuaternion.normalize();\n      }\n      this.time += timeSinceLastCalled;\n    }\n  }\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.bodies.length;\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      if (bi.type === DYNAMIC) {\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    }\n    for (let i2 = 0, Nsubsystems = this.subsystems.length; i2 !== Nsubsystems; i2++) {\n      this.subsystems[i2].update();\n    }\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n    p1.length = 0;\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    }\n    let Nconstraints = constraints.length;\n    for (i = 0; i !== Nconstraints; i++) {\n      const c2 = constraints[i];\n      if (!c2.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c2.bodyA === p1[j] && c2.bodyB === p2[j] || c2.bodyB === p1[j] && c2.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n    this.collisionMatrixTick();\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n    const NoldFrictionEquations = this.frictionEquations.length;\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, this.frictionEquations, frictionEquationPool);\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    }\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n    const ncontacts = contacts.length;\n    for (let k = 0; k !== ncontacts; k++) {\n      const c2 = contacts[k];\n      const bi = c2.bi;\n      const bj = c2.bj;\n      const si = c2.si;\n      const sj = c2.sj;\n      let cm;\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      }\n      cm.friction;\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          bi.material.friction * bj.material.friction;\n        }\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c2.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      }\n      solver.addEquation(c2);\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      }\n      this.collisionMatrix.set(bi, bj, true);\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c2;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n    this.emitContactEvents();\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    }\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    }\n    Nconstraints = constraints.length;\n    for (i = 0; i !== Nconstraints; i++) {\n      const c2 = constraints[i];\n      c2.update();\n      for (let j = 0, Neq = c2.equations.length; j !== Neq; j++) {\n        const eq = c2.equations[j];\n        solver.addEquation(eq);\n      }\n    }\n    solver.solve(dt, this);\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    }\n    solver.removeAllEquations();\n    const pow = Math.pow;\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      if (bi.type & DYNAMIC) {\n        const ld = pow(1 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n        if (av) {\n          const ad = pow(1 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n    this.dispatchEvent(World_step_preStepEvent);\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n    this.clearForces();\n    this.broadphase.dirty = true;\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    }\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent);\n    let hasActiveBodies = true;\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n    this.hasActiveBodies = hasActiveBodies;\n  }\n  emitContactEvents() {\n    const hasBeginContact = this.hasAnyEventListener(\"beginContact\");\n    const hasEndContact = this.hasAnyEventListener(\"endContact\");\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener(\"beginShapeContact\");\n    const hasEndShapeContact = this.hasAnyEventListener(\"endShapeContact\");\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        if (shapeA)\n          beginShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB)\n          beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        if (shapeA)\n          endShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB)\n          endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  }\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n    for (let i = 0; i !== N; i++) {\n      const b2 = bodies[i];\n      b2.force;\n      b2.torque;\n      b2.force.set(0, 0, 0);\n      b2.torque.set(0, 0, 0);\n    }\n  }\n}\nnew AABB();\nconst tmpRay = new Ray();\nconst performance = globalThis.performance || {};\nif (!performance.now) {\n  let nowOffset = Date.now();\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n  performance.now = () => Date.now() - nowOffset;\n}\nnew Vec3();\nconst World_step_postStepEvent = {\n  type: \"postStep\"\n};\nconst World_step_preStepEvent = {\n  type: \"preStep\"\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n};\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = [];\nconst World_step_p1 = [];\nconst World_step_p2 = [];\nconst additions = [];\nconst removals = [];\nconst beginContactEvent = {\n  type: \"beginContact\",\n  bodyA: null,\n  bodyB: null\n};\nconst endContactEvent = {\n  type: \"endContact\",\n  bodyA: null,\n  bodyB: null\n};\nconst beginShapeContactEvent = {\n  type: \"beginShapeContact\",\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nconst endShapeContactEvent = {\n  type: \"endShapeContact\",\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, WheelInfo, World };\n"],"names":["ObjectCollisionMatrix","constructor","this","matrix","get","bi","bj","id","i","j","temp","set","value","reset","setNumObjects","n","Mat3","elements","identity","e","setZero","setTrace","vector","x","y","z","getTrace","target","Vec3","vmult","v","smult","s","length","mmult","A","B","T","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","scale","t","solve","b2","nr","nc","eqns","push","k","np","kp","p","multiplier","isNaN","Infinity","toString","row","column","copy","r","sep","reverse","reverse_eqns","setRotationFromQuaternion","q","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","transpose","M","tmp2","cross","vx","vy","vz","vadd","vsub","crossmat","normalize","Math","sqrt","invN","unit","ninv","lengthSquared","dot","distanceTo","px","py","pz","distanceSquared","scalar","vmul","addScaledVector","isZero","negate","tangents","t1","t2","norm","Vec3_tangents_n","inorm","randVec","Vec3_tangents_randVec","abs","toArray","lerp","almostEquals","precision","almostZero","isAntiparallelTo","antip_neg","clone","ZERO","UNIT_X","UNIT_Y","UNIT_Z","AABB","options","lowerBound","upperBound","setFromPoints","points","position","quaternion","skinSize","l","u","tmp$1","aabb","extend","min","max","overlaps","l1","u1","l2","u2","overlapsX","overlapsY","overlapsZ","volume","contains","getCorners","a2","c2","d","f","g","h","toLocalFrame","frame","corners","transformIntoFrame_corners","corner","pointToLocal","toWorldFrame","pointToWorld","overlapsRay","ray","direction","from","dirFracX","dirFracY","dirFracZ","t3","t4","t5","t6","tmin","tmax","ArrayCollisionMatrix","index","EventTarget","addEventListener","type","listener","_listeners","listeners","includes","hasEventListener","hasAnyEventListener","removeEventListener","indexOf","splice","dispatchEvent","event","listenerArray","call","Quaternion","setFromAxisAngle","angle","sin","cos","toAxisAngle","targetAxis","acos","setFromVectors","sfv_t1","sfv_t2","PI","mult","quat","ax","ay","az","aw","bx","by","bz","bw","inverse","conjugate","inorm2","normalizeFast","qx","qy","qz","qw","ix","iy","iz","iw","toEuler","order","heading","attitude","bank","test","atan2","sqx","sqy","sqz","asin","Error","setFromEuler","c1","c3","s1","s2","s3","slerp","toQuat","omega","cosom","sinom","scale0","scale1","integrate","angularVelocity","dt","angularFactor","half_dt","SHAPE_TYPES","SPHERE","PLANE","BOX","COMPOUND","CONVEXPOLYHEDRON","HEIGHTFIELD","PARTICLE","CYLINDER","TRIMESH","Shape","idCounter","boundingSphereRadius","collisionResponse","collisionFilterGroup","collisionFilterMask","material","body","updateBoundingSphereRadius","calculateLocalInertia","mass","calculateWorldAABB","pos","types","Transform","worldPoint","result","pointToLocalFrame","localPoint","pointToWorldFrame","vectorToWorldFrame","localVector","tmpQuat$1","worldVector","ConvexPolyhedron","props","vertices","faces","normals","axes","super","faceNormals","computeNormals","worldVertices","worldVerticesNeedsUpdate","worldFaceNormals","worldFaceNormalsNeedsUpdate","uniqueAxes","slice","uniqueEdges","computeEdges","edges","edge","face","numVertices","found","getFaceNormal","vertex","console","error","warn","va2","vb2","vc2","computeNormal","cb2","ab2","clipAgainstHull","posA","quatA","hullB","posB","quatB","separatingNormal","minDist","maxDist","WorldNormal","closestFaceB","dmax","Number","MAX_VALUE","worldVertsB1","worldb","clipFaceAgainstHull","findSeparatingAxis","faceListA","faceListB","faceANormalWS3","Worldnormal1","deltaC","worldEdge0","worldEdge1","Cross","dmin","hullA","testSepAxis","numFacesA","fi","numFacesB","e0","e1","dist","axis","project","maxminA","maxminB","maxA","minA","maxB","minB","d0","d1","depth","aabbmax","aabbmin","computeLocalAABB","getPlaneConstantOfFace","face_i","faceANormalWS","edge0","WorldEdge0","worldPlaneAnormal1","planeNormalWS1","worldA1","localPlaneNormal","planeNormalWS","worldVertsB2","pVtxIn","pVtxOut","closestFaceA","polyA","connectedFaces","numVerticesA","otherFace","localPlaneEq2","planeEqWS2","clipFaceAgainstPlane","shift","localPlaneEq","planeEqWS","log","point","normal","inVertices","outVertices","planeNormal","planeConstant","n_dot_first","n_dot_last","numVerts","firstVertex","lastVertex","vi","newv","computeWorldVertices","verts","worldVerts","computeWorldFaceNormals","N","worldNormals","max2","norm2","minx","miny","minz","maxx","maxy","maxz","tempWorldVertex","getAveragePointLocal","transformAllPoints","offset","pointIsInside","positiveResult","pointInside","vToP","r1","vToPointInside","r2","shape","localAxis","project_localAxis","localOrigin","project_localOrigin","vs","vectorToLocalFrame","add","val","Box","halfExtents","convexPolyhedronRepresentation","updateConvexPolyhedronRepresentation","sx","sy","sz","V","calculateInertia","getSideNormals","sixTargetVectors","sides","ex","forEachWorldCorner","callback","worldCornerTempPos","worldCornersTemp","wc","wc2","BODY_TYPES","DYNAMIC","STATIC","KINEMATIC","BODY_SLEEP_STATES","AWAKE","SLEEPY","SLEEPING","Body","world","vlambda","previousPosition","interpolatedPosition","initPosition","velocity","initVelocity","force","invMass","linearDamping","allowSleep","sleepState","sleepSpeedLimit","sleepTimeLimit","timeLastSleepy","wakeUpAfterNarrowphase","torque","initQuaternion","previousQuaternion","interpolatedQuaternion","initAngularVelocity","shapes","shapeOffsets","shapeOrientations","inertia","invInertia","invInertiaWorld","invMassSolve","invInertiaSolve","invInertiaWorldSolve","fixedRotation","angularDamping","linearFactor","aabbNeedsUpdate","boundingRadius","wlambda","isTrigger","Boolean","addShape","updateMassProperties","wakeUp","prevState","wakeupEvent","sleep","sleepTick","time","speedSquared","speedLimitSquared","sleepyEvent","sleepEvent","updateSolveMassProperties","_offset","_orientation","orientation","updateBoundingRadius","removeShape","radius","updateAABB","tmpVec","tmpQuat","bodyQuat","shapeAABB","updateAABB_shapeAABB","updateInertiaWorld","I","m1","uiw_m1","m2","uiw_m2","applyForce","relativePoint","rotForce","Body_applyForce_rotForce","applyLocalForce","localForce","worldForce","Body_applyLocalForce_worldForce","relativePointWorld","Body_applyLocalForce_relativePointWorld","applyTorque","torque2","applyImpulse","impulse","velo","Body_applyImpulse_velo","rotVelo","Body_applyImpulse_rotVelo","applyLocalImpulse","localImpulse","worldImpulse","Body_applyLocalImpulse_worldImpulse","Body_applyLocalImpulse_relativePoint","Body_updateMassProperties_halfExtents","fixed","getVelocityAtWorldPoint","quatNormalize","quatNormalizeFast","angularVelo","iMdt","tx","ty","tz","COLLIDE_EVENT_NAME","Broadphase","useBoundingBoxes","dirty","collisionPairs","p1","p2","needBroadphaseCollision","bodyA","bodyB","intersectionTest","pairs1","pairs2","doBoundingBoxBroadphase","doBoundingSphereBroadphase","Broadphase_collisionPairs_r","boundingRadiusSum2","makePairsUnique","Broadphase_makePairsUnique_temp","Broadphase_makePairsUnique_p1","Broadphase_makePairsUnique_p2","id1","id2","key","keys","pop","pairIndex","setWorld","sa","sb","pow","aabbQuery","GridBroadphase","aabbMin","aabbMax","nx","ny","nz","nbins","bins","binLengths","bodies","xstep","ystep","zstep","xmax","ymax","zmax","xmin","ymin","zmin","xmult","ymult","zmult","binsizeX","binsizeY","binsizeZ","binRadius","Nbins","ceil","addBoxToBins","x0","y0","z0","x1","y1","z1","xoff0","yoff0","zoff0","xoff1","yoff1","zoff1","xoff","yoff","zoff","idx","si","worldNormalNeedsUpdate","computeWorldNormal","worldNormal","xreset","yreset","zreset","GridBroadphase_collisionPairs_d","xi","yi","zi","binLength","bin","NaiveBroadphase","RaycastResult","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","hasHit","hitFaceIndex","distance","shouldStop","abort","_Shape$types$SPHERE","_Shape$types$PLANE","_Shape$types$BOX","_Shape$types$CYLINDER","_Shape$types$CONVEXPO","_Shape$types$HEIGHTFI","_Shape$types$TRIMESH","RAY_MODES","CLOSEST","ANY","ALL","Ray","_intersectSphere","_intersectPlane","_intersectBox","_intersectConvex","_intersectHeightfield","_intersectTrimesh","to","checkCollisionResponse","skipBackfaces","mode","intersectWorld","updateDirection","getAABB","tmpAABB$1","tmpArray","broadphase","intersectBodies","intersectBody","intersectBody_xi","qi","intersectBody_qi","intersectShape","distanceFromIntersection","intersectMethod","box","reportedShape","len","planeToFrom","planeToTo","n_dot_dir","planePointToFrom","dir_scaled_with_t","reportIntersection","data","elementSize","localRay","intersectHeightfield_localRay","intersectHeightfield_index","iMinX","iMinY","iMaxX","iMaxY","getIndexOfPosition","getAabbAtIndex","getConvexTrianglePillar","pillarOffset","worldPillarOffset","pillarConvex","intersectConvexOptions","sphere","delta","intersectionPoint","Ray_intersectSphere_intersectionPoint","Ray_intersectSphere_normal","d2","intersectConvex_normal","intersectConvex_vector","faceList","fromToDistance","Nfaces","faceNormal","intersectPoint","a","b","c","pointInTriangle","mesh","intersectTrimesh_normal","triangles","intersectTrimesh_triangles","treeTransform","intersectTrimesh_treeTransform","localDirection","intersectTrimesh_localDirection","localFrom","intersectTrimesh_localFrom","localTo","intersectTrimesh_localTo","worldIntersectPoint","intersectTrimesh_worldIntersectPoint","intersectTrimesh_worldNormal","indices","fromToDistanceSquared","tree","rayQuery","trianglesIndex","getNormal","getVertex","squaredDistance","v0","v1","v2","dot00","dot01","dot02","dot11","dot12","intersect","SAPBroadphase","axisIndex","biPos","bjPos","ri","rj","boundA2","boundB1","axisList","_addBodyHandler","_removeBodyHandler","sortList","checkBounds","insertionSortX","insertionSortY","insertionSortZ","autoDetectAxis","sumX","sumX2","sumY","sumY2","sumZ","sumZ2","centerX","centerY","centerZ","varianceX","varianceY","varianceZ","Utils","defaults","Constraint","collideConnected","wakeUpBodies","equations","update","enable","eqs","enabled","disable","JacobianElement","spatial","rotational","multiplyElement","element","multiplyVectors","Equation","minForce","maxForce","eps","jacobianElementA","jacobianElementB","setSpookParams","stiffness","relaxation","timeStep","computeB","GW","computeGW","Gq","computeGq","GiMf","computeGiMf","GA","GB","xj","vj","wi","wj","computeGWlambda","ti","fj","tj","invMassi","invMassj","iMfi","iMfj","invIi_vmult_taui","invIj_vmult_tauj","computeGiMGt","invIi","invIj","tmp","addToWlambda","deltalambda","addToWlambda_temp","computeC","ContactEquation","restitution","ni","rixn","ContactEquation_computeB_temp1","rjxn","ContactEquation_computeB_temp2","penetrationVec","ContactEquation_computeB_temp3","ePlusOne","getImpactVelocityAlongNormal","ContactEquation_getImpactVelocityAlongNormal_vi","ContactEquation_getImpactVelocityAlongNormal_vj","ContactEquation_getImpactVelocityAlongNormal_xi","ContactEquation_getImpactVelocityAlongNormal_xj","relVel","ContactEquation_getImpactVelocityAlongNormal_relVel","PointToPointConstraint","pivotA","pivotB","equationX","equationY","equationZ","ConeEquation","axisA","axisB","nj","nixnj","tmpVec1$2","njxni","tmpVec2$2","RotationalEquation","maxAngle","tmpVec1$1","tmpVec2$1","ConeTwistConstraint","coneEquation","twistEquation","twistAngle","cone","twist","DistanceConstraint","eq","distanceEquation","halfDist","LockConstraint","halfWay","xA","xB","yA","yB","zA","zB","rotationalEquation1","rotationalEquation2","r3","rotationalEquation3","motorEquation","RotationalMotorEquation","targetVelocity","HingeConstraint","rotational1","rotational2","motor","enableMotor","disableMotor","setMotorSpeed","speed","setMotorMaxForce","worldAxisA","HingeConstraint_update_tmpVec1","worldAxisB","HingeConstraint_update_tmpVec2","FrictionEquation","slipForce","rixt","FrictionEquation_computeB_temp1","rjxt","FrictionEquation_computeB_temp2","ContactMaterial","friction","contactEquationStiffness","contactEquationRelaxation","frictionEquationStiffness","frictionEquationRelaxation","materials","Material","name","Spring","restLength","damping","localAnchorA","localAnchorB","worldAnchorA","setWorldAnchorA","worldAnchorB","setWorldAnchorB","getWorldAnchorA","getWorldAnchorB","applyForce_r","r_unit","applyForce_r_unit","applyForce_u","applyForce_f","applyForce_tmp","applyForce_worldAnchorA","applyForce_worldAnchorB","applyForce_ri","applyForce_rj","ri_x_f","applyForce_ri_x_f","rj_x_f","applyForce_rj_x_f","rlen","WheelInfo","chassisConnectionPointLocal","chassisConnectionPointWorld","directionLocal","directionWorld","axleLocal","axleWorld","suspensionRestLength","suspensionMaxLength","suspensionStiffness","dampingCompression","dampingRelaxation","frictionSlip","forwardAcceleration","sideAcceleration","steering","rotation","deltaRotation","rollInfluence","maxSuspensionForce","isFrontWheel","clippedInvContactDotSuspension","suspensionRelativeVelocity","suspensionForce","slipInfo","skidInfo","suspensionLength","maxSuspensionTravel","useCustomSlidingRotationalSpeed","customSlidingRotationalSpeed","sliding","engineForce","brake","sideImpulse","forwardImpulse","raycastResult","worldTransform","isInContact","updateWheel","chassis","relpos","chassis_velocity_at_contactPoint","projVel","inv","RaycastVehicle","chassisBody","wheelInfos","indexRightAxis","indexForwardAxis","indexUpAxis","constraints","preStepCallback","currentVehicleSpeedKmHour","numWheelsOnGround","addWheel","info","setSteeringValue","wheelIndex","wheel","applyEngineForce","setBrake","addToWorld","addBody","that","updateVehicle","getVehicleAxisWorld","numWheels","updateWheelTransform","forwardWorld","castRay","updateSuspension","relpos2","updateFriction","hitNormalWorldScaledWithProj","fwd","vel","m","proj","proj2","deltaTime","chassisMass","w_it","susp_length","current_length","length_diff","projected_rel_vel","susp_damping","removeFromWorld","removeBody","rayvector","castRay_rayvector","castRay_target","updateWheelTransformWorld","raylen","source","oldState","rayTest","object","groundObject","hitDistance","minSuspensionLength","maxSuspensionLength","denominator","chassis_velocity_at_contactPoint2","up","tmpVec4","right","tmpVec5","tmpVec6","steeringOrn","rotatingOrn","getWheelTransformWorld","surfNormalWS_scaled_proj","updateFriction_surfNormalWS_scaled_proj","forwardWS","updateFriction_forwardWS","axle","updateFriction_axle","axlei","wheelTrans","directions","surfNormalWS","resolveSingleBilateral","sideFrictionStiffness2","sideFactor","fwdFactor","rollingFriction","defaultRollingFrictionImpulse","maxImpulse","calcRollingFriction","factor","maximp","maximpSide","maximpSquared","impulseSquared","rel_pos","rel_pos2","sideImp","calcRollingFriction_vel1","calcRollingFriction_vel2","calcRollingFriction_vel","body0","body1","frictionPosWorld","frictionDirectionWorld","j1","contactPosWorld","vel1","vel2","vrel","denom0","computeImpulseDenominator","denom1","jacDiagABInv","computeImpulseDenominator_r0","computeImpulseDenominator_c0","computeImpulseDenominator_vec","computeImpulseDenominator_m","r0","c0","vec","resolveSingleBilateral_vel1","resolveSingleBilateral_vel2","resolveSingleBilateral_vel","pos1","body2","pos2","normalLenSqr","rel_vel","contactDamping","massTerm","Sphere","RigidVehicle","wheelBodies","coordinateSystem","wheelAxes","wheelForces","wheelBody","worldPosition","hingeConstraint","motorTargetVelocity","setWheelForce","applyWheelForce","bodyTorque","concat","addConstraint","_update","bind","removeConstraint","getWheelSpeed","worldAxis","SPHSystem","particles","density","smoothingRadius","speedOfSound","viscosity","pressures","densities","neighbors","particle","remove","getNeighbors","R2","SPHSystem_getNeighbors_dist","SPHSystem_update_dist","cs","numNeighbors","sum","weight","a_pressure","SPHSystem_update_a_pressure","a_visc","SPHSystem_update_a_visc","gradW","SPHSystem_update_gradW","r_vec","SPHSystem_update_r_vec","SPHSystem_update_u","Pij","nabla","neighbor","gradw","nablaw","rVec","resultVec","Cylinder","radiusTop","radiusBottom","height","numSegments","bottomface","topface","theta","thetaN","Particle","Plane","tempNormal","maxVal","Heightfield","maxValue","minValue","updateMinValue","updateMaxValue","cacheEnabled","_cachedPillars","setHeightValueAtIndex","clearCachedConvexTrianglePillar","getRectMinMax","clamp","floor","getTriangleAt","edgeClamp","getHeightAt_idx","lowerDist2","upperDist2","upper","getTriangle","getNormalAt","getNormalAt_a","getNormalAt_b","getNormalAt_c","getNormalAt_e0","getNormalAt_e1","_ref","getHeightAt","getHeightAt_a","getHeightAt_b","getHeightAt_c","barycentricWeights","getHeightAt_weights","getCacheConvexTrianglePillarKey","getUpperTriangle","getCachedConvexTrianglePillar","setCachedConvexTrianglePillar","convex","offsetResult","data2","setHeightsFromImage","image","canvas","document","createElement","width","context","getContext","drawImage","imageData","getImageData","unshift","cx","cy","OctreeNode","root","children","insert","elementData","level","nodeData","maxDepth","subdivided","subdivide","halfDiagonal","child","queue2","node","Array","prototype","apply","tmpAABB","removeEmptyNodes","Octree","Trimesh","Float32Array","Int16Array","updateEdges","updateNormals","updateTree","triangleAABB","i3","_getUnscaledVertex","getTrianglesInAABB","unscaledAABB","isx","isy","isz","setScale","wasUniform","isUniform","computeNormals_n","va","vb","vc","Object","split","parseInt","getEdgeVertex","edgeIndex","firstOrSecond","vertexStore","vertexIndex","getEdgeVector","vectorStore","getEdgeVector_va","getEdgeVector_vb","ab","cb","out","getWorldVertex","getTriangleVertices","cli_aabb","computeLocalAABB_worldVert","calculateWorldAABB_frame","calculateWorldAABB_aabb","tube","radialSegments","tubularSegments","arc","Solver","addEquation","removeEquation","removeAllEquations","GSSolver","iterations","tolerance","iter","maxIter","tolSquared","Neq","Nbodies","invC","deltalambdaTot","GWlambda","lambdaj","invCs","GSSolver_solve_invCs","Bs","GSSolver_solve_Bs","lambda","GSSolver_solve_lambda","invDt","SplitSolver","subsolver","nodes","nodePool","createNode","visited","SplitSolver_solve_nodes","SplitSolver_solve_eqs","dummyWorld","SplitSolver_solve_dummyWorld","getUnvisitedNode","bfs","visitFunc","Neqs","sort","sortById","Nnodes","queue","visitFunc2","bds","Pool","objects","release","Nargs","arguments","constructObject","resize","size","Vec3Pool","COLLISION_TYPES","sphereSphere","spherePlane","boxBox","sphereBox","planeBox","convexConvex","sphereConvex","planeConvex","boxConvex","sphereHeightfield","boxHeightfield","convexHeightfield","sphereParticle","planeParticle","boxParticle","convexParticle","cylinderCylinder","sphereCylinder","planeCylinder","boxCylinder","convexCylinder","heightfieldCylinder","particleCylinder","sphereTrimesh","planeTrimesh","Narrowphase","contactPointPool","frictionEquationPool","frictionResult","v3pool","currentContactMaterial","defaultContactMaterial","enableFrictionReduction","createContactEquation","sj","overrideShapeA","overrideShapeB","cm","matA","matB","createFrictionEquationsFromContact","contactEquation","outArray","shapeA","shapeB","mug","gravity","reducedMass","pool","createFrictionFromAverage","numContacts","f1","f2","averageNormal","averageContactPointA","averageContactPointB","invNumContacts","getContacts","oldcontacts","frictionPool","tmpQuat1","qj","tmpQuat2","tmpVec1","tmpVec2","bodyContactMaterial","getContactMaterial","justTest","shapeContactMaterial","resolverIndex","resolver","retval","shapeOverlapKeeper","bodyOverlapKeeper","rsi","rsj","contactEq","point_on_plane_to_sphere","plane_to_sphere_ortho","sphereBox_sides","box_to_sphere","R","side_ns","sphereBox_side_ns","side_ns1","sphereBox_side_ns1","side_ns2","sphereBox_side_ns2","side_h","side_penetrations","side_dot1","side_dot2","side_distance","nsides","ns","sphereBox_ns","ns1","sphereBox_ns1","ns2","sphereBox_ns2","h1","h2","dot1","dot2","dist2","sphere_to_corner","sphereBox_sphere_to_corner","edgeTangent","edgeCenter","orthogonal","Nsides","orthonorm","tdist","ndist","res","sepAxis","convexConvex_sepAxis","convexConvex_q","convex_to_sphere","worldCorner","sphereConvex_worldCorner","sphereConvex_sphereToCorner","nfaces","sphereConvex_worldNormal","sphereConvex_worldPoint","worldSpherePointClosestToPlane","sphereConvex_worldSpherePointClosestToPlane","sphereConvex_penetrationVec","penetration","worldPointToSphere","sphereConvex_sphereToWorldPoint","faceVerts","Nverts","worldVertex","pointInPolygon","penetrationVec2","penetrationSpherePoint","Nfaceverts","v12","v22","sphereConvex_edge","edgeUnit","sphereConvex_edgeUnit","v1_to_xi","xi_to_p","j2","planeShape","convexShape","planePosition","convexPosition","planeQuat","convexQuat","planeBody","convexBody","planeConvex_v","planeConvex_normal","planeConvex_relpos","projected","planeConvex_projected","sphereShape","hfShape","spherePos","hfPos","sphereQuat","hfQuat","sphereBody","hfBody","worldPillarOffset2","sphereHeightfield_tmp2","localSpherePos","sphereHeightfield_tmp1","minMax","numContactsBefore","intersecting","convexPos","convexHeightfield_tmp2","convexHeightfield_faceList","localConvexPos","convexHeightfield_tmp1","particleSphere_normal","particlePlane_normal","particlePlane_relpos","particlePlane_projected","penetratedFaceIndex","penetratedFaceNormal","convexParticle_penetratedFaceNormal","worldPenetrationVec","convexParticle_worldPenetrationVec","minPenetration","local","convexParticle_local","cqj","convexParticle_vertexToParticle","trimeshShape","trimeshPos","trimeshQuat","trimeshBody","edgeVertexA","sphereTrimesh_edgeVertexA","edgeVertexB","sphereTrimesh_edgeVertexB","edgeVector","sphereTrimesh_edgeVector","edgeVectorUnit","sphereTrimesh_edgeVectorUnit","sphereTrimesh_localSpherePos","sphereTrimesh_tmp","localSphereAABB","sphereTrimesh_localSphereAABB","sphereTrimesh_v2","sphereTrimesh_relpos","sphereTrimesh_triangles","sphereRadius","sphereTrimesh_v","radiusSquared","positionAlongEdgeB","positionAlongEdgeA","sphereTrimesh_va","sphereTrimesh_vb","sphereTrimesh_vc","sphereTrimesh_normal","planePos","planeTrimesh_normal","planeTrimesh_relpos","planeTrimesh_projected","pointInPolygon_edge","pointInPolygon_edge_x_normal","pointInPolygon_vtp","edge_x_normal","vertex_to_p","OverlapKeeper","current","previous","getKey","tick","getDiff","additions2","removals2","al","bl","keyA","unpackAndPush","keyB","array","TupleDictionary","delete","World","contacts","frictionEquations","quatNormalizeSkip","stepnumber","default_dt","nextId","hasActiveBodies","solver","narrowphase","collisionMatrix","collisionMatrixPrevious","contactmaterials","contactMaterialTable","defaultMaterial","doProfiling","profile","makeContactConstraints","accumulator","subsystems","addBodyEvent","removeBodyEvent","idToBodyMap","collisionMatrixTick","raycastClosest","raycastAll","tmpRay","raycastAny","getBodyById","getShapeById","addContactMaterial","cmat","removeContactMaterial","fixedStep","maxSubSteps","performance","now","lastCallTime","timeSinceLastCalled","step","internalStep","t0","substeps","World_step_p1","World_step_p2","profilingStart","World_step_frictionEquationPool","gx","gy","gz","i2","Nsubsystems","Nconstraints","World_step_oldContacts","NoldContacts","NoldFrictionEquations","ncontacts","speedSquaredB","speedLimitSquaredB","speedSquaredA","speedLimitSquaredA","World_step_collideEvent","contact","emitContactEvents","ld","av","ad","World_step_preStepEvent","clearForces","World_step_postStepEvent","hasBeginContact","hasEndContact","additions","removals","beginContactEvent","endContactEvent","hasBeginShapeContact","hasEndShapeContact","beginShapeContactEvent","endShapeContactEvent","globalThis","nowOffset","Date","timing","navigationStart"],"sourceRoot":""}