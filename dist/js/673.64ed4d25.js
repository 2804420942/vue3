"use strict";(self["webpackChunkvue3"]=self["webpackChunkvue3"]||[]).push([[673],{4673:function(e,t,r){r.r(t),r.d(t,{default:function(){return b}});r(8675),r(3462),r(1703);var i=r(9260),s="varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",n={VERY_SMALL:0,SMALL:1,MEDIUM:2,LARGE:3,VERY_LARGE:4,HUGE:5},a="#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\nvarying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;\n#include <encodings_fragment>\n}",h="uniform vec4 texelSize;uniform float kernel;uniform vec2 scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize.xy*vec2(kernel)+texelSize.zw)*scale.x*scale.y;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}",l=[new Float32Array([0,0]),new Float32Array([0,1,1]),new Float32Array([0,1,1,2]),new Float32Array([0,1,2,2,3]),new Float32Array([0,1,2,3,4,4,5]),new Float32Array([0,1,2,3,4,5,7,8,9,10])],o=class extends i.be{constructor(e=new i.f){super({name:"KawaseBlurMaterial",uniforms:{inputBuffer:new i.bf(null),texelSize:new i.bf(new i.f),scale:new i.bf(new i.a4(1,1)),kernel:new i.bf(0)},blending:i.bg,depthWrite:!1,depthTest:!1,fragmentShader:a,vertexShader:h}),this.toneMapped=!1,this.setTexelSize(e.x,e.y),this.kernelSize=n.MEDIUM}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.inputBuffer=e}get kernelSequence(){return l[this.kernelSize]}set resolutionScale(e){this.uniforms.scale.value.x=e}get scale(){return this.uniforms.scale.value.y}set scale(e){this.uniforms.scale.value.y=e}getScale(){return this.uniforms.scale.value}setScale(e){this.uniforms.scale.value=e}getKernel(){return null}get kernel(){return this.uniforms.kernel.value}set kernel(e){this.uniforms.kernel.value=e}setKernel(e){this.kernel=e}setTexelSize(e,t){this.uniforms.texelSize.value.set(e,t,.5*e,.5*t)}setSize(e,t){const r=1/e,i=1/t;this.uniforms.texelSize.value.set(r,i,.5*r,.5*i)}},u="#include <common>\n#include <dithering_pars_fragment>\n#ifdef FRAMEBUFFER_PRECISION_HIGH\nuniform mediump sampler2D inputBuffer;\n#else\nuniform lowp sampler2D inputBuffer;\n#endif\nuniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;\n#include <encodings_fragment>\n#include <dithering_fragment>\n}",d=class extends i.be{constructor(){super({name:"CopyMaterial",uniforms:{inputBuffer:new i.bf(null),opacity:new i.bf(1)},blending:i.bg,depthWrite:!1,depthTest:!1,fragmentShader:u,vertexShader:s}),this.toneMapped=!1}set inputBuffer(e){this.uniforms.inputBuffer.value=e}setInputBuffer(e){this.uniforms.inputBuffer.value=e}getOpacity(e){return this.uniforms.opacity.value}setOpacity(e){this.uniforms.opacity.value=e}},c=new i.bb,f=null;function p(){if(null===f){const e=new Float32Array([-1,-1,0,3,-1,0,-1,3,0]),t=new Float32Array([0,0,2,0,0,2]);f=new i.b,void 0!==f.setAttribute?(f.setAttribute("position",new i.ak(e,3)),f.setAttribute("uv",new i.ak(t,2))):(f.addAttribute("position",new i.ak(e,3)),f.addAttribute("uv",new i.ak(t,2)))}return f}var m=class{constructor(e="Pass",t=new i.bh,r=c){this.name=e,this.renderer=null,this.scene=t,this.camera=r,this.screen=null,this.rtt=!0,this.needsSwap=!0,this.needsDepthTexture=!1,this.enabled=!0}get renderToScreen(){return!this.rtt}set renderToScreen(e){if(this.rtt===e){const t=this.getFullscreenMaterial();null!==t&&(t.needsUpdate=!0),this.rtt=!e}}setRenderer(e){this.renderer=e}isEnabled(){return this.enabled}setEnabled(e){this.enabled=e}get fullscreenMaterial(){return null!==this.screen?this.screen.material:null}set fullscreenMaterial(e){let t=this.screen;null!==t?t.material=e:(t=new i.c(p(),e),t.frustumCulled=!1,null===this.scene&&(this.scene=new i.bh),this.scene.add(t),this.screen=t)}getFullscreenMaterial(){return this.fullscreenMaterial}setFullscreenMaterial(e){this.fullscreenMaterial=e}getDepthTexture(){return null}setDepthTexture(e,t=i.bi){}render(e,t,r,i,s){throw new Error("Render method not implemented!")}setSize(e,t){}initialize(e,t,r){}dispose(){for(const e of Object.keys(this)){const t=this[e];if(null!==t&&"function"===typeof t.dispose){if(t instanceof i.bh||t===this.renderer)continue;this[e].dispose()}}}};new i.q;var g=-1,v=class extends i.bj{constructor(e,t=g,r=g,s=1){super(),this.resizable=e,this.base=new i.a4(1,1),this.preferred=new i.a4(t,r),this.target=this.preferred,this.s=s}get width(){const{base:e,preferred:t,scale:r}=this;let i;return i=t.width!==g?t.width:t.height!==g?Math.round(t.height*(e.width/Math.max(e.height,1))):Math.round(e.width*r),i}set width(e){this.preferredWidth=e}get height(){const{base:e,preferred:t,scale:r}=this;let i;return i=t.height!==g?t.height:t.width!==g?Math.round(t.width/Math.max(e.width/Math.max(e.height,1),1)):Math.round(e.height*r),i}set height(e){this.preferredHeight=e}getWidth(){return this.width}getHeight(){return this.height}get scale(){return this.s}set scale(e){this.s!==e&&(this.s=e,this.preferred.setScalar(g),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}getScale(){return this.scale}setScale(e){this.scale=e}get baseWidth(){return this.base.width}set baseWidth(e){this.base.width!==e&&(this.base.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}getBaseWidth(){return this.base.width}setBaseWidth(e){this.base.width!==e&&(this.base.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}get baseHeight(){return this.base.height}set baseHeight(e){this.base.height!==e&&(this.base.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}getBaseHeight(){return this.baseHeight}setBaseHeight(e){this.baseHeight=e}setBaseSize(e,t){this.base.width===e&&this.base.height===t||(this.base.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}get preferredWidth(){return this.preferred.width}set preferredWidth(e){this.preferred.width!==e&&(this.preferred.width=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}getPreferredWidth(){return this.preferredWidth}setPreferredWidth(e){this.preferredWidth=e}get preferredHeight(){return this.preferred.height}set preferredHeight(e){this.preferred.height!==e&&(this.preferred.height=e,this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}getPreferredHeight(){return this.preferredHeight}setPreferredHeight(e){this.preferredHeight=e}setPreferredSize(e,t){this.preferred.width===e&&this.preferred.height===t||(this.preferred.set(e,t),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height))}copy(e){this.base.set(e.getBaseWidth(),e.getBaseHeight()),this.preferred.set(e.getPreferredWidth(),e.getPreferredHeight()),this.dispatchEvent({type:"change"}),this.resizable.setSize(this.base.width,this.base.height)}static get AUTO_SIZE(){return g}},x=class extends m{constructor({kernelSize:e=n.MEDIUM,resolutionScale:t=.5,width:r=v.AUTO_SIZE,height:s=v.AUTO_SIZE,resolutionX:a=r,resolutionY:h=s}={}){super("KawaseBlurPass"),this.renderTargetA=new i.bc(1,1,{minFilter:i.a9,magFilter:i.a9,stencilBuffer:!1,depthBuffer:!1}),this.renderTargetA.texture.name="Blur.Target.A",this.renderTargetB=this.renderTargetA.clone(),this.renderTargetB.texture.name="Blur.Target.B";const l=this.resolution=new v(this,a,h,t);l.addEventListener("change",(e=>this.setSize(l.baseWidth,l.baseHeight))),this.blurMaterial=new o,this.copyMaterial=new d}getResolution(){return this.resolution}get dithering(){return this.copyMaterial.dithering}set dithering(e){this.copyMaterial.dithering=e}get kernelSize(){return this.blurMaterial.kernelSize}set kernelSize(e){this.blurMaterial.kernelSize=e}get width(){return this.resolution.width}set width(e){this.resolution.preferredWidth=e}get height(){return this.resolution.height}set height(e){this.resolution.preferredHeight=e}get scale(){return this.blurMaterial.scale}set scale(e){this.blurMaterial.scale=e}getScale(){return this.blurMaterial.scale}setScale(e){this.blurMaterial.scale=e}getKernelSize(){return this.kernelSize}setKernelSize(e){this.kernelSize=e}getResolutionScale(){return this.resolution.scale}setResolutionScale(e){this.resolution.scale=e}render(e,t,r,i,s){const n=this.scene,a=this.camera,h=this.renderTargetA,l=this.renderTargetB,o=this.blurMaterial,u=o.kernelSequence;let d=t;this.fullscreenMaterial=o;for(let c=0,f=u.length;c<f;++c){const t=0===(1&c)?h:l;o.kernel=u[c],o.inputBuffer=d.texture,e.setRenderTarget(t),e.render(n,a),d=t}this.fullscreenMaterial=this.copyMaterial,this.copyMaterial.inputBuffer=d.texture,e.setRenderTarget(this.renderToScreen?null:r),e.render(n,a)}setSize(e,t){const r=this.resolution;r.setBaseSize(e,t);const i=r.width,s=r.height;this.renderTargetA.setSize(i,s),this.renderTargetB.setSize(i,s),this.blurMaterial.setSize(i,s),this.blurMaterial.resolutionScale=r.scale}initialize(e,t,r){void 0!==r&&(this.renderTargetA.texture.type=r,this.renderTargetB.texture.type=r,r!==i.bd?this.blurMaterial.defines.FRAMEBUFFER_PRECISION_HIGH="1":e.outputEncoding===i.s&&(this.renderTargetA.texture.encoding=i.s,this.renderTargetB.texture.encoding=i.s))}static get AUTO_SIZE(){return v.AUTO_SIZE}};new i.V,new i.M,new i.q,new i.V,new i.V;class b extends i.a5{constructor(e,t,r,s,{mixBlur:n=0,mixStrength:a=1,resolution:h=256,blur:l=[0,0],minDepthThreshold:o=.9,maxDepthThreshold:u=1,depthScale:d=0,depthToBlurRatioBias:c=.25,mirror:f=0,distortion:p=1,mixContrast:m=1,distortionMap:g,reflectorOffset:v=0,bufferSamples:x=8,planeNormal:b=new i.V(0,0,1)}={}){super(),this.gl=e,this.camera=t,this.scene=r,this.parent=s,this.hasBlur=l[0]+l[1]>0,this.reflectorPlane=new i.aT,this.normal=new i.V,this.reflectorWorldPosition=new i.V,this.cameraWorldPosition=new i.V,this.rotationMatrix=new i.M,this.lookAtPosition=new i.V(0,-1,0),this.clipPlane=new i.f,this.view=new i.V,this.target=new i.V,this.q=new i.f,this.textureMatrix=new i.M,this.virtualCamera=new i.w,this.reflectorOffset=v,this.planeNormal=b,this.setupBuffers(h,l,x),this.reflectorProps={mirror:f,textureMatrix:this.textureMatrix,mixBlur:n,tDiffuse:this.fbo1.texture,tDepth:this.fbo1.depthTexture,tDiffuseBlur:this.fbo2.texture,hasBlur:this.hasBlur,mixStrength:a,minDepthThreshold:o,maxDepthThreshold:u,depthScale:d,depthToBlurRatioBias:c,distortion:p,distortionMap:g,mixContrast:m,"defines-USE_BLUR":this.hasBlur?"":void 0,"defines-USE_DEPTH":d>0?"":void 0,"defines-USE_DISTORTION":g?"":void 0}}setupBuffers(e,t,r){const s={minFilter:i.a9,magFilter:i.a9,encoding:this.gl.outputEncoding},n=new i.bc(e,e,s);n.depthBuffer=!0,n.depthTexture=new i.bk(e,e),n.depthTexture.format=i.bl,n.depthTexture.type=i.bm;const a=new i.bc(e,e,s);this.gl.capabilities.isWebGL2&&(n.samples=r),this.fbo1=n,this.fbo2=a,this.kawaseBlurPass=new x,this.kawaseBlurPass.setSize(t[0],t[1])}beforeRender(){if(!this.parent)return;if(this.reflectorWorldPosition.setFromMatrixPosition(this.parent.matrixWorld),this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld),this.rotationMatrix.extractRotation(this.parent.matrixWorld),this.normal.copy(this.planeNormal),this.normal.applyMatrix4(this.rotationMatrix),this.reflectorWorldPosition.addScaledVector(this.normal,this.reflectorOffset),this.view.subVectors(this.reflectorWorldPosition,this.cameraWorldPosition),this.view.dot(this.normal)>0)return;this.view.reflect(this.normal).negate(),this.view.add(this.reflectorWorldPosition),this.rotationMatrix.extractRotation(this.camera.matrixWorld),this.lookAtPosition.set(0,0,-1),this.lookAtPosition.applyMatrix4(this.rotationMatrix),this.lookAtPosition.add(this.cameraWorldPosition),this.target.subVectors(this.reflectorWorldPosition,this.lookAtPosition),this.target.reflect(this.normal).negate(),this.target.add(this.reflectorWorldPosition),this.virtualCamera.position.copy(this.view),this.virtualCamera.up.set(0,1,0),this.virtualCamera.up.applyMatrix4(this.rotationMatrix),this.virtualCamera.up.reflect(this.normal),this.virtualCamera.lookAt(this.target),this.virtualCamera.far=this.camera.far,this.virtualCamera.updateMatrixWorld(),this.virtualCamera.projectionMatrix.copy(this.camera.projectionMatrix),this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.virtualCamera.projectionMatrix),this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse),this.textureMatrix.multiply(this.parent.matrixWorld),this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal,this.reflectorWorldPosition),this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse),this.clipPlane.set(this.reflectorPlane.normal.x,this.reflectorPlane.normal.y,this.reflectorPlane.normal.z,this.reflectorPlane.constant);const e=this.virtualCamera.projectionMatrix;this.q.x=(Math.sign(this.clipPlane.x)+e.elements[8])/e.elements[0],this.q.y=(Math.sign(this.clipPlane.y)+e.elements[9])/e.elements[5],this.q.z=-1,this.q.w=(1+e.elements[10])/e.elements[14],this.clipPlane.multiplyScalar(2/this.clipPlane.dot(this.q)),e.elements[2]=this.clipPlane.x,e.elements[6]=this.clipPlane.y,e.elements[10]=this.clipPlane.z+1,e.elements[14]=this.clipPlane.w}update(){if(this.parent.material!==this)return;this.parent.visible=!1;const e=this.gl.xr.enabled,t=this.gl.shadowMap.autoUpdate;this.beforeRender(),this.gl.xr.enabled=!1,this.gl.shadowMap.autoUpdate=!1,this.gl.setRenderTarget(this.fbo1),this.gl.state.buffers.depth.setMask(!0),this.gl.autoClear||this.gl.clear(),this.gl.render(this.scene,this.virtualCamera),this.hasBlur&&this.kawaseBlurPass.render(this.gl,this.fbo1,this.fbo2),this.gl.xr.enabled=e,this.gl.shadowMap.autoUpdate=t,this.parent.visible=!0,this.gl.setRenderTarget(null)}onBeforeCompile(e,...t){super.onBeforeCompile(e,...t),void 0===this.defines&&(this.defines={}),this.defines.USE_UV||(this.defines.USE_UV=""),void 0!==this.reflectorProps["defines-USE_BLUR"]&&(this.defines.USE_BLUR=""),void 0!==this.reflectorProps["defines-USE_DEPTH"]&&(this.defines.USE_DEPTH=""),void 0!==this.reflectorProps["defines-USE_DISTORTION"]&&(this.defines.USE_DISTORTION="");let r=this.reflectorProps;for(let i in r)e.uniforms[i]={get value(){return r[i]}};e.vertexShader=`\n              uniform mat4 textureMatrix;\n              varying vec4 my_vUv;     \n            ${e.vertexShader}`,e.vertexShader=e.vertexShader.replace("#include <project_vertex>","\n            #include <project_vertex>\n            my_vUv = textureMatrix * vec4( position, 1.0 );\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            "),e.fragmentShader=`\n              uniform sampler2D tDiffuse;\n              uniform sampler2D tDiffuseBlur;\n              uniform sampler2D tDepth;\n              uniform sampler2D distortionMap;\n              uniform float distortion;\n              uniform float cameraNear;\n              uniform float cameraFar;\n              uniform bool hasBlur;\n              uniform float mixBlur;\n              uniform float mirror;\n              uniform float mixStrength;\n              uniform float minDepthThreshold;\n              uniform float maxDepthThreshold;\n              uniform float mixContrast;\n              uniform float depthScale;\n              uniform float depthToBlurRatioBias;\n              varying vec4 my_vUv;        \n              ${e.fragmentShader}`,e.fragmentShader=e.fragmentShader.replace("#include <emissivemap_fragment>","\n            #include <emissivemap_fragment>\n          \n            float distortionFactor = 0.0;\n            #ifdef USE_DISTORTION\n              distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n            #endif\n      \n            vec4 new_vUv = my_vUv;\n            new_vUv.x += distortionFactor;\n            new_vUv.y += distortionFactor;\n      \n            vec4 base = texture2DProj(tDiffuse, new_vUv);\n            vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n            \n            vec4 merge = base;\n            \n            #ifdef USE_NORMALMAP\n              vec2 normal_uv = vec2(0.0);\n              vec4 normalColor = texture2D(normalMap, vUv);\n              vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n              vec3 coord = new_vUv.xyz / new_vUv.w;\n              normal_uv = coord.xy + coord.z * my_normal.xz * 0.05 * normalScale;\n              vec4 base_normal = texture2D(tDiffuse, normal_uv);\n              vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n              merge = base_normal;\n              blur = blur_normal;\n            #endif\n      \n            float depthFactor = 0.0001;\n            float blurFactor = 0.0;\n      \n            #ifdef USE_DEPTH\n              vec4 depth = texture2DProj(tDepth, new_vUv);\n              depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n              depthFactor *= depthScale;\n              depthFactor = max(0.0001, min(1.0, depthFactor));\n      \n              #ifdef USE_BLUR\n                blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n                merge = merge * min(1.0, depthFactor + 0.5);\n              #else\n                merge = merge * depthFactor;\n              #endif\n        \n            #endif\n      \n            float reflectorRoughnessFactor = roughness;\n            #ifdef USE_ROUGHNESSMAP\n              vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n              \n              reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n            #endif\n            \n            #ifdef USE_BLUR\n              blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n              merge = mix(merge, blur, blurFactor);\n            #endif\n      \n            vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n            newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n            newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n            newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n            \n            diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n            ")}}}}]);
//# sourceMappingURL=673.64ed4d25.js.map