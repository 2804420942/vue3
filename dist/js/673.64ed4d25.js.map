{"version":3,"file":"js/673.64ed4d25.js","mappings":"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","sources":["webpack://vue3/./node_modules/lingo3d-vue/dist/MeshReflectorMaterial.js"],"sourcesContent":["import { bb as Camera, q as Color, bc as WebGLRenderTarget, a9 as LinearFilter, bd as UnsignedByteType, s as sRGBEncoding, V as Vector3, M as Matrix4, be as ShaderMaterial, bf as Uniform, f as Vector4, a4 as Vector2, bg as NoBlending, bh as Scene, c as Mesh, bi as BasicDepthPacking, bj as EventDispatcher, b as BufferGeometry, ak as BufferAttribute, a5 as MeshStandardMaterial, aT as Plane, w as PerspectiveCamera, bk as DepthTexture, bl as DepthFormat, bm as UnsignedShortType } from \"./index.js\";\nimport \"vue\";\n/**\n * postprocessing v6.27.0 build Fri May 27 2022\n * https://github.com/pmndrs/postprocessing\n * Copyright 2015-2022 Raoul van Rüschen\n * @license Zlib\n */\nvar common_default = \"varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}\";\nvar KernelSize = {\n  VERY_SMALL: 0,\n  SMALL: 1,\n  MEDIUM: 2,\n  LARGE: 3,\n  VERY_LARGE: 4,\n  HUGE: 5\n};\nvar convolution_kawase_default = \"#ifdef FRAMEBUFFER_PRECISION_HIGH\\nuniform mediump sampler2D inputBuffer;\\n#else\\nuniform lowp sampler2D inputBuffer;\\n#endif\\nvarying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec4 sum=texture2D(inputBuffer,vUv0);sum+=texture2D(inputBuffer,vUv1);sum+=texture2D(inputBuffer,vUv2);sum+=texture2D(inputBuffer,vUv3);gl_FragColor=sum*0.25;\\n#include <encodings_fragment>\\n}\";\nvar convolution_kawase_default2 = \"uniform vec4 texelSize;uniform float kernel;uniform vec2 scale;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vec2 dUv=(texelSize.xy*vec2(kernel)+texelSize.zw)*scale.x*scale.y;vUv0=vec2(uv.x-dUv.x,uv.y+dUv.y);vUv1=vec2(uv.x+dUv.x,uv.y+dUv.y);vUv2=vec2(uv.x+dUv.x,uv.y-dUv.y);vUv3=vec2(uv.x-dUv.x,uv.y-dUv.y);gl_Position=vec4(position.xy,1.0,1.0);}\";\nvar kernelPresets = [\n  new Float32Array([0, 0]),\n  new Float32Array([0, 1, 1]),\n  new Float32Array([0, 1, 1, 2]),\n  new Float32Array([0, 1, 2, 2, 3]),\n  new Float32Array([0, 1, 2, 3, 4, 4, 5]),\n  new Float32Array([0, 1, 2, 3, 4, 5, 7, 8, 9, 10])\n];\nvar KawaseBlurMaterial = class extends ShaderMaterial {\n  constructor(texelSize = new Vector4()) {\n    super({\n      name: \"KawaseBlurMaterial\",\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        texelSize: new Uniform(new Vector4()),\n        scale: new Uniform(new Vector2(1, 1)),\n        kernel: new Uniform(0)\n      },\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false,\n      fragmentShader: convolution_kawase_default,\n      vertexShader: convolution_kawase_default2\n    });\n    this.toneMapped = false;\n    this.setTexelSize(texelSize.x, texelSize.y);\n    this.kernelSize = KernelSize.MEDIUM;\n  }\n  set inputBuffer(value) {\n    this.uniforms.inputBuffer.value = value;\n  }\n  setInputBuffer(value) {\n    this.inputBuffer = value;\n  }\n  get kernelSequence() {\n    return kernelPresets[this.kernelSize];\n  }\n  set resolutionScale(value) {\n    this.uniforms.scale.value.x = value;\n  }\n  get scale() {\n    return this.uniforms.scale.value.y;\n  }\n  set scale(value) {\n    this.uniforms.scale.value.y = value;\n  }\n  getScale() {\n    return this.uniforms.scale.value;\n  }\n  setScale(value) {\n    this.uniforms.scale.value = value;\n  }\n  getKernel() {\n    return null;\n  }\n  get kernel() {\n    return this.uniforms.kernel.value;\n  }\n  set kernel(value) {\n    this.uniforms.kernel.value = value;\n  }\n  setKernel(value) {\n    this.kernel = value;\n  }\n  setTexelSize(x, y) {\n    this.uniforms.texelSize.value.set(x, y, x * 0.5, y * 0.5);\n  }\n  setSize(width, height) {\n    const x = 1 / width, y = 1 / height;\n    this.uniforms.texelSize.value.set(x, y, x * 0.5, y * 0.5);\n  }\n};\nvar copy_default = \"#include <common>\\n#include <dithering_pars_fragment>\\n#ifdef FRAMEBUFFER_PRECISION_HIGH\\nuniform mediump sampler2D inputBuffer;\\n#else\\nuniform lowp sampler2D inputBuffer;\\n#endif\\nuniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;\\n#include <encodings_fragment>\\n#include <dithering_fragment>\\n}\";\nvar CopyMaterial = class extends ShaderMaterial {\n  constructor() {\n    super({\n      name: \"CopyMaterial\",\n      uniforms: {\n        inputBuffer: new Uniform(null),\n        opacity: new Uniform(1)\n      },\n      blending: NoBlending,\n      depthWrite: false,\n      depthTest: false,\n      fragmentShader: copy_default,\n      vertexShader: common_default\n    });\n    this.toneMapped = false;\n  }\n  set inputBuffer(value) {\n    this.uniforms.inputBuffer.value = value;\n  }\n  setInputBuffer(value) {\n    this.uniforms.inputBuffer.value = value;\n  }\n  getOpacity(value) {\n    return this.uniforms.opacity.value;\n  }\n  setOpacity(value) {\n    this.uniforms.opacity.value = value;\n  }\n};\nvar dummyCamera = new Camera();\nvar geometry = null;\nfunction getFullscreenTriangle() {\n  if (geometry === null) {\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    geometry = new BufferGeometry();\n    if (geometry.setAttribute !== void 0) {\n      geometry.setAttribute(\"position\", new BufferAttribute(vertices, 3));\n      geometry.setAttribute(\"uv\", new BufferAttribute(uvs, 2));\n    } else {\n      geometry.addAttribute(\"position\", new BufferAttribute(vertices, 3));\n      geometry.addAttribute(\"uv\", new BufferAttribute(uvs, 2));\n    }\n  }\n  return geometry;\n}\nvar Pass = class {\n  constructor(name = \"Pass\", scene = new Scene(), camera = dummyCamera) {\n    this.name = name;\n    this.renderer = null;\n    this.scene = scene;\n    this.camera = camera;\n    this.screen = null;\n    this.rtt = true;\n    this.needsSwap = true;\n    this.needsDepthTexture = false;\n    this.enabled = true;\n  }\n  get renderToScreen() {\n    return !this.rtt;\n  }\n  set renderToScreen(value) {\n    if (this.rtt === value) {\n      const material = this.getFullscreenMaterial();\n      if (material !== null) {\n        material.needsUpdate = true;\n      }\n      this.rtt = !value;\n    }\n  }\n  setRenderer(renderer) {\n    this.renderer = renderer;\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  setEnabled(value) {\n    this.enabled = value;\n  }\n  get fullscreenMaterial() {\n    return this.screen !== null ? this.screen.material : null;\n  }\n  set fullscreenMaterial(value) {\n    let screen = this.screen;\n    if (screen !== null) {\n      screen.material = value;\n    } else {\n      screen = new Mesh(getFullscreenTriangle(), value);\n      screen.frustumCulled = false;\n      if (this.scene === null) {\n        this.scene = new Scene();\n      }\n      this.scene.add(screen);\n      this.screen = screen;\n    }\n  }\n  getFullscreenMaterial() {\n    return this.fullscreenMaterial;\n  }\n  setFullscreenMaterial(value) {\n    this.fullscreenMaterial = value;\n  }\n  getDepthTexture() {\n    return null;\n  }\n  setDepthTexture(depthTexture, depthPacking = BasicDepthPacking) {\n  }\n  render(renderer, inputBuffer, outputBuffer, deltaTime, stencilTest) {\n    throw new Error(\"Render method not implemented!\");\n  }\n  setSize(width, height) {\n  }\n  initialize(renderer, alpha, frameBufferType) {\n  }\n  dispose() {\n    for (const key of Object.keys(this)) {\n      const property = this[key];\n      if (property !== null && typeof property.dispose === \"function\") {\n        if (property instanceof Scene || property === this.renderer) {\n          continue;\n        }\n        this[key].dispose();\n      }\n    }\n  }\n};\nnew Color();\nvar AUTO_SIZE = -1;\nvar Resolution = class extends EventDispatcher {\n  constructor(resizable, width = AUTO_SIZE, height = AUTO_SIZE, scale = 1) {\n    super();\n    this.resizable = resizable;\n    this.base = new Vector2(1, 1);\n    this.preferred = new Vector2(width, height);\n    this.target = this.preferred;\n    this.s = scale;\n  }\n  get width() {\n    const { base, preferred, scale } = this;\n    let result;\n    if (preferred.width !== AUTO_SIZE) {\n      result = preferred.width;\n    } else if (preferred.height !== AUTO_SIZE) {\n      result = Math.round(preferred.height * (base.width / Math.max(base.height, 1)));\n    } else {\n      result = Math.round(base.width * scale);\n    }\n    return result;\n  }\n  set width(value) {\n    this.preferredWidth = value;\n  }\n  get height() {\n    const { base, preferred, scale } = this;\n    let result;\n    if (preferred.height !== AUTO_SIZE) {\n      result = preferred.height;\n    } else if (preferred.width !== AUTO_SIZE) {\n      result = Math.round(preferred.width / Math.max(base.width / Math.max(base.height, 1), 1));\n    } else {\n      result = Math.round(base.height * scale);\n    }\n    return result;\n  }\n  set height(value) {\n    this.preferredHeight = value;\n  }\n  getWidth() {\n    return this.width;\n  }\n  getHeight() {\n    return this.height;\n  }\n  get scale() {\n    return this.s;\n  }\n  set scale(value) {\n    if (this.s !== value) {\n      this.s = value;\n      this.preferred.setScalar(AUTO_SIZE);\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  getScale() {\n    return this.scale;\n  }\n  setScale(value) {\n    this.scale = value;\n  }\n  get baseWidth() {\n    return this.base.width;\n  }\n  set baseWidth(value) {\n    if (this.base.width !== value) {\n      this.base.width = value;\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  getBaseWidth() {\n    return this.base.width;\n  }\n  setBaseWidth(value) {\n    if (this.base.width !== value) {\n      this.base.width = value;\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  get baseHeight() {\n    return this.base.height;\n  }\n  set baseHeight(value) {\n    if (this.base.height !== value) {\n      this.base.height = value;\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  getBaseHeight() {\n    return this.baseHeight;\n  }\n  setBaseHeight(value) {\n    this.baseHeight = value;\n  }\n  setBaseSize(width, height) {\n    if (this.base.width !== width || this.base.height !== height) {\n      this.base.set(width, height);\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  get preferredWidth() {\n    return this.preferred.width;\n  }\n  set preferredWidth(value) {\n    if (this.preferred.width !== value) {\n      this.preferred.width = value;\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  getPreferredWidth() {\n    return this.preferredWidth;\n  }\n  setPreferredWidth(value) {\n    this.preferredWidth = value;\n  }\n  get preferredHeight() {\n    return this.preferred.height;\n  }\n  set preferredHeight(value) {\n    if (this.preferred.height !== value) {\n      this.preferred.height = value;\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  getPreferredHeight() {\n    return this.preferredHeight;\n  }\n  setPreferredHeight(value) {\n    this.preferredHeight = value;\n  }\n  setPreferredSize(width, height) {\n    if (this.preferred.width !== width || this.preferred.height !== height) {\n      this.preferred.set(width, height);\n      this.dispatchEvent({ type: \"change\" });\n      this.resizable.setSize(this.base.width, this.base.height);\n    }\n  }\n  copy(resolution) {\n    this.base.set(resolution.getBaseWidth(), resolution.getBaseHeight());\n    this.preferred.set(resolution.getPreferredWidth(), resolution.getPreferredHeight());\n    this.dispatchEvent({ type: \"change\" });\n    this.resizable.setSize(this.base.width, this.base.height);\n  }\n  static get AUTO_SIZE() {\n    return AUTO_SIZE;\n  }\n};\nvar KawaseBlurPass = class extends Pass {\n  constructor({\n    kernelSize = KernelSize.MEDIUM,\n    resolutionScale = 0.5,\n    width = Resolution.AUTO_SIZE,\n    height = Resolution.AUTO_SIZE,\n    resolutionX = width,\n    resolutionY = height\n  } = {}) {\n    super(\"KawaseBlurPass\");\n    this.renderTargetA = new WebGLRenderTarget(1, 1, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false\n    });\n    this.renderTargetA.texture.name = \"Blur.Target.A\";\n    this.renderTargetB = this.renderTargetA.clone();\n    this.renderTargetB.texture.name = \"Blur.Target.B\";\n    const resolution = this.resolution = new Resolution(this, resolutionX, resolutionY, resolutionScale);\n    resolution.addEventListener(\"change\", (e) => this.setSize(resolution.baseWidth, resolution.baseHeight));\n    this.blurMaterial = new KawaseBlurMaterial();\n    this.copyMaterial = new CopyMaterial();\n  }\n  getResolution() {\n    return this.resolution;\n  }\n  get dithering() {\n    return this.copyMaterial.dithering;\n  }\n  set dithering(value) {\n    this.copyMaterial.dithering = value;\n  }\n  get kernelSize() {\n    return this.blurMaterial.kernelSize;\n  }\n  set kernelSize(value) {\n    this.blurMaterial.kernelSize = value;\n  }\n  get width() {\n    return this.resolution.width;\n  }\n  set width(value) {\n    this.resolution.preferredWidth = value;\n  }\n  get height() {\n    return this.resolution.height;\n  }\n  set height(value) {\n    this.resolution.preferredHeight = value;\n  }\n  get scale() {\n    return this.blurMaterial.scale;\n  }\n  set scale(value) {\n    this.blurMaterial.scale = value;\n  }\n  getScale() {\n    return this.blurMaterial.scale;\n  }\n  setScale(value) {\n    this.blurMaterial.scale = value;\n  }\n  getKernelSize() {\n    return this.kernelSize;\n  }\n  setKernelSize(value) {\n    this.kernelSize = value;\n  }\n  getResolutionScale() {\n    return this.resolution.scale;\n  }\n  setResolutionScale(scale) {\n    this.resolution.scale = scale;\n  }\n  render(renderer, inputBuffer, outputBuffer, deltaTime, stencilTest) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    const material = this.blurMaterial;\n    const kernelSequence = material.kernelSequence;\n    let previousBuffer = inputBuffer;\n    this.fullscreenMaterial = material;\n    for (let i = 0, l = kernelSequence.length; i < l; ++i) {\n      const buffer = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      material.kernel = kernelSequence[i];\n      material.inputBuffer = previousBuffer.texture;\n      renderer.setRenderTarget(buffer);\n      renderer.render(scene, camera);\n      previousBuffer = buffer;\n    }\n    this.fullscreenMaterial = this.copyMaterial;\n    this.copyMaterial.inputBuffer = previousBuffer.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n  setSize(width, height) {\n    const resolution = this.resolution;\n    resolution.setBaseSize(width, height);\n    const w = resolution.width, h = resolution.height;\n    this.renderTargetA.setSize(w, h);\n    this.renderTargetB.setSize(w, h);\n    this.blurMaterial.setSize(w, h);\n    this.blurMaterial.resolutionScale = resolution.scale;\n  }\n  initialize(renderer, alpha, frameBufferType) {\n    if (frameBufferType !== void 0) {\n      this.renderTargetA.texture.type = frameBufferType;\n      this.renderTargetB.texture.type = frameBufferType;\n      if (frameBufferType !== UnsignedByteType) {\n        this.blurMaterial.defines.FRAMEBUFFER_PRECISION_HIGH = \"1\";\n      } else if (renderer.outputEncoding === sRGBEncoding) {\n        this.renderTargetA.texture.encoding = sRGBEncoding;\n        this.renderTargetB.texture.encoding = sRGBEncoding;\n      }\n    }\n  }\n  static get AUTO_SIZE() {\n    return Resolution.AUTO_SIZE;\n  }\n};\nnew Vector3();\nnew Matrix4();\nnew Color();\nnew Vector3();\nnew Vector3();\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(renderer, camera, scene, object, { mixBlur = 0, mixStrength = 1, resolution = 256, blur = [0, 0], minDepthThreshold = 0.9, maxDepthThreshold = 1, depthScale = 0, depthToBlurRatioBias = 0.25, mirror = 0, distortion = 1, mixContrast = 1, distortionMap, reflectorOffset = 0, bufferSamples = 8, planeNormal = new Vector3(0, 0, 1) } = {}) {\n    super();\n    this.gl = renderer;\n    this.camera = camera;\n    this.scene = scene;\n    this.parent = object;\n    this.hasBlur = blur[0] + blur[1] > 0;\n    this.reflectorPlane = new Plane();\n    this.normal = new Vector3();\n    this.reflectorWorldPosition = new Vector3();\n    this.cameraWorldPosition = new Vector3();\n    this.rotationMatrix = new Matrix4();\n    this.lookAtPosition = new Vector3(0, -1, 0);\n    this.clipPlane = new Vector4();\n    this.view = new Vector3();\n    this.target = new Vector3();\n    this.q = new Vector4();\n    this.textureMatrix = new Matrix4();\n    this.virtualCamera = new PerspectiveCamera();\n    this.reflectorOffset = reflectorOffset;\n    this.planeNormal = planeNormal;\n    this.setupBuffers(resolution, blur, bufferSamples);\n    this.reflectorProps = {\n      mirror,\n      textureMatrix: this.textureMatrix,\n      mixBlur,\n      tDiffuse: this.fbo1.texture,\n      tDepth: this.fbo1.depthTexture,\n      tDiffuseBlur: this.fbo2.texture,\n      hasBlur: this.hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      distortion,\n      distortionMap,\n      mixContrast,\n      \"defines-USE_BLUR\": this.hasBlur ? \"\" : void 0,\n      \"defines-USE_DEPTH\": depthScale > 0 ? \"\" : void 0,\n      \"defines-USE_DISTORTION\": distortionMap ? \"\" : void 0\n    };\n  }\n  setupBuffers(resolution, blur, bufferSamples) {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: this.gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    if (this.gl.capabilities.isWebGL2) {\n      fbo1.samples = bufferSamples;\n    }\n    this.fbo1 = fbo1;\n    this.fbo2 = fbo2;\n    this.kawaseBlurPass = new KawaseBlurPass();\n    this.kawaseBlurPass.setSize(blur[0], blur[1]);\n  }\n  beforeRender() {\n    if (!this.parent)\n      return;\n    this.reflectorWorldPosition.setFromMatrixPosition(this.parent.matrixWorld);\n    this.cameraWorldPosition.setFromMatrixPosition(this.camera.matrixWorld);\n    this.rotationMatrix.extractRotation(this.parent.matrixWorld);\n    this.normal.copy(this.planeNormal);\n    this.normal.applyMatrix4(this.rotationMatrix);\n    this.reflectorWorldPosition.addScaledVector(this.normal, this.reflectorOffset);\n    this.view.subVectors(this.reflectorWorldPosition, this.cameraWorldPosition);\n    if (this.view.dot(this.normal) > 0)\n      return;\n    this.view.reflect(this.normal).negate();\n    this.view.add(this.reflectorWorldPosition);\n    this.rotationMatrix.extractRotation(this.camera.matrixWorld);\n    this.lookAtPosition.set(0, 0, -1);\n    this.lookAtPosition.applyMatrix4(this.rotationMatrix);\n    this.lookAtPosition.add(this.cameraWorldPosition);\n    this.target.subVectors(this.reflectorWorldPosition, this.lookAtPosition);\n    this.target.reflect(this.normal).negate();\n    this.target.add(this.reflectorWorldPosition);\n    this.virtualCamera.position.copy(this.view);\n    this.virtualCamera.up.set(0, 1, 0);\n    this.virtualCamera.up.applyMatrix4(this.rotationMatrix);\n    this.virtualCamera.up.reflect(this.normal);\n    this.virtualCamera.lookAt(this.target);\n    this.virtualCamera.far = this.camera.far;\n    this.virtualCamera.updateMatrixWorld();\n    this.virtualCamera.projectionMatrix.copy(this.camera.projectionMatrix);\n    this.textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);\n    this.textureMatrix.multiply(this.virtualCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.virtualCamera.matrixWorldInverse);\n    this.textureMatrix.multiply(this.parent.matrixWorld);\n    this.reflectorPlane.setFromNormalAndCoplanarPoint(this.normal, this.reflectorWorldPosition);\n    this.reflectorPlane.applyMatrix4(this.virtualCamera.matrixWorldInverse);\n    this.clipPlane.set(this.reflectorPlane.normal.x, this.reflectorPlane.normal.y, this.reflectorPlane.normal.z, this.reflectorPlane.constant);\n    const projectionMatrix = this.virtualCamera.projectionMatrix;\n    this.q.x = (Math.sign(this.clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    this.q.y = (Math.sign(this.clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    this.q.z = -1;\n    this.q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];\n    this.clipPlane.multiplyScalar(2 / this.clipPlane.dot(this.q));\n    projectionMatrix.elements[2] = this.clipPlane.x;\n    projectionMatrix.elements[6] = this.clipPlane.y;\n    projectionMatrix.elements[10] = this.clipPlane.z + 1;\n    projectionMatrix.elements[14] = this.clipPlane.w;\n  }\n  update() {\n    if (this.parent.material !== this)\n      return;\n    this.parent.visible = false;\n    const currentXrEnabled = this.gl.xr.enabled;\n    const currentShadowAutoUpdate = this.gl.shadowMap.autoUpdate;\n    this.beforeRender();\n    this.gl.xr.enabled = false;\n    this.gl.shadowMap.autoUpdate = false;\n    this.gl.setRenderTarget(this.fbo1);\n    this.gl.state.buffers.depth.setMask(true);\n    if (!this.gl.autoClear)\n      this.gl.clear();\n    this.gl.render(this.scene, this.virtualCamera);\n    if (this.hasBlur) {\n      this.kawaseBlurPass.render(this.gl, this.fbo1, this.fbo2);\n    }\n    this.gl.xr.enabled = currentXrEnabled;\n    this.gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    this.parent.visible = true;\n    this.gl.setRenderTarget(null);\n  }\n  onBeforeCompile(shader, ...args) {\n    super.onBeforeCompile(shader, ...args);\n    if (this.defines === void 0)\n      this.defines = {};\n    if (!this.defines.USE_UV) {\n      this.defines.USE_UV = \"\";\n    }\n    if (this.reflectorProps[\"defines-USE_BLUR\"] !== void 0)\n      this.defines.USE_BLUR = \"\";\n    if (this.reflectorProps[\"defines-USE_DEPTH\"] !== void 0)\n      this.defines.USE_DEPTH = \"\";\n    if (this.reflectorProps[\"defines-USE_DISTORTION\"] !== void 0)\n      this.defines.USE_DISTORTION = \"\";\n    let props = this.reflectorProps;\n    for (let prop in props) {\n      shader.uniforms[prop] = {\n        get value() {\n          return props[prop];\n        }\n      };\n    }\n    shader.vertexShader = `\n              uniform mat4 textureMatrix;\n              varying vec4 my_vUv;     \n            ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace(\"#include <project_vertex>\", `\n            #include <project_vertex>\n            my_vUv = textureMatrix * vec4( position, 1.0 );\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            `);\n    shader.fragmentShader = `\n              uniform sampler2D tDiffuse;\n              uniform sampler2D tDiffuseBlur;\n              uniform sampler2D tDepth;\n              uniform sampler2D distortionMap;\n              uniform float distortion;\n              uniform float cameraNear;\n              uniform float cameraFar;\n              uniform bool hasBlur;\n              uniform float mixBlur;\n              uniform float mirror;\n              uniform float mixStrength;\n              uniform float minDepthThreshold;\n              uniform float maxDepthThreshold;\n              uniform float mixContrast;\n              uniform float depthScale;\n              uniform float depthToBlurRatioBias;\n              varying vec4 my_vUv;        \n              ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace(\"#include <emissivemap_fragment>\", `\n            #include <emissivemap_fragment>\n          \n            float distortionFactor = 0.0;\n            #ifdef USE_DISTORTION\n              distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n            #endif\n      \n            vec4 new_vUv = my_vUv;\n            new_vUv.x += distortionFactor;\n            new_vUv.y += distortionFactor;\n      \n            vec4 base = texture2DProj(tDiffuse, new_vUv);\n            vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n            \n            vec4 merge = base;\n            \n            #ifdef USE_NORMALMAP\n              vec2 normal_uv = vec2(0.0);\n              vec4 normalColor = texture2D(normalMap, vUv);\n              vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n              vec3 coord = new_vUv.xyz / new_vUv.w;\n              normal_uv = coord.xy + coord.z * my_normal.xz * 0.05 * normalScale;\n              vec4 base_normal = texture2D(tDiffuse, normal_uv);\n              vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n              merge = base_normal;\n              blur = blur_normal;\n            #endif\n      \n            float depthFactor = 0.0001;\n            float blurFactor = 0.0;\n      \n            #ifdef USE_DEPTH\n              vec4 depth = texture2DProj(tDepth, new_vUv);\n              depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n              depthFactor *= depthScale;\n              depthFactor = max(0.0001, min(1.0, depthFactor));\n      \n              #ifdef USE_BLUR\n                blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n                merge = merge * min(1.0, depthFactor + 0.5);\n              #else\n                merge = merge * depthFactor;\n              #endif\n        \n            #endif\n      \n            float reflectorRoughnessFactor = roughness;\n            #ifdef USE_ROUGHNESSMAP\n              vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n              \n              reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n            #endif\n            \n            #ifdef USE_BLUR\n              blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n              merge = mix(merge, blur, blurFactor);\n            #endif\n      \n            vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n            newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n            newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n            newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n            \n            diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n            `);\n  }\n}\nexport { MeshReflectorMaterial as default };\n"],"names":["common_default","KernelSize","VERY_SMALL","SMALL","MEDIUM","LARGE","VERY_LARGE","HUGE","convolution_kawase_default","convolution_kawase_default2","kernelPresets","Float32Array","KawaseBlurMaterial","ShaderMaterial","constructor","texelSize","Vector4","super","name","uniforms","inputBuffer","Uniform","scale","Vector2","kernel","blending","NoBlending","depthWrite","depthTest","fragmentShader","vertexShader","this","toneMapped","setTexelSize","x","y","kernelSize","value","setInputBuffer","kernelSequence","resolutionScale","getScale","setScale","getKernel","setKernel","set","setSize","width","height","copy_default","CopyMaterial","opacity","getOpacity","setOpacity","dummyCamera","Camera","geometry","getFullscreenTriangle","vertices","uvs","BufferGeometry","setAttribute","BufferAttribute","addAttribute","Pass","scene","Scene","camera","renderer","screen","rtt","needsSwap","needsDepthTexture","enabled","renderToScreen","material","getFullscreenMaterial","needsUpdate","setRenderer","isEnabled","setEnabled","fullscreenMaterial","Mesh","frustumCulled","add","setFullscreenMaterial","getDepthTexture","setDepthTexture","depthTexture","depthPacking","BasicDepthPacking","render","outputBuffer","deltaTime","stencilTest","Error","initialize","alpha","frameBufferType","dispose","key","Object","keys","property","Color","AUTO_SIZE","Resolution","EventDispatcher","resizable","base","preferred","target","s","result","Math","round","max","preferredWidth","preferredHeight","getWidth","getHeight","setScalar","dispatchEvent","type","baseWidth","getBaseWidth","setBaseWidth","baseHeight","getBaseHeight","setBaseHeight","setBaseSize","getPreferredWidth","setPreferredWidth","getPreferredHeight","setPreferredHeight","setPreferredSize","copy","resolution","KawaseBlurPass","resolutionX","resolutionY","renderTargetA","WebGLRenderTarget","minFilter","LinearFilter","magFilter","stencilBuffer","depthBuffer","texture","renderTargetB","clone","addEventListener","e","blurMaterial","copyMaterial","getResolution","dithering","getKernelSize","setKernelSize","getResolutionScale","setResolutionScale","previousBuffer","i","l","length","buffer","setRenderTarget","w","h","UnsignedByteType","defines","FRAMEBUFFER_PRECISION_HIGH","outputEncoding","sRGBEncoding","encoding","Vector3","Matrix4","MeshReflectorMaterial","MeshStandardMaterial","object","mixBlur","mixStrength","blur","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","distortion","mixContrast","distortionMap","reflectorOffset","bufferSamples","planeNormal","gl","parent","hasBlur","reflectorPlane","Plane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","q","textureMatrix","virtualCamera","PerspectiveCamera","setupBuffers","reflectorProps","tDiffuse","fbo1","tDepth","tDiffuseBlur","fbo2","parameters","DepthTexture","format","DepthFormat","UnsignedShortType","capabilities","isWebGL2","samples","kawaseBlurPass","beforeRender","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","position","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","z","constant","sign","elements","multiplyScalar","update","visible","currentXrEnabled","xr","currentShadowAutoUpdate","shadowMap","autoUpdate","state","buffers","depth","setMask","autoClear","clear","onBeforeCompile","shader","args","USE_UV","USE_BLUR","USE_DEPTH","USE_DISTORTION","props","prop","replace"],"sourceRoot":""}