{"version":3,"file":"js/169.27e11f23.js","mappings":"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","sources":["webpack://vue3/./node_modules/lingo3d-vue/dist/enableBVHCharacter.js"],"sourcesContent":["import { aZ as createEffect, a_ as getBVHMap, a$ as getGravity, b0 as getRepulsion, b1 as getEditorActive, b2 as loop, b3 as bvhContactMap, b4 as box3, b5 as vector3__, b6 as line3, Z as forceGet, b7 as vector3, b8 as vector3_, aN as scene, b9 as getActualScale, V as Vector3 } from \"./index.js\";\nimport { b as bvhManagerMap } from \"./computeBVH.js\";\nimport \"vue\";\nconst bvhCharacterSet = /* @__PURE__ */ new Set();\nconst makeWeakSet = () => /* @__PURE__ */ new WeakSet();\ncreateEffect(function() {\n  if (getEditorActive())\n    return;\n  const bvhArray = getBVHMap();\n  if (!bvhArray.length)\n    return;\n  const gravity = getGravity();\n  const repulsion = getRepulsion();\n  const delta = 0.02;\n  const handle = loop(() => {\n    bvhContactMap.clear();\n    for (const characterManager of bvhCharacterSet) {\n      const playerVelocity = characterManager.bvhVelocity;\n      const player = characterManager.outerObject3d;\n      const capsuleHalfHeight = characterManager.bvhHalfHeight;\n      const capsuleRadius = characterManager.bvhRadius;\n      playerVelocity.y += characterManager.bvhOnGround ? 0 : delta * -gravity;\n      const { position } = characterManager.physicsUpdate;\n      characterManager.physicsUpdate = {};\n      if (position) {\n        position.x && (playerVelocity.x = 0);\n        position.y && (playerVelocity.y = 0);\n        position.z && (playerVelocity.z = 0);\n      }\n      player.position.addScaledVector(playerVelocity, delta);\n      player.updateMatrixWorld();\n      const { start, end } = line3;\n      end.copy(start.copy(player.position));\n      const yOffset = Math.max(capsuleHalfHeight - capsuleRadius, 0);\n      end.y += yOffset;\n      start.y -= yOffset;\n      const startOld = start.clone();\n      box3.setFromCenterAndSize(player.position, vector3__.set(capsuleRadius * 2, capsuleHalfHeight * 2, capsuleRadius * 2));\n      const triPoint = vector3;\n      const capsulePoint = vector3_;\n      let distance = 0;\n      let direction;\n      let contact = false;\n      let mapManager;\n      for (const boundsTree of bvhArray) {\n        mapManager = bvhManagerMap.get(boundsTree);\n        boundsTree.shapecast({\n          intersectsBounds: (box) => box.intersectsBox(box3),\n          intersectsTriangle: (tri) => {\n            distance = tri.closestPointToSegment(line3, triPoint, capsulePoint);\n            if (distance < capsuleRadius) {\n              contact = true;\n              direction = capsulePoint.sub(triPoint).normalize().multiplyScalar(capsuleRadius - distance);\n              start.add(direction);\n              end.add(direction);\n            }\n          }\n        });\n      }\n      if (contact && mapManager)\n        forceGet(bvhContactMap, characterManager, makeWeakSet).add(mapManager);\n      const deltaVector = start.sub(startOld);\n      characterManager.bvhOnGround = deltaVector.y > Math.abs(delta * playerVelocity.y * 0.25);\n      if (repulsion && characterManager.bvhOnGround) {\n        if (Math.abs(deltaVector.y / (deltaVector.x + deltaVector.z + Number.EPSILON)) < repulsion)\n          characterManager.bvhOnGround = false;\n      }\n      const offset = Math.max(0, deltaVector.length() - 1e-5);\n      deltaVector.normalize().multiplyScalar(offset);\n      player.position.add(deltaVector);\n      if (!characterManager.bvhOnGround) {\n        deltaVector.normalize();\n        playerVelocity.addScaledVector(deltaVector, -deltaVector.dot(playerVelocity));\n      } else\n        playerVelocity.set(0, 0, 0);\n    }\n  });\n  return () => {\n    handle.cancel();\n  };\n}, [getBVHMap, getGravity, getRepulsion, getEditorActive]);\nfunction enableBVHCharacter(handle) {\n  if (handle.done)\n    return;\n  scene.attach(this.outerObject3d);\n  this.width = this.depth = Math.min(this.width, this.depth);\n  this.physicsUpdate = {};\n  const actualScale = getActualScale(this).multiplyScalar(0.5);\n  this.bvhHalfHeight = Math.max(actualScale.y, 0.5);\n  this.bvhRadius = Math.max(actualScale.x, 0.5);\n  this.bvhVelocity = new Vector3();\n  bvhCharacterSet.add(this);\n  handle.then(() => {\n    bvhCharacterSet.delete(this);\n    this.physicsUpdate = void 0;\n  });\n}\nexport { enableBVHCharacter as default };\n"],"names":["bvhCharacterSet","Set","makeWeakSet","WeakSet","enableBVHCharacter","handle","done","scene","this","outerObject3d","width","depth","Math","min","physicsUpdate","actualScale","getActualScale","multiplyScalar","bvhHalfHeight","max","y","bvhRadius","x","bvhVelocity","Vector3","add","then","delete","createEffect","getEditorActive","bvhArray","getBVHMap","length","gravity","getGravity","repulsion","getRepulsion","delta","loop","bvhContactMap","characterManager","playerVelocity","player","capsuleHalfHeight","capsuleRadius","bvhOnGround","position","z","addScaledVector","updateMatrixWorld","start","end","line3","copy","yOffset","startOld","clone","box3","vector3__","triPoint","vector3","capsulePoint","vector3_","direction","mapManager","distance","contact","boundsTree","bvhManagerMap","shapecast","intersectsBounds","box","intersectsBox","intersectsTriangle","tri","closestPointToSegment","sub","normalize","forceGet","deltaVector","abs","Number","EPSILON","offset","set","dot","cancel"],"sourceRoot":""}