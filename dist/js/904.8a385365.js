"use strict";(self["webpackChunkvue3"]=self["webpackChunkvue3"]||[]).push([[904],{2904:function(t,e,s){s.r(e),s.d(e,{AABB:function(){return c},ArrayCollisionMatrix:function(){return p},BODY_SLEEP_STATES:function(){return T},BODY_TYPES:function(){return R},Body:function(){return I},Box:function(){return C},Broadphase:function(){return Y},COLLISION_TYPES:function(){return wi},ConeTwistConstraint:function(){return de},Constraint:function(){return kt},ContactEquation:function(){return Kt},ContactMaterial:function(){return Be},ConvexPolyhedron:function(){return B},Cylinder:function(){return bs},DistanceConstraint:function(){return pe},Equation:function(){return Ht},EventTarget:function(){return y},FrictionEquation:function(){return ge},GSSolver:function(){return si},GridBroadphase:function(){return Z},Heightfield:function(){return Ss},HingeConstraint:function(){return ve},JacobianElement:function(){return _t},LockConstraint:function(){return ye},Mat3:function(){return n},Material:function(){return Ae},NaiveBroadphase:function(){return J},Narrowphase:function(){return gi},ObjectCollisionMatrix:function(){return i},Particle:function(){return Bs},Plane:function(){return As},PointToPointConstraint:function(){return oe},Pool:function(){return vi},Quaternion:function(){return m},RAY_MODES:function(){return lt},Ray:function(){return ht},RaycastResult:function(){return tt},RaycastVehicle:function(){return je},RigidVehicle:function(){return cs},RotationalEquation:function(){return he},RotationalMotorEquation:function(){return me},SAPBroadphase:function(){return jt},SHAPE_TYPES:function(){return w},SPHSystem:function(){return ps},Shape:function(){return g},Solver:function(){return ei},Sphere:function(){return hs},SplitSolver:function(){return ri},Spring:function(){return Ee},Transform:function(){return x},Trimesh:function(){return ks},Vec3:function(){return r},Vec3Pool:function(){return fi},WheelInfo:function(){return Le},World:function(){return kn}});s(6699),s(1703),s(8675),s(3462);class i{constructor(){this.matrix={}}get(t,e){let{id:s}=t,{id:i}=e;if(i>s){const t=i;i=s,s=t}return`${s}-${i}`in this.matrix}set(t,e,s){let{id:i}=t,{id:n}=e;if(n>i){const t=n;n=i,i=t}s?this.matrix[`${i}-${n}`]=!0:delete this.matrix[`${i}-${n}`]}reset(){this.matrix={}}setNumObjects(t){}}class n{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new r);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new r);const s=this.elements,i=t.x,n=t.y,o=t.z;return e.x=s[0]*i+s[1]*n+s[2]*o,e.y=s[3]*i+s[4]*n+s[5]*o,e.z=s[6]*i+s[7]*n+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new n);const s=this.elements,i=t.elements,o=e.elements,r=s[0],a=s[1],l=s[2],h=s[3],c=s[4],u=s[5],d=s[6],p=s[7],y=s[8],m=i[0],v=i[1],f=i[2],w=i[3],g=i[4],x=i[5],b=i[6],B=i[7],A=i[8];return o[0]=r*m+a*w+l*b,o[1]=r*v+a*g+l*B,o[2]=r*f+a*x+l*A,o[3]=h*m+c*w+u*b,o[4]=h*v+c*g+u*B,o[5]=h*f+c*x+u*A,o[6]=d*m+p*w+y*b,o[7]=d*v+p*g+y*B,o[8]=d*f+p*x+y*A,e}scale(t,e){void 0===e&&(e=new n);const s=this.elements,i=e.elements;for(let n=0;3!==n;n++)i[3*n+0]=t.x*s[3*n+0],i[3*n+1]=t.y*s[3*n+1],i[3*n+2]=t.z*s[3*n+2];return e}solve(t,e){void 0===e&&(e=new r);const s=3,i=4,n=[];let o,a;for(o=0;o<s*i;o++)n.push(0);for(o=0;o<3;o++)for(a=0;a<3;a++)n[o+i*a]=this.elements[o+3*a];n[3]=t.x,n[7]=t.y,n[11]=t.z;let l=3;const h=l;let c;const u=4;let d;do{if(o=h-l,0===n[o+i*o])for(a=o+1;a<h;a++)if(0!==n[o+i*a]){c=u;do{d=u-c,n[d+i*o]+=n[d+i*a]}while(--c);break}if(0!==n[o+i*o])for(a=o+1;a<h;a++){const t=n[o+i*a]/n[o+i*o];c=u;do{d=u-c,n[d+i*a]=d<=o?0:n[d+i*a]-n[d+i*o]*t}while(--c)}}while(--l);if(e.z=n[2*i+3]/n[2*i+2],e.y=(n[1*i+3]-n[1*i+2]*e.z)/n[1*i+1],e.x=(n[0*i+3]-n[0*i+2]*e.z-n[0*i+1]*e.y)/n[0*i+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(void 0===s)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){void 0===t&&(t=new n);const e=3,s=6,i=o;let r,a;for(r=0;r<3;r++)for(a=0;a<3;a++)i[r+s*a]=this.elements[r+3*a];i[3]=1,i[9]=0,i[15]=0,i[4]=0,i[10]=1,i[16]=0,i[5]=0,i[11]=0,i[17]=1;let l=3;const h=l;let c;const u=s;let d;do{if(r=h-l,0===i[r+s*r])for(a=r+1;a<h;a++)if(0!==i[r+s*a]){c=u;do{d=u-c,i[d+s*r]+=i[d+s*a]}while(--c);break}if(0!==i[r+s*r])for(a=r+1;a<h;a++){const t=i[r+s*a]/i[r+s*r];c=u;do{d=u-c,i[d+s*a]=d<=r?0:i[d+s*a]-i[d+s*r]*t}while(--c)}}while(--l);r=2;do{a=r-1;do{const t=i[r+s*a]/i[r+s*r];c=s;do{d=s-c,i[d+s*a]=i[d+s*a]-i[d+s*r]*t}while(--c)}while(a--)}while(--r);r=2;do{const t=1/i[r+s*r];c=s;do{d=s-c,i[d+s*r]=i[d+s*r]*t}while(--c)}while(r--);r=2;do{a=2;do{if(d=i[e+a+s*r],isNaN(d)||d===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(r,a,d)}while(a--)}while(r--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,i=t.z,n=t.w,o=e+e,r=s+s,a=i+i,l=e*o,h=e*r,c=e*a,u=s*r,d=s*a,p=i*a,y=n*o,m=n*r,v=n*a,f=this.elements;return f[0]=1-(u+p),f[1]=h-v,f[2]=c+m,f[3]=h+v,f[4]=1-(l+p),f[5]=d-y,f[6]=c-m,f[7]=d+y,f[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new n);const e=this.elements,s=t.elements;let i;return s[0]=e[0],s[4]=e[4],s[8]=e[8],i=e[1],s[1]=e[3],s[3]=i,i=e[2],s[2]=e[6],s[6]=i,i=e[5],s[5]=e[7],s[7]=i,t}}const o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class r{constructor(t,e,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){void 0===e&&(e=new r);const s=t.x,i=t.y,n=t.z,o=this.x,a=this.y,l=this.z;return e.x=a*n-l*i,e.y=l*s-o*n,e.z=o*i-a*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new r(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new r(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new n([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,i=Math.sqrt(t*t+e*e+s*s);if(i>0){const t=1/i;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return i}unit(t){void 0===t&&(t=new r);const e=this.x,s=this.y,i=this.z;let n=Math.sqrt(e*e+s*s+i*i);return n>0?(n=1/n,t.x=e*n,t.y=s*n,t.z=i*n):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return Math.sqrt((n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i))}distanceSquared(t){const e=this.x,s=this.y,i=this.z,n=t.x,o=t.y,r=t.z;return(n-e)*(n-e)+(o-s)*(o-s)+(r-i)*(r-i)}scale(t,e){void 0===e&&(e=new r);const s=this.x,i=this.y,n=this.z;return e.x=t*s,e.y=t*i,e.z=t*n,e}vmul(t,e){return void 0===e&&(e=new r),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return void 0===s&&(s=new r),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new r),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const i=a,n=1/s;i.set(this.x*n,this.y*n,this.z*n);const o=l;Math.abs(i.x)<.9?(o.set(1,0,0),i.cross(o,t)):(o.set(0,1,0),i.cross(o,t)),i.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const i=this.x,n=this.y,o=this.z;s.x=i+(t.x-i)*e,s.y=n+(t.y-n)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(h),h.almostEquals(t,e)}clone(){return new r(this.x,this.y,this.z)}}r.ZERO=new r(0,0,0),r.UNIT_X=new r(1,0,0),r.UNIT_Y=new r(0,1,0),r.UNIT_Z=new r(0,0,1);const a=new r,l=new r,h=new r;class c{constructor(t){void 0===t&&(t={}),this.lowerBound=new r,this.upperBound=new r,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,i){const n=this.lowerBound,o=this.upperBound,r=s;n.copy(t[0]),r&&r.vmult(n,n),o.copy(n);for(let a=1;a<t.length;a++){let e=t[a];r&&(r.vmult(e,u),e=u),e.x>o.x&&(o.x=e.x),e.x<n.x&&(n.x=e.x),e.y>o.y&&(o.y=e.y),e.y<n.y&&(n.y=e.y),e.z>o.z&&(o.z=e.z),e.z<n.z&&(n.z=e.z)}return e&&(e.vadd(n,n),e.vadd(o,o)),i&&(n.x-=i,n.y-=i,n.z-=i,o.x+=i,o.y+=i,o.z+=i),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new c).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound,o=i.x<=s.x&&s.x<=n.x||e.x<=n.x&&n.x<=s.x,r=i.y<=s.y&&s.y<=n.y||e.y<=n.y&&n.y<=s.y,a=i.z<=s.z&&s.z<=n.z||e.z<=n.z&&n.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,i=t.lowerBound,n=t.upperBound;return e.x<=i.x&&s.x>=n.x&&e.y<=i.y&&s.y>=n.y&&e.z<=i.z&&s.z>=n.z}getCorners(t,e,s,i,n,o,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),s.set(h.x,h.y,l.z),i.set(l.x,h.y,h.z),n.set(h.x,l.y,h.z),o.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const s=d,i=s[0],n=s[1],o=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,n,o,r,a,l,h,c);for(let u=0;8!==u;u++){const e=s[u];t.pointToLocal(e,e)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=d,i=s[0],n=s[1],o=s[2],r=s[3],a=s[4],l=s[5],h=s[6],c=s[7];this.getCorners(i,n,o,r,a,l,h,c);for(let u=0;8!==u;u++){const e=s[u];t.pointToWorld(e,e)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,i=1/e.x,n=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*i,a=(this.upperBound.x-s.x)*i,l=(this.lowerBound.y-s.y)*n,h=(this.upperBound.y-s.y)*n,c=(this.lowerBound.z-s.z)*o,u=(this.upperBound.z-s.z)*o,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const u=new r,d=[new r,new r,new r,new r,new r,new r,new r,new r];class p{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:i}=e;if(i>s){const t=i;i=s,s=t}return this.matrix[(s*(s+1)>>1)+i-1]}set(t,e,s){let{index:i}=t,{index:n}=e;if(n>i){const t=n;n=i,i=t}this.matrix[(i*(i+1)>>1)+n-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class y{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const s=this._listeners;return void 0===s[t]&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const s=this._listeners;return!(void 0===s[t]||!s[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;const e=this._listeners;return void 0!==e[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const s=this._listeners;if(void 0===s[t])return this;const i=s[t].indexOf(e);return-1!==i&&s[t].splice(i,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners,s=e[t.type];if(void 0!==s){t.target=this;for(let e=0,i=s.length;e<i;e++)s[e].call(this,t)}return this}}class m{constructor(t,e,s,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===s&&(s=0),void 0===i&&(i=1),this.x=t,this.y=e,this.z=s,this.w=i}set(t,e,s,i){return this.x=t,this.y=e,this.z=s,this.w=i,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(.5*e);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new r),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=v,s=f;t.tangents(e,s),this.setFromAxisAngle(e,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new m);const s=this.x,i=this.y,n=this.z,o=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=s*h+o*r+i*l-n*a,e.y=i*h+o*a+n*r-s*l,e.z=n*h+o*l+s*a-i*r,e.w=o*h-s*r-i*a-n*l,e}inverse(t){void 0===t&&(t=new m);const e=this.x,s=this.y,i=this.z,n=this.w;this.conjugate(t);const o=1/(e*e+s*s+i*i+n*n);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return void 0===t&&(t=new m),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new r);const s=t.x,i=t.y,n=t.z,o=this.x,a=this.y,l=this.z,h=this.w,c=h*s+a*n-l*i,u=h*i+l*s-o*n,d=h*n+o*i-a*s,p=-o*s-a*i-l*n;return e.x=c*h+p*-o+u*-l-d*-a,e.y=u*h+p*-a+d*-o-c*-l,e.z=d*h+p*-l+c*-a-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let s,i,n;void 0===e&&(e="YZX");const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const t=o*r+a*l;if(t>.499&&(s=2*Math.atan2(o,l),i=Math.PI/2,n=0),t<-.499&&(s=-2*Math.atan2(o,l),i=-Math.PI/2,n=0),void 0===s){const e=o*o,h=r*r,c=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*c),i=Math.asin(2*t),n=Math.atan2(2*o*l-2*r*a,1-2*e-2*c)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=i,t.x=n}setFromEuler(t,e,s,i){void 0===i&&(i="XYZ");const n=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(s/2);return"XYZ"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"YXZ"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"ZXY"===i?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r-a*l*h):"ZYX"===i?(this.x=a*o*r-n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r+a*l*h):"YZX"===i?(this.x=a*o*r+n*l*h,this.y=n*l*r+a*o*h,this.z=n*o*h-a*l*r,this.w=n*o*r-a*l*h):"XZY"===i&&(this.x=a*o*r-n*l*h,this.y=n*l*r-a*o*h,this.z=n*o*h+a*l*r,this.w=n*o*r+a*l*h),this}clone(){return new m(this.x,this.y,this.z,this.w)}slerp(t,e,s){void 0===s&&(s=new m);const i=this.x,n=this.y,o=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,y=t.z,v=t.w;return l=i*d+n*p+o*y+r*v,l<0&&(l=-l,d=-d,p=-p,y=-y,v=-v),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),s.x=c*i+u*d,s.y=c*n+u*p,s.z=c*o+u*y,s.w=c*r+u*v,s}integrate(t,e,s,i){void 0===i&&(i=new m);const n=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return i.x+=u*(n*c+o*h-r*l),i.y+=u*(o*c+r*a-n*h),i.z+=u*(r*c+n*l-o*a),i.w+=u*(-n*a-o*l-r*h),i}}const v=new r,f=new r,w={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class g{constructor(t){void 0===t&&(t={}),this.id=g.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,i){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}g.idCounter=0,g.types=w;class x{constructor(t){void 0===t&&(t={}),this.position=new r,this.quaternion=new m,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return x.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return x.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new r),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,i){return void 0===i&&(i=new r),s.vsub(t,i),e.conjugate(b),b.vmult(i,i),i}static pointToWorldFrame(t,e,s,i){return void 0===i&&(i=new r),e.vmult(s,i),i.vadd(t,i),i}static vectorToWorldFrame(t,e,s){return void 0===s&&(s=new r),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,i){return void 0===i&&(i=new r),e.w*=-1,e.vmult(s,i),e.w*=-1,i}}const b=new m;class B extends g{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:s=[],normals:i=[],axes:n,boundingSphereRadius:o}=t;super({type:g.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=i,0===this.faceNormals.length&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=n?n.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const i=new r;for(let n=0;n!==t.length;n++){const o=t[n],r=o.length;for(let t=0;t!==r;t++){const n=(t+1)%r;e[o[t]].vsub(e[o[n]],i),i.normalize();let a=!1;for(let t=0;t!==s.length;t++)if(s[t].almostEquals(i)||s[t].almostEquals(i)){a=!0;break}a||s.push(i.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let i=0;i<this.faces[t].length;i++)if(!this.vertices[this.faces[t][i]])throw new Error(`Vertex ${this.faces[t][i]} not found!`);const e=this.faceNormals[t]||new r;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let e=0;e<this.faces[t].length;e++)console.warn(`.vertices[${this.faces[t][e]}] = Vec3(${this.vertices[this.faces[t][e]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],i=this.vertices[s[0]],n=this.vertices[s[1]],o=this.vertices[s[2]];B.computeNormal(i,n,o,e)}static computeNormal(t,e,s,i){const n=new r,o=new r;e.vsub(t,o),s.vsub(e,n),n.cross(o,i),i.isZero()||i.normalize()}clipAgainstHull(t,e,s,i,n,o,a,l,h){const c=new r;let u=-1,d=-Number.MAX_VALUE;for(let r=0;r<s.faces.length;r++){c.copy(s.faceNormals[r]),n.vmult(c,c);const t=c.dot(o);t>d&&(d=t,u=r)}const p=[];for(let y=0;y<s.faces[u].length;y++){const t=s.vertices[s.faces[u][y]],e=new r;e.copy(t),n.vmult(e,e),i.vadd(e,e),p.push(e)}u>=0&&this.clipFaceAgainstHull(o,t,e,p,a,l,h)}findSeparatingAxis(t,e,s,i,n,o,a,l){const h=new r,c=new r,u=new r,d=new r,p=new r,y=new r;let m=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let r=0;r!==v.uniqueAxes.length;r++){s.vmult(v.uniqueAxes[r],h);const a=v.testSepAxis(h,t,e,s,i,n);if(!1===a)return!1;a<m&&(m=a,o.copy(h))}else{const r=a?a.length:v.faces.length;for(let l=0;l<r;l++){const r=a?a[l]:l;h.copy(v.faceNormals[r]),s.vmult(h,h);const c=v.testSepAxis(h,t,e,s,i,n);if(!1===c)return!1;c<m&&(m=c,o.copy(h))}}if(t.uniqueAxes)for(let r=0;r!==t.uniqueAxes.length;r++){n.vmult(t.uniqueAxes[r],c);const a=v.testSepAxis(c,t,e,s,i,n);if(!1===a)return!1;a<m&&(m=a,o.copy(c))}else{const r=l?l.length:t.faces.length;for(let a=0;a<r;a++){const r=l?l[a]:a;c.copy(t.faceNormals[r]),n.vmult(c,c);const h=v.testSepAxis(c,t,e,s,i,n);if(!1===h)return!1;h<m&&(m=h,o.copy(c))}}for(let r=0;r!==v.uniqueEdges.length;r++){s.vmult(v.uniqueEdges[r],d);for(let r=0;r!==t.uniqueEdges.length;r++)if(n.vmult(t.uniqueEdges[r],p),d.cross(p,y),!y.almostZero()){y.normalize();const r=v.testSepAxis(y,t,e,s,i,n);if(!1===r)return!1;r<m&&(m=r,o.copy(y))}}return i.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,i,n,o){const r=this;B.project(r,t,s,i,A),B.project(e,t,n,o,E);const a=A[0],l=A[1],h=E[0],c=E[1];if(a<c||h<l)return!1;const u=a-c,d=h-l,p=u<d?u:d;return p}calculateLocalInertia(t,e){const s=new r,i=new r;this.computeLocalAABB(i,s);const n=s.x-i.x,o=s.y-i.y,a=s.z-i.z;e.x=1/12*t*(2*o*2*o+2*a*2*a),e.y=1/12*t*(2*n*2*n+2*a*2*a),e.z=1/12*t*(2*o*2*o+2*n*2*n)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],i=this.vertices[e[0]],n=-s.dot(i);return n}clipFaceAgainstHull(t,e,s,i,n,o,a){const l=new r,h=new r,c=new r,u=new r,d=new r,p=new r,y=new r,m=new r,v=this,f=[],w=i,g=f;let x=-1,b=Number.MAX_VALUE;for(let r=0;r<v.faces.length;r++){l.copy(v.faceNormals[r]),s.vmult(l,l);const e=l.dot(t);e<b&&(b=e,x=r)}if(x<0)return;const B=v.faces[x];B.connectedFaces=[];for(let r=0;r<v.faces.length;r++)for(let t=0;t<v.faces[r].length;t++)-1!==B.indexOf(v.faces[r][t])&&r!==x&&-1===B.connectedFaces.indexOf(r)&&B.connectedFaces.push(r);const A=B.length;for(let r=0;r<A;r++){const t=v.vertices[B[r]],i=v.vertices[B[(r+1)%A]];t.vsub(i,h),c.copy(h),s.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[x]),s.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(t),s.vmult(p,p),e.vadd(p,p);const n=B.connectedFaces[r];y.copy(this.faceNormals[n]);const o=this.getPlaneConstantOfFace(n);m.copy(y),s.vmult(m,m);const a=o-m.dot(e);this.clipFaceAgainstPlane(w,g,m,a);while(w.length)w.shift();while(g.length)w.push(g.shift())}y.copy(this.faceNormals[x]);const E=this.getPlaneConstantOfFace(x);m.copy(y),s.vmult(m,m);const S=E-m.dot(e);for(let r=0;r<w.length;r++){let t=m.dot(w[r])+S;if(t<=n&&(console.log(`clamped: depth=${t} to minDist=${n}`),t=n),t<=o){const e=w[r];if(t<=1e-6){const s={point:e,normal:m,depth:t};a.push(s)}}}}clipFaceAgainstPlane(t,e,s,i){let n,o;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];n=s.dot(l)+i;for(let c=0;c<a;c++){if(h=t[c],o=s.dot(h)+i,n<0)if(o<0){const t=new r;t.copy(h),e.push(t)}else{const t=new r;l.lerp(h,n/(n-o),t),e.push(t)}else if(o<0){const t=new r;l.lerp(h,n/(n-o),t),e.push(t),e.push(h)}l=h,n=o}return e}computeWorldVertices(t,e){while(this.worldVertices.length<this.vertices.length)this.worldVertices.push(new r);const s=this.vertices,i=this.worldVertices;for(let n=0;n!==this.vertices.length;n++)e.vmult(s[n],i[n]),t.vadd(i[n],i[n]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let i=0;i<this.vertices.length;i++){const n=s[i];n.x<t.x?t.x=n.x:n.x>e.x&&(e.x=n.x),n.y<t.y?t.y=n.y:n.y>e.y&&(e.y=n.y),n.z<t.z?t.z=n.z:n.z>e.z&&(e.z=n.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;while(this.worldFaceNormals.length<e)this.worldFaceNormals.push(new r);const s=this.faceNormals,i=this.worldFaceNormals;for(let n=0;n!==e;n++)t.vmult(s[n],i[n]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const i=e[s].lengthSquared();i>t&&(t=i)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=this.vertices;let o,a,l,h,c,u,d=new r;for(let r=0;r<n.length;r++){d.copy(n[r]),e.vmult(d,d),t.vadd(d,d);const s=d;(void 0===o||s.x<o)&&(o=s.x),(void 0===h||s.x>h)&&(h=s.x),(void 0===a||s.y<a)&&(a=s.y),(void 0===c||s.y>c)&&(c=s.y),(void 0===l||s.z<l)&&(l=s.z),(void 0===u||s.z>u)&&(u=s.z)}s.set(o,a,l),i.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new r);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,i=this.vertices;if(e){for(let t=0;t<s;t++){const s=i[t];e.vmult(s,s)}for(let t=0;t<this.faceNormals.length;t++){const s=this.faceNormals[t];e.vmult(s,s)}}if(t)for(let n=0;n<s;n++){const e=i[n];e.vadd(t,e)}}pointIsInside(t){const e=this.vertices,s=this.faces,i=this.faceNormals,n=null,o=new r;this.getAveragePointLocal(o);for(let a=0;a<this.faces.length;a++){let n=i[a];const l=e[s[a][0]],h=new r;t.vsub(l,h);const c=n.dot(h),u=new r;o.vsub(l,u);const d=n.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return n?1:-1}static project(t,e,s,i,n){const o=t.vertices.length,r=S;let a=0,l=0;const h=z,c=t.vertices;h.setZero(),x.vectorToLocalFrame(s,i,e,r),x.pointToLocalFrame(s,i,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let d=1;d<o;d++){const t=c[d].dot(r);t>a&&(a=t),t<l&&(l=t)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}n[0]=a,n[1]=l}}const A=[],E=[],S=(new r,new r),z=new r;class C extends g{constructor(t){super({type:g.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,i=r,n=[new i(-t,-e,-s),new i(t,-e,-s),new i(t,e,-s),new i(-t,e,-s),new i(-t,-e,s),new i(t,-e,s),new i(t,e,s),new i(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],a=[new i(0,0,1),new i(0,1,0),new i(1,0,0)],l=new B({vertices:n,faces:o,axes:a});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new r),C.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const i=t;s.x=1/12*e*(2*i.y*2*i.y+2*i.z*2*i.z),s.y=1/12*e*(2*i.x*2*i.x+2*i.z*2*i.z),s.z=1/12*e*(2*i.y*2*i.y+2*i.x*2*i.x)}getSideNormals(t,e){const s=t,i=this.halfExtents;if(s[0].set(i.x,0,0),s[1].set(0,i.y,0),s[2].set(0,0,i.z),s[3].set(-i.x,0,0),s[4].set(0,-i.y,0),s[5].set(0,0,-i.z),void 0!==e)for(let n=0;n!==s.length;n++)e.vmult(s[n],s[n]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const i=this.halfExtents,n=[[i.x,i.y,i.z],[-i.x,i.y,i.z],[-i.x,-i.y,i.z],[-i.x,-i.y,-i.z],[i.x,-i.y,-i.z],[i.x,i.y,-i.z],[-i.x,i.y,-i.z],[i.x,-i.y,i.z]];for(let o=0;o<n.length;o++)F.set(n[o][0],n[o][1],n[o][2]),e.vmult(F,F),t.vadd(F,F),s(F.x,F.y,F.z)}calculateWorldAABB(t,e,s,i){const n=this.halfExtents;M[0].set(n.x,n.y,n.z),M[1].set(-n.x,n.y,n.z),M[2].set(-n.x,-n.y,n.z),M[3].set(-n.x,-n.y,-n.z),M[4].set(n.x,-n.y,-n.z),M[5].set(n.x,n.y,-n.z),M[6].set(-n.x,n.y,-n.z),M[7].set(n.x,-n.y,n.z);const o=M[0];e.vmult(o,o),t.vadd(o,o),i.copy(o),s.copy(o);for(let r=1;r<8;r++){const n=M[r];e.vmult(n,n),t.vadd(n,n);const o=n.x,a=n.y,l=n.z;o>i.x&&(i.x=o),a>i.y&&(i.y=a),l>i.z&&(i.z=l),o<s.x&&(s.x=o),a<s.y&&(s.y=a),l<s.z&&(s.z=l)}}}const F=new r,M=[new r,new r,new r,new r,new r,new r,new r,new r],R={DYNAMIC:1,STATIC:2,KINEMATIC:4},T={AWAKE:0,SLEEPY:1,SLEEPING:2};class I extends y{constructor(t){void 0===t&&(t={}),super(),this.id=I.idCounter++,this.index=-1,this.world=null,this.vlambda=new r,this.collisionFilterGroup="number"===typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"===typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!==typeof t.collisionResponse||t.collisionResponse,this.position=new r,this.previousPosition=new r,this.interpolatedPosition=new r,this.initPosition=new r,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new r,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new r,this.force=new r;const e="number"===typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"===typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?I.STATIC:I.DYNAMIC,typeof t.type===typeof I.STATIC&&(this.type=t.type),this.allowSleep="undefined"===typeof t.allowSleep||t.allowSleep,this.sleepState=I.AWAKE,this.sleepSpeedLimit="undefined"!==typeof t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit="undefined"!==typeof t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new r,this.quaternion=new m,this.initQuaternion=new m,this.previousQuaternion=new m,this.interpolatedQuaternion=new m,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new r,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new r,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new r,this.invInertia=new r,this.invInertiaWorld=new n,this.invMassSolve=0,this.invInertiaSolve=new r,this.invInertiaWorldSolve=new n,this.fixedRotation="undefined"!==typeof t.fixedRotation&&t.fixedRotation,this.angularDamping="undefined"!==typeof t.angularDamping?t.angularDamping:.01,this.linearFactor=new r(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new r(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new c,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new r,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=I.AWAKE,this.wakeUpAfterNarrowphase=!1,t===I.SLEEPING&&this.dispatchEvent(I.wakeupEvent)}sleep(){this.sleepState=I.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),i=this.sleepSpeedLimit**2;e===I.AWAKE&&s<i?(this.sleepState=I.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(I.sleepyEvent)):e===I.SLEEPY&&s>i?this.wakeUp():e===I.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(I.sleepEvent))}}updateSolveMassProperties(){this.sleepState===I.SLEEPING||this.type===I.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new r),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new r),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new r),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new r),this.quaternion.vmult(t,e),e}addShape(t,e,s){const i=new r,n=new m;return e&&i.copy(e),s&&n.copy(s),this.shapes.push(t),this.shapeOffsets.push(i),this.shapeOrientations.push(n),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let i=0;for(let n=0;n!==s;n++){const s=t[n];s.updateBoundingSphereRadius();const o=e[n].length(),r=s.boundingSphereRadius;o+r>i&&(i=o+r)}this.boundingRadius=i}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,i=t.length,n=P,o=q,r=this.quaternion,a=this.aabb,l=N;for(let h=0;h!==i;h++){const i=t[h];r.vmult(e[h],n),n.vadd(this.position,n),r.mult(s[h],o),i.calculateWorldAABB(n,o,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=L,s=W;t.setRotationFromQuaternion(this.quaternion),t.transpose(s),t.scale(e,t),t.mmult(s,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new r),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const s=V;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new r),this.type!==I.DYNAMIC)return;const s=j,i=O;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyForce(s,i)}applyTorque(t){this.type===I.DYNAMIC&&(this.sleepState===I.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new r),this.type!==I.DYNAMIC)return;this.sleepState===I.SLEEPING&&this.wakeUp();const s=e,i=k;i.copy(t),i.scale(this.invMass,i),this.velocity.vadd(i,this.velocity);const n=_;s.cross(t,n),this.invInertiaWorld.vmult(n,n),this.angularVelocity.vadd(n,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new r),this.type!==I.DYNAMIC)return;const s=H,i=D;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,i),this.applyImpulse(s,i)}updateMassProperties(){const t=U;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),C.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new r;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==I.DYNAMIC&&this.type!==I.KINEMATIC||this.sleepState===I.SLEEPING)return;const i=this.velocity,n=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;i.x+=r.x*d*u.x,i.y+=r.y*d*u.y,i.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,m=a.x*y.x,v=a.y*y.y,f=a.z*y.z;n.x+=t*(p[0]*m+p[1]*v+p[2]*f),n.y+=t*(p[3]*m+p[4]*v+p[5]*f),n.z+=t*(p[6]*m+p[7]*v+p[8]*f),o.x+=i.x*t,o.y+=i.y*t,o.z+=i.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}I.idCounter=0,I.COLLIDE_EVENT_NAME="collide",I.DYNAMIC=R.DYNAMIC,I.STATIC=R.STATIC,I.KINEMATIC=R.KINEMATIC,I.AWAKE=T.AWAKE,I.SLEEPY=T.SLEEPY,I.SLEEPING=T.SLEEPING,I.wakeupEvent={type:"wakeup"},I.sleepyEvent={type:"sleepy"},I.sleepEvent={type:"sleep"};const P=new r,q=new m,N=new c,L=new n,W=new n,V=(new n,new r),j=new r,O=new r,k=new r,_=new r,H=new r,D=new r,U=new r;class Y{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!==(t.collisionFilterGroup&e.collisionFilterMask)&&0!==(e.collisionFilterGroup&t.collisionFilterMask)&&(0===(t.type&I.STATIC)&&t.sleepState!==I.SLEEPING||0===(e.type&I.STATIC)&&e.sleepState!==I.SLEEPING)}intersectionTest(t,e,s,i){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,i):this.doBoundingSphereBroadphase(t,e,s,i)}doBoundingSphereBroadphase(t,e,s,i){const n=G;e.position.vsub(t.position,n);const o=(t.boundingRadius+e.boundingRadius)**2,r=n.lengthSquared();r<o&&(s.push(t),i.push(e))}doBoundingBoxBroadphase(t,e,s,i){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),i.push(e))}makePairsUnique(t,e){const s=X,i=$,n=K,o=t.length;for(let r=0;r!==o;r++)i[r]=t[r],n[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const t=i[r].id,e=n[r].id,o=t<e?`${t},${e}`:`${e},${t}`;s[o]=r,s.keys.push(o)}for(let r=0;r!==s.keys.length;r++){const o=s.keys.pop(),r=s[o];t.push(i[r]),e.push(n[r]),delete s[o]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new r;t.position.vsub(e.position,s);const i=t.shapes[0],n=e.shapes[0];return Math.pow(i.boundingSphereRadius+n.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const G=new r;new r,new m,new r;const X={keys:[]},$=[],K=[];new r;class Z extends Y{constructor(t,e,s,i,n){void 0===t&&(t=new r(100,100,100)),void 0===e&&(e=new r(-100,-100,-100)),void 0===s&&(s=10),void 0===i&&(i=10),void 0===n&&(n=10),super(),this.nx=s,this.ny=i,this.nz=n,this.aabbMin=t,this.aabbMax=e;const o=this.nx*this.ny*this.nz;if(o<=0)throw"GridBroadphase: Each dimension's n must be >0";this.bins=[],this.binLengths=[],this.bins.length=o,this.binLengths.length=o;for(let r=0;r<o;r++)this.bins[r]=[],this.binLengths[r]=0}collisionPairs(t,e,s){const i=t.bodies.length,n=t.bodies,o=this.aabbMax,r=this.aabbMin,a=this.nx,l=this.ny,h=this.nz,c=l*h,u=h,d=1,p=o.x,y=o.y,m=o.z,v=r.x,f=r.y,w=r.z,x=a/(p-v),b=l/(y-f),B=h/(m-w),A=(p-v)/a,E=(y-f)/l,S=(m-w)/h,z=.5*Math.sqrt(A*A+E*E+S*S),C=g.types,F=C.SPHERE,M=C.PLANE;C.BOX,C.COMPOUND,C.CONVEXPOLYHEDRON;const R=this.bins,T=this.binLengths,I=this.bins.length;for(let g=0;g!==I;g++)T[g]=0;const P=Math.ceil;function q(t,e,s,i,n,o,r){let p=(t-v)*x|0,y=(e-f)*b|0,m=(s-w)*B|0,g=P((i-v)*x),A=P((n-f)*b),E=P((o-w)*B);p<0?p=0:p>=a&&(p=a-1),y<0?y=0:y>=l&&(y=l-1),m<0?m=0:m>=h&&(m=h-1),g<0?g=0:g>=a&&(g=a-1),A<0?A=0:A>=l&&(A=l-1),E<0?E=0:E>=h&&(E=h-1),p*=c,y*=u,m*=d,g*=c,A*=u,E*=d;for(let a=p;a<=g;a+=c)for(let t=y;t<=A;t+=u)for(let e=m;e<=E;e+=d){const s=a+t+e;R[s][T[s]++]=r}}for(let g=0;g!==i;g++){const t=n[g],e=t.shapes[0];switch(e.type){case F:{const s=e,i=t.position.x,n=t.position.y,o=t.position.z,r=s.radius;q(i-r,n-r,o-r,i+r,n+r,o+r,t);break}case M:{const s=e;s.worldNormalNeedsUpdate&&s.computeWorldNormal(t.quaternion);const i=s.worldNormal,n=v+.5*A-t.position.x,o=f+.5*E-t.position.y,r=w+.5*S-t.position.z,p=Q;p.set(n,o,r);for(let e=0,y=0;e!==a;e++,y+=c,p.y=o,p.x+=A)for(let s=0,n=0;s!==l;s++,n+=u,p.z=r,p.y+=E)for(let e=0,o=0;e!==h;e++,o+=d,p.z+=S)if(p.dot(i)<z){const e=y+n+o;R[e][T[e]++]=t}break}default:t.aabbNeedsUpdate&&t.updateAABB(),q(t.aabb.lowerBound.x,t.aabb.lowerBound.y,t.aabb.lowerBound.z,t.aabb.upperBound.x,t.aabb.upperBound.y,t.aabb.upperBound.z,t);break}}for(let g=0;g!==I;g++){const t=T[g];if(t>1){const i=R[g];for(let n=0;n!==t;n++){const t=i[n];for(let o=0;o!==n;o++){const n=i[o];this.needBroadphaseCollision(t,n)&&this.intersectionTest(t,n,e,s)}}}}this.makePairsUnique(e,s)}}const Q=new r;new r;class J extends Y{constructor(){super()}collisionPairs(t,e,s){const i=t.bodies,n=i.length;let o,r;for(let a=0;a!==n;a++)for(let t=0;t!==a;t++)o=i[a],r=i[t],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){void 0===s&&(s=[]);for(let i=0;i<t.bodies.length;i++){const n=t.bodies[i];n.aabbNeedsUpdate&&n.updateAABB(),n.aabb.overlaps(e)&&s.push(n)}return s}}class tt{constructor(){this.rayFromWorld=new r,this.rayToWorld=new r,this.hitNormalWorld=new r,this.hitPointWorld=new r,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,i,n,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(i),this.shape=n,this.body=o,this.distance=r}}let et,st,it,nt,ot,rt,at;const lt={CLOSEST:1,ANY:2,ALL:4};et=g.types.SPHERE,st=g.types.PLANE,it=g.types.BOX,nt=g.types.CYLINDER,ot=g.types.CONVEXPOLYHEDRON,rt=g.types.HEIGHTFIELD,at=g.types.TRIMESH;class ht{get[et](){return this._intersectSphere}get[st](){return this._intersectPlane}get[it](){return this._intersectBox}get[nt](){return this._intersectConvex}get[ot](){return this._intersectConvex}get[rt](){return this._intersectHeightfield}get[at](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new r),void 0===e&&(e=new r),this.from=t.clone(),this.to=e.clone(),this.direction=new r,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=ht.ANY,this.result=new tt,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||ht.ANY,this.result=e.result||new tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask="undefined"!==typeof e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup="undefined"!==typeof e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse="undefined"===typeof e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(ct),ut.length=0,t.broadphase.aabbQuery(t,ct,ut),this.intersectBodies(ut),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse)return;if(0===(this.collisionFilterGroup&t.collisionFilterMask)||0===(t.collisionFilterGroup&this.collisionFilterMask))return;const i=yt,n=mt;for(let o=0,r=t.shapes.length;o<r;o++){const e=t.shapes[o];if((!s||e.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],n),t.quaternion.vmult(t.shapeOffsets[o],i),i.vadd(t.position,i),this.intersectShape(e,n,i,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,i=t.length;!this.result.shouldStop&&s<i;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,i){const n=this.from,o=Vt(n,this.direction,s);if(o>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,i,t)}_intersectBox(t,e,s,i,n){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,i,n)}_intersectPlane(t,e,s,i,n){const o=this.from,a=this.to,l=this.direction,h=new r(0,0,1);e.vmult(h,h);const c=new r;o.vsub(s,c);const u=c.dot(h);a.vsub(s,c);const d=c.dot(h);if(u*d>0)return;if(o.distanceTo(a)<u)return;const p=h.dot(l);if(Math.abs(p)<this.precision)return;const y=new r,m=new r,v=new r;o.vsub(s,y);const f=-h.dot(y)/p;l.scale(f,m),o.vadd(m,v),this.reportIntersection(h,v,n,i,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,i=this.to,n=this.from;e.x=Math.min(i.x,n.x),e.y=Math.min(i.y,n.y),e.z=Math.min(i.z,n.z),s.x=Math.max(i.x,n.x),s.y=Math.max(i.y,n.y),s.z=Math.max(i.z,n.z)}_intersectHeightfield(t,e,s,i,n){t.data,t.elementSize;const o=Bt;o.from.copy(this.from),o.to.copy(this.to),x.pointToLocalFrame(s,e,o.from,o.from),x.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=At;let a,l,h,u;a=l=0,h=u=t.data.length-1;const d=new c;o.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),h=Math.min(h,r[0]+1),u=Math.min(u,r[1]+1);for(let c=a;c<h;c++)for(let r=l;r<u;r++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(c,r,d),d.overlapsRay(o)){if(t.getConvexTrianglePillar(c,r,!1),x.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,n,xt),this.result.shouldStop)return;t.getConvexTrianglePillar(c,r,!0),x.pointToWorldFrame(s,e,t.pillarOffset,bt),this._intersectConvex(t.pillarConvex,e,bt,i,n,xt)}}}_intersectSphere(t,e,s,i,n){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,h=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),c=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,u=h**2-4*l*c,d=Et,p=St;if(!(u<0))if(0===u)o.lerp(r,u,d),d.vsub(s,p),p.normalize(),this.reportIntersection(p,d,n,i,-1);else{const t=(-h-Math.sqrt(u))/(2*l),e=(-h+Math.sqrt(u))/(2*l);if(t>=0&&t<=1&&(o.lerp(r,t,d),d.vsub(s,p),p.normalize(),this.reportIntersection(p,d,n,i,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(o.lerp(r,e,d),d.vsub(s,p),p.normalize(),this.reportIntersection(p,d,n,i,-1))}}_intersectConvex(t,e,s,i,n,o){const r=zt,a=Ct,l=o&&o.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,m=p.distanceTo(y),v=l?l.length:h.length,f=this.result;for(let w=0;!f.shouldStop&&w<v;w++){const t=l?l[w]:w,o=h[t],y=u[t],v=e,g=s;a.copy(c[o[0]]),v.vmult(a,a),a.vadd(g,a),a.vsub(p,a),v.vmult(y,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,vt),vt.vadd(p,vt),ft.copy(c[o[0]]),v.vmult(ft,ft),g.vadd(ft,ft);for(let e=1;!f.shouldStop&&e<o.length-1;e++){wt.copy(c[o[e]]),gt.copy(c[o[e+1]]),v.vmult(wt,wt),v.vmult(gt,gt),g.vadd(wt,wt),g.vadd(gt,gt);const s=vt.distanceTo(p);!ht.pointInTriangle(vt,ft,wt,gt)&&!ht.pointInTriangle(vt,wt,ft,gt)||s>m||this.reportIntersection(r,vt,n,i,t)}}}}_intersectTrimesh(t,e,s,i,n,o){const r=Ft,a=qt,l=Nt,h=Ct,c=Mt,u=Rt,d=Tt,p=Pt,y=It,m=t.indices;t.vertices;const v=this.from,f=this.to,w=this.direction;l.position.copy(s),l.quaternion.copy(e),x.vectorToLocalFrame(s,e,w,c),x.pointToLocalFrame(s,e,v,u),x.pointToLocalFrame(s,e,f,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const g=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let b=0,B=a.length;!this.result.shouldStop&&b!==B;b++){const o=a[b];t.getNormal(o,r),t.getVertex(m[3*o],ft),ft.vsub(u,h);const l=c.dot(r),d=r.dot(h)/l;if(d<0)continue;c.scale(d,vt),vt.vadd(u,vt),t.getVertex(m[3*o+1],wt),t.getVertex(m[3*o+2],gt);const v=vt.distanceSquared(u);!ht.pointInTriangle(vt,wt,ft,gt)&&!ht.pointInTriangle(vt,ft,wt,gt)||v>g||(x.vectorToWorldFrame(e,r,y),x.pointToWorldFrame(s,e,vt,p),this.reportIntersection(y,p,n,i,o))}a.length=0}reportIntersection(t,e,s,i,n){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex="undefined"!==typeof n?n:-1,this.mode){case ht.ALL:this.hasHit=!0,l.set(o,r,t,e,s,i,a),l.hasHit=!0,this.callback(l);break;case ht.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,a));break;case ht.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,i,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,i){i.vsub(e,Lt),s.vsub(e,dt),t.vsub(e,pt);const n=Lt.dot(Lt),o=Lt.dot(dt),r=Lt.dot(pt),a=dt.dot(dt),l=dt.dot(pt);let h,c;return(h=a*r-o*l)>=0&&(c=n*l-o*r)>=0&&h+c<n*a-o*o}}ht.CLOSEST=lt.CLOSEST,ht.ANY=lt.ANY,ht.ALL=lt.ALL;const ct=new c,ut=[],dt=new r,pt=new r,yt=new r,mt=new m,vt=new r,ft=new r,wt=new r,gt=new r;new r,new tt;const xt={faceList:[0]},bt=new r,Bt=new ht,At=[],Et=new r,St=new r,zt=new r,Ct=(new r,new r,new r),Ft=new r,Mt=new r,Rt=new r,Tt=new r,It=new r,Pt=new r;new c;const qt=[],Nt=new x,Lt=new r,Wt=new r;function Vt(t,e,s){s.vsub(t,Lt);const i=Lt.dot(e);e.scale(i,Wt),Wt.vadd(t,Wt);const n=s.distanceTo(Wt);return n}class jt extends Y{static checkBounds(t,e,s){let i,n;0===s?(i=t.position.x,n=e.position.x):1===s?(i=t.position.y,n=e.position.y):2===s&&(i=t.position.z,n=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,a=i+o,l=n-r;return l<a}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0;i--){if(t[i].aabb.lowerBound.x<=s.aabb.lowerBound.x)break;t[i+1]=t[i]}t[i+1]=s}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0;i--){if(t[i].aabb.lowerBound.y<=s.aabb.lowerBound.y)break;t[i+1]=t[i]}t[i+1]=s}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const s=t[e];let i;for(i=e-1;i>=0;i--){if(t[i].aabb.lowerBound.z<=s.aabb.lowerBound.z)break;t[i+1]=t[i]}t[i+1]=s}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const s=e.indexOf(t.body);-1!==s&&e.splice(s,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const i=this.axisList,n=i.length,o=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==n;r++){const t=i[r];for(a=r+1;a<n;a++){const n=i[a];if(this.needBroadphaseCollision(t,n)){if(!jt.checkBounds(t,n,o))break;this.intersectionTest(t,n,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let i=0;i!==s;i++){const e=t[i];e.aabbNeedsUpdate&&e.updateAABB()}0===e?jt.insertionSortX(t):1===e?jt.insertionSortY(t):2===e&&jt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,i=0,n=0,o=0;const r=this.axisList,a=r.length,l=1/a;for(let d=0;d!==a;d++){const a=r[d],l=a.position.x;t+=l,e+=l*l;const h=a.position.y;s+=h,i+=h*h;const c=a.position.z;n+=c,o+=c*c}const h=e-t*t*l,c=i-s*s*l,u=o-n*n*l;this.axisIndex=h>c?h>u?0:2:c>u?1:2}aabbQuery(t,e,s){void 0===s&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const i=this.axisIndex;let n="x";1===i&&(n="y"),2===i&&(n="z");const o=this.axisList;e.lowerBound[n],e.upperBound[n];for(let r=0;r<o.length;r++){const t=o[r];t.aabbNeedsUpdate&&t.updateAABB(),t.aabb.overlaps(e)&&s.push(t)}return s}}class Ot{static defaults(t,e){void 0===t&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class kt{constructor(t,e,s){void 0===s&&(s={}),s=Ot.defaults(s,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=kt.idCounter++,this.collideConnected=s.collideConnected,s.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}kt.idCounter=0;class _t{constructor(){this.spatial=new r,this.rotational=new r}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Ht{constructor(t,e,s,i){void 0===s&&(s=-1e6),void 0===i&&(i=1e6),this.id=Ht.idCounter++,this.minForce=s,this.maxForce=i,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new _t,this.jacobianElementB=new _t,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const i=e,n=t,o=s;this.a=4/(o*(1+4*i)),this.b=4*i/(1+4*i),this.eps=4/(o*o*n*(1+4*i))}computeB(t,e,s){const i=this.computeGW(),n=this.computeGq(),o=this.computeGiMf();return-n*t-i*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.position,o=i.position;return t.spatial.dot(n)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.velocity,o=i.velocity,r=s.angularVelocity,a=i.angularVelocity;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.vlambda,o=i.vlambda,r=s.wlambda,a=i.wlambda;return t.multiplyVectors(n,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.force,o=s.torque,r=i.force,a=i.torque,l=s.invMassSolve,h=i.invMassSolve;return n.scale(l,Dt),r.scale(h,Ut),s.invInertiaWorldSolve.vmult(o,Yt),i.invInertiaWorldSolve.vmult(a,Gt),t.multiplyVectors(Dt,Yt)+e.multiplyVectors(Ut,Gt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,i=this.bj,n=s.invMassSolve,o=i.invMassSolve,r=s.invInertiaWorldSolve,a=i.invInertiaWorldSolve;let l=n+o;return r.vmult(t.rotational,Xt),l+=Xt.dot(t.rotational),a.vmult(e.rotational,Xt),l+=Xt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,i=this.bi,n=this.bj,o=$t;i.vlambda.addScaledVector(i.invMassSolve*t,e.spatial,i.vlambda),n.vlambda.addScaledVector(n.invMassSolve*t,s.spatial,n.vlambda),i.invInertiaWorldSolve.vmult(e.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda),n.invInertiaWorldSolve.vmult(s.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Ht.idCounter=0;const Dt=new r,Ut=new r,Yt=new r,Gt=new r,Xt=new r,$t=new r;class Kt extends Ht{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new r,this.rj=new r,this.ni=new r}computeB(t){const e=this.a,s=this.b,i=this.bi,n=this.bj,o=this.ri,r=this.rj,a=Zt,l=Qt,h=i.velocity,c=i.angularVelocity;i.force,i.torque;const u=n.velocity,d=n.angularVelocity;n.force,n.torque;const p=Jt,y=this.jacobianElementA,m=this.jacobianElementB,v=this.ni;o.cross(v,a),r.cross(v,l),v.negate(y.spatial),a.negate(y.rotational),m.spatial.copy(v),m.rotational.copy(l),p.copy(n.position),p.vadd(r,p),p.vsub(i.position,p),p.vsub(o,p);const f=v.dot(p),w=this.restitution+1,g=w*u.dot(v)-w*h.dot(v)+d.dot(l)-c.dot(a),x=this.computeGiMf(),b=-f*e-g*s-t*x;return b}getImpactVelocityAlongNormal(){const t=te,e=ee,s=se,i=ie,n=ne;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,i),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(i,e),t.vsub(e,n),this.ni.dot(n)}}const Zt=new r,Qt=new r,Jt=new r,te=new r,ee=new r,se=new r,ie=new r,ne=new r;class oe extends kt{constructor(t,e,s,i,n){void 0===e&&(e=new r),void 0===i&&(i=new r),void 0===n&&(n=1e6),super(t,s),this.pivotA=e.clone(),this.pivotB=i.clone();const o=this.equationX=new Kt(t,s),a=this.equationY=new Kt(t,s),l=this.equationZ=new Kt(t,s);this.equations.push(o,a,l),o.minForce=a.minForce=l.minForce=-n,o.maxForce=a.maxForce=l.maxForce=n,o.ni.set(1,0,0),a.ni.set(0,1,0),l.ni.set(0,0,1)}update(){const t=this.bodyA,e=this.bodyB,s=this.equationX,i=this.equationY,n=this.equationZ;t.quaternion.vmult(this.pivotA,s.ri),e.quaternion.vmult(this.pivotB,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj)}}class re extends Ht{constructor(t,e,s){void 0===s&&(s={});const i="undefined"!==typeof s.maxForce?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new r(1,0,0),this.axisB=s.axisB?s.axisB.clone():new r(0,1,0),this.angle="undefined"!==typeof s.angle?s.angle:0}computeB(t){const e=this.a,s=this.b,i=this.axisA,n=this.axisB,o=ae,r=le,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(n,o),n.cross(i,r),a.rotational.copy(r),l.rotational.copy(o);const h=Math.cos(this.angle)-i.dot(n),c=this.computeGW(),u=this.computeGiMf(),d=-h*e-c*s-t*u;return d}}const ae=new r,le=new r;class he extends Ht{constructor(t,e,s){void 0===s&&(s={});const i="undefined"!==typeof s.maxForce?s.maxForce:1e6;super(t,e,-i,i),this.axisA=s.axisA?s.axisA.clone():new r(1,0,0),this.axisB=s.axisB?s.axisB.clone():new r(0,1,0),this.maxAngle=Math.PI/2}computeB(t){const e=this.a,s=this.b,i=this.axisA,n=this.axisB,o=ce,r=ue,a=this.jacobianElementA,l=this.jacobianElementB;i.cross(n,o),n.cross(i,r),a.rotational.copy(r),l.rotational.copy(o);const h=Math.cos(this.maxAngle)-i.dot(n),c=this.computeGW(),u=this.computeGiMf(),d=-h*e-c*s-t*u;return d}}const ce=new r,ue=new r;class de extends oe{constructor(t,e,s){void 0===s&&(s={});const i="undefined"!==typeof s.maxForce?s.maxForce:1e6,n=s.pivotA?s.pivotA.clone():new r,o=s.pivotB?s.pivotB.clone():new r;super(t,n,e,o,i),this.axisA=s.axisA?s.axisA.clone():new r,this.axisB=s.axisB?s.axisB.clone():new r,this.collideConnected=!!s.collideConnected,this.angle="undefined"!==typeof s.angle?s.angle:0;const a=this.coneEquation=new re(t,e,s),l=this.twistEquation=new he(t,e,s);this.twistAngle="undefined"!==typeof s.twistAngle?s.twistAngle:0,a.maxForce=0,a.minForce=-i,l.maxForce=0,l.minForce=-i,this.equations.push(a,l)}update(){const t=this.bodyA,e=this.bodyB,s=this.coneEquation,i=this.twistEquation;super.update(),t.vectorToWorldFrame(this.axisA,s.axisA),e.vectorToWorldFrame(this.axisB,s.axisB),this.axisA.tangents(i.axisA,i.axisA),t.vectorToWorldFrame(i.axisA,i.axisA),this.axisB.tangents(i.axisB,i.axisB),e.vectorToWorldFrame(i.axisB,i.axisB),s.angle=this.angle,i.maxAngle=this.twistAngle}}new r,new r;class pe extends kt{constructor(t,e,s,i){void 0===i&&(i=1e6),super(t,e),"undefined"===typeof s&&(s=t.position.distanceTo(e.position)),this.distance=s;const n=this.distanceEquation=new Kt(t,e);this.equations.push(n),n.minForce=-i,n.maxForce=i}update(){const t=this.bodyA,e=this.bodyB,s=this.distanceEquation,i=.5*this.distance,n=s.ni;e.position.vsub(t.position,n),n.normalize(),n.scale(i,s.ri),n.scale(-i,s.rj)}}class ye extends oe{constructor(t,e,s){void 0===s&&(s={});const i="undefined"!==typeof s.maxForce?s.maxForce:1e6,n=new r,o=new r,a=new r;t.position.vadd(e.position,a),a.scale(.5,a),e.pointToLocalFrame(a,o),t.pointToLocalFrame(a,n),super(t,n,e,o,i),this.xA=t.vectorToLocalFrame(r.UNIT_X),this.xB=e.vectorToLocalFrame(r.UNIT_X),this.yA=t.vectorToLocalFrame(r.UNIT_Y),this.yB=e.vectorToLocalFrame(r.UNIT_Y),this.zA=t.vectorToLocalFrame(r.UNIT_Z),this.zB=e.vectorToLocalFrame(r.UNIT_Z);const l=this.rotationalEquation1=new he(t,e,s),h=this.rotationalEquation2=new he(t,e,s),c=this.rotationalEquation3=new he(t,e,s);this.equations.push(l,h,c)}update(){const t=this.bodyA,e=this.bodyB;this.motorEquation;const s=this.rotationalEquation1,i=this.rotationalEquation2,n=this.rotationalEquation3;super.update(),t.vectorToWorldFrame(this.xA,s.axisA),e.vectorToWorldFrame(this.yB,s.axisB),t.vectorToWorldFrame(this.yA,i.axisA),e.vectorToWorldFrame(this.zB,i.axisB),t.vectorToWorldFrame(this.zA,n.axisA),e.vectorToWorldFrame(this.xB,n.axisB)}}new r,new r;class me extends Ht{constructor(t,e,s){void 0===s&&(s=1e6),super(t,e,-s,s),this.axisA=new r,this.axisB=new r,this.targetVelocity=0}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.axisA,i=this.axisB,n=this.jacobianElementA,o=this.jacobianElementB;n.rotational.copy(s),i.negate(o.rotational);const r=this.computeGW()-this.targetVelocity,a=this.computeGiMf(),l=-r*e-t*a;return l}}class ve extends oe{constructor(t,e,s){void 0===s&&(s={});const i="undefined"!==typeof s.maxForce?s.maxForce:1e6,n=s.pivotA?s.pivotA.clone():new r,o=s.pivotB?s.pivotB.clone():new r;super(t,n,e,o,i);const a=this.axisA=s.axisA?s.axisA.clone():new r(1,0,0);a.normalize();const l=this.axisB=s.axisB?s.axisB.clone():new r(1,0,0);l.normalize(),this.collideConnected=!!s.collideConnected;const h=this.rotationalEquation1=new he(t,e,s),c=this.rotationalEquation2=new he(t,e,s),u=this.motorEquation=new me(t,e,i);u.enabled=!1,this.equations.push(h,c,u)}enableMotor(){this.motorEquation.enabled=!0}disableMotor(){this.motorEquation.enabled=!1}setMotorSpeed(t){this.motorEquation.targetVelocity=t}setMotorMaxForce(t){this.motorEquation.maxForce=t,this.motorEquation.minForce=-t}update(){const t=this.bodyA,e=this.bodyB,s=this.motorEquation,i=this.rotationalEquation1,n=this.rotationalEquation2,o=fe,r=we,a=this.axisA,l=this.axisB;super.update(),t.quaternion.vmult(a,o),e.quaternion.vmult(l,r),o.tangents(i.axisA,n.axisA),i.axisB.copy(r),n.axisB.copy(r),this.motorEquation.enabled&&(t.quaternion.vmult(this.axisA,s.axisA),e.quaternion.vmult(this.axisB,s.axisB))}}const fe=new r,we=new r;class ge extends Ht{constructor(t,e,s){super(t,e,-s,s),this.ri=new r,this.rj=new r,this.t=new r}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,i=this.rj,n=xe,o=be,r=this.t;s.cross(r,n),i.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),n.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const h=this.computeGW(),c=this.computeGiMf(),u=-h*e-t*c;return u}}const xe=new r,be=new r;class Be{constructor(t,e,s){s=Ot.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=Be.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}Be.idCounter=0;class Ae{constructor(t){void 0===t&&(t={});let e="";"string"===typeof t&&(e=t,t={}),this.name=e,this.id=Ae.idCounter++,this.friction="undefined"!==typeof t.friction?t.friction:-1,this.restitution="undefined"!==typeof t.restitution?t.restitution:-1}}Ae.idCounter=0;class Ee{constructor(t,e,s){void 0===s&&(s={}),this.restLength="number"===typeof s.restLength?s.restLength:1,this.stiffness=s.stiffness||100,this.damping=s.damping||1,this.bodyA=t,this.bodyB=e,this.localAnchorA=new r,this.localAnchorB=new r,s.localAnchorA&&this.localAnchorA.copy(s.localAnchorA),s.localAnchorB&&this.localAnchorB.copy(s.localAnchorB),s.worldAnchorA&&this.setWorldAnchorA(s.worldAnchorA),s.worldAnchorB&&this.setWorldAnchorB(s.worldAnchorB)}setWorldAnchorA(t){this.bodyA.pointToLocalFrame(t,this.localAnchorA)}setWorldAnchorB(t){this.bodyB.pointToLocalFrame(t,this.localAnchorB)}getWorldAnchorA(t){this.bodyA.pointToWorldFrame(this.localAnchorA,t)}getWorldAnchorB(t){this.bodyB.pointToWorldFrame(this.localAnchorB,t)}applyForce(){const t=this.stiffness,e=this.damping,s=this.restLength,i=this.bodyA,n=this.bodyB,o=Se,r=ze,a=Ce,l=Fe,h=Ne,c=Me,u=Re,d=Te,p=Ie,y=Pe,m=qe;this.getWorldAnchorA(c),this.getWorldAnchorB(u),c.vsub(i.position,d),u.vsub(n.position,p),u.vsub(c,o);const v=o.length();r.copy(o),r.normalize(),n.velocity.vsub(i.velocity,a),n.angularVelocity.cross(p,h),a.vadd(h,a),i.angularVelocity.cross(d,h),a.vsub(h,a),r.scale(-t*(v-s)-e*a.dot(r),l),i.force.vsub(l,i.force),n.force.vadd(l,n.force),d.cross(l,y),p.cross(l,m),i.torque.vsub(y,i.torque),n.torque.vadd(m,n.torque)}}const Se=new r,ze=new r,Ce=new r,Fe=new r,Me=new r,Re=new r,Te=new r,Ie=new r,Pe=new r,qe=new r,Ne=new r;class Le{constructor(t){void 0===t&&(t={}),t=Ot.defaults(t,{chassisConnectionPointLocal:new r,chassisConnectionPointWorld:new r,directionLocal:new r,directionWorld:new r,axleLocal:new r,axleWorld:new r,suspensionRestLength:1,suspensionMaxLength:2,radius:1,suspensionStiffness:100,dampingCompression:10,dampingRelaxation:10,frictionSlip:10.5,forwardAcceleration:1,sideAcceleration:1,steering:0,rotation:0,deltaRotation:0,rollInfluence:.01,maxSuspensionForce:Number.MAX_VALUE,isFrontWheel:!0,clippedInvContactDotSuspension:1,suspensionRelativeVelocity:0,suspensionForce:0,slipInfo:0,skidInfo:0,suspensionLength:0,maxSuspensionTravel:1,useCustomSlidingRotationalSpeed:!1,customSlidingRotationalSpeed:-.1}),this.maxSuspensionTravel=t.maxSuspensionTravel,this.customSlidingRotationalSpeed=t.customSlidingRotationalSpeed,this.useCustomSlidingRotationalSpeed=t.useCustomSlidingRotationalSpeed,this.sliding=!1,this.chassisConnectionPointLocal=t.chassisConnectionPointLocal.clone(),this.chassisConnectionPointWorld=t.chassisConnectionPointWorld.clone(),this.directionLocal=t.directionLocal.clone(),this.directionWorld=t.directionWorld.clone(),this.axleLocal=t.axleLocal.clone(),this.axleWorld=t.axleWorld.clone(),this.suspensionRestLength=t.suspensionRestLength,this.suspensionMaxLength=t.suspensionMaxLength,this.radius=t.radius,this.suspensionStiffness=t.suspensionStiffness,this.dampingCompression=t.dampingCompression,this.dampingRelaxation=t.dampingRelaxation,this.frictionSlip=t.frictionSlip,this.forwardAcceleration=t.forwardAcceleration,this.sideAcceleration=t.sideAcceleration,this.steering=0,this.rotation=0,this.deltaRotation=0,this.rollInfluence=t.rollInfluence,this.maxSuspensionForce=t.maxSuspensionForce,this.engineForce=0,this.brake=0,this.isFrontWheel=t.isFrontWheel,this.clippedInvContactDotSuspension=1,this.suspensionRelativeVelocity=0,this.suspensionForce=0,this.slipInfo=0,this.skidInfo=0,this.suspensionLength=0,this.sideImpulse=0,this.forwardImpulse=0,this.raycastResult=new tt,this.worldTransform=new x,this.isInContact=!1}updateWheel(t){const e=this.raycastResult;if(this.isInContact){const s=e.hitNormalWorld.dot(e.directionWorld);e.hitPointWorld.vsub(t.position,Ve),t.getVelocityAtWorldPoint(Ve,We);const i=e.hitNormalWorld.dot(We);if(s>=-.1)this.suspensionRelativeVelocity=0,this.clippedInvContactDotSuspension=10;else{const t=-1/s;this.suspensionRelativeVelocity=i*t,this.clippedInvContactDotSuspension=t}}else e.suspensionLength=this.suspensionRestLength,this.suspensionRelativeVelocity=0,e.directionWorld.scale(-1,e.hitNormalWorld),this.clippedInvContactDotSuspension=1}}const We=new r,Ve=new r;class je{constructor(t){this.chassisBody=t.chassisBody,this.wheelInfos=[],this.sliding=!1,this.world=null,this.indexRightAxis="undefined"!==typeof t.indexRightAxis?t.indexRightAxis:2,this.indexForwardAxis="undefined"!==typeof t.indexForwardAxis?t.indexForwardAxis:0,this.indexUpAxis="undefined"!==typeof t.indexUpAxis?t.indexUpAxis:1,this.constraints=[],this.preStepCallback=()=>{},this.currentVehicleSpeedKmHour=0,this.numWheelsOnGround=0}addWheel(t){void 0===t&&(t={});const e=new Le(t),s=this.wheelInfos.length;return this.wheelInfos.push(e),s}setSteeringValue(t,e){const s=this.wheelInfos[e];s.steering=t}applyEngineForce(t,e){this.wheelInfos[e].engineForce=t}setBrake(t,e){this.wheelInfos[e].brake=t}addToWorld(t){t.addBody(this.chassisBody);const e=this;this.preStepCallback=()=>{e.updateVehicle(t.dt)},t.addEventListener("preStep",this.preStepCallback),this.world=t}getVehicleAxisWorld(t,e){e.set(0===t?1:0,1===t?1:0,2===t?1:0),this.chassisBody.vectorToWorldFrame(e,e)}updateVehicle(t){const e=this.wheelInfos,s=e.length,i=this.chassisBody;for(let r=0;r<s;r++)this.updateWheelTransform(r);this.currentVehicleSpeedKmHour=3.6*i.velocity.length();const n=new r;this.getVehicleAxisWorld(this.indexForwardAxis,n),n.dot(i.velocity)<0&&(this.currentVehicleSpeedKmHour*=-1);for(let r=0;r<s;r++)this.castRay(e[r]);this.updateSuspension(t);const o=new r,a=new r;for(let r=0;r<s;r++){const s=e[r];let n=s.suspensionForce;n>s.maxSuspensionForce&&(n=s.maxSuspensionForce),s.raycastResult.hitNormalWorld.scale(n*t,o),s.raycastResult.hitPointWorld.vsub(i.position,a),i.applyImpulse(o,a)}this.updateFriction(t);const l=new r,h=new r,c=new r;for(let r=0;r<s;r++){const s=e[r];i.getVelocityAtWorldPoint(s.chassisConnectionPointWorld,c);let n=1;switch(this.indexUpAxis){case 1:n=-1;break}if(s.isInContact){this.getVehicleAxisWorld(this.indexForwardAxis,h);const e=h.dot(s.raycastResult.hitNormalWorld);s.raycastResult.hitNormalWorld.scale(e,l),h.vsub(l,h);const i=h.dot(c);s.deltaRotation=n*i*t/s.radius}!s.sliding&&s.isInContact||0===s.engineForce||!s.useCustomSlidingRotationalSpeed||(s.deltaRotation=(s.engineForce>0?1:-1)*s.customSlidingRotationalSpeed*t),Math.abs(s.brake)>Math.abs(s.engineForce)&&(s.deltaRotation=0),s.rotation+=s.deltaRotation,s.deltaRotation*=.99}}updateSuspension(t){const e=this.chassisBody,s=e.mass,i=this.wheelInfos,n=i.length;for(let o=0;o<n;o++){const t=i[o];if(t.isInContact){let e;const i=t.suspensionRestLength,n=t.suspensionLength,o=i-n;e=t.suspensionStiffness*o*t.clippedInvContactDotSuspension;const r=t.suspensionRelativeVelocity;let a;a=r<0?t.dampingCompression:t.dampingRelaxation,e-=a*r,t.suspensionForce=e*s,t.suspensionForce<0&&(t.suspensionForce=0)}else t.suspensionForce=0}}removeFromWorld(t){this.constraints,t.removeBody(this.chassisBody),t.removeEventListener("preStep",this.preStepCallback),this.world=null}castRay(t){const e=He,s=De;this.updateWheelTransformWorld(t);const i=this.chassisBody;let n=-1;const o=t.suspensionRestLength+t.radius;t.directionWorld.scale(o,e);const a=t.chassisConnectionPointWorld;a.vadd(e,s);const l=t.raycastResult;l.reset();const h=i.collisionResponse;i.collisionResponse=!1,this.world.rayTest(a,s,l),i.collisionResponse=h;const c=l.body;if(t.raycastResult.groundObject=0,c){n=l.distance,t.raycastResult.hitNormalWorld=l.hitNormalWorld,t.isInContact=!0;const e=l.distance;t.suspensionLength=e-t.radius;const s=t.suspensionRestLength-t.maxSuspensionTravel,o=t.suspensionRestLength+t.maxSuspensionTravel;t.suspensionLength<s&&(t.suspensionLength=s),t.suspensionLength>o&&(t.suspensionLength=o,t.raycastResult.reset());const a=t.raycastResult.hitNormalWorld.dot(t.directionWorld),h=new r;i.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld,h);const c=t.raycastResult.hitNormalWorld.dot(h);if(a>=-.1)t.suspensionRelativeVelocity=0,t.clippedInvContactDotSuspension=10;else{const e=-1/a;t.suspensionRelativeVelocity=c*e,t.clippedInvContactDotSuspension=e}}else t.suspensionLength=t.suspensionRestLength+0*t.maxSuspensionTravel,t.suspensionRelativeVelocity=0,t.directionWorld.scale(-1,t.raycastResult.hitNormalWorld),t.clippedInvContactDotSuspension=1;return n}updateWheelTransformWorld(t){t.isInContact=!1;const e=this.chassisBody;e.pointToWorldFrame(t.chassisConnectionPointLocal,t.chassisConnectionPointWorld),e.vectorToWorldFrame(t.directionLocal,t.directionWorld),e.vectorToWorldFrame(t.axleLocal,t.axleWorld)}updateWheelTransform(t){const e=Oe,s=ke,i=_e,n=this.wheelInfos[t];this.updateWheelTransformWorld(n),n.directionLocal.scale(-1,e),s.copy(n.axleLocal),e.cross(s,i),i.normalize(),s.normalize();const o=n.steering,r=new m;r.setFromAxisAngle(e,o);const a=new m;a.setFromAxisAngle(s,n.rotation);const l=n.worldTransform.quaternion;this.chassisBody.quaternion.mult(r,l),l.mult(a,l),l.normalize();const h=n.worldTransform.position;h.copy(n.directionWorld),h.scale(n.suspensionLength,h),h.vadd(n.chassisConnectionPointWorld,h)}getWheelTransformWorld(t){return this.wheelInfos[t].worldTransform}updateFriction(t){const e=Ye,s=this.wheelInfos,i=s.length,n=this.chassisBody,o=Xe,a=Ge;this.numWheelsOnGround=0;for(let c=0;c<i;c++){const t=s[c],e=t.raycastResult.body;e&&this.numWheelsOnGround++,t.sideImpulse=0,t.forwardImpulse=0,o[c]||(o[c]=new r),a[c]||(a[c]=new r)}for(let r=0;r<i;r++){const t=s[r],i=t.raycastResult.body;if(i){const s=a[r],l=this.getWheelTransformWorld(r);l.vectorToWorldFrame(Ue[this.indexRightAxis],s);const h=t.raycastResult.hitNormalWorld,c=s.dot(h);h.scale(c,e),s.vsub(e,s),s.normalize(),h.cross(s,o[r]),o[r].normalize(),t.sideImpulse=ls(n,t.raycastResult.hitPointWorld,i,t.raycastResult.hitPointWorld,s),t.sideImpulse*=$e}}const l=1,h=.5;this.sliding=!1;for(let r=0;r<i;r++){const e=s[r],i=e.raycastResult.body;let a=0;if(e.slipInfo=1,i){const s=0,l=e.brake?e.brake:s;a=Je(n,i,e.raycastResult.hitPointWorld,o[r],l),a+=e.engineForce*t;const h=l/a;e.slipInfo*=h}if(e.forwardImpulse=0,e.skidInfo=1,i){e.skidInfo=1;const s=e.suspensionForce*t*e.frictionSlip,i=s,n=s*i;e.forwardImpulse=a;const o=e.forwardImpulse*h/e.forwardAcceleration,r=e.sideImpulse*l/e.sideAcceleration,c=o*o+r*r;if(e.sliding=!1,c>n){this.sliding=!0,e.sliding=!0;const t=s/Math.sqrt(c);e.skidInfo*=t}}}if(this.sliding)for(let r=0;r<i;r++){const t=s[r];0!==t.sideImpulse&&t.skidInfo<1&&(t.forwardImpulse*=t.skidInfo,t.sideImpulse*=t.skidInfo)}for(let c=0;c<i;c++){const t=s[c],e=new r;if(t.raycastResult.hitPointWorld.vsub(n.position,e),0!==t.forwardImpulse){const s=new r;o[c].scale(t.forwardImpulse,s),n.applyImpulse(s,e)}if(0!==t.sideImpulse){const s=t.raycastResult.body,i=new r;t.raycastResult.hitPointWorld.vsub(s.position,i);const o=new r;a[c].scale(t.sideImpulse,o),n.vectorToLocalFrame(e,e),e["xyz"[this.indexUpAxis]]*=t.rollInfluence,n.vectorToWorldFrame(e,e),n.applyImpulse(o,e),o.scale(-1,o),s.applyImpulse(o,i)}}}}new r,new r,new r;const Oe=new r,ke=new r,_e=new r;new ht,new r;const He=new r,De=new r,Ue=[new r(1,0,0),new r(0,1,0),new r(0,0,1)],Ye=new r,Ge=[],Xe=[],$e=1,Ke=new r,Ze=new r,Qe=new r;function Je(t,e,s,i,n){let o=0;const r=s,a=Ke,l=Ze,h=Qe;t.getVelocityAtWorldPoint(r,a),e.getVelocityAtWorldPoint(r,l),a.vsub(l,h);const c=i.dot(h),u=ns(t,s,i),d=ns(e,s,i),p=1,y=p/(u+d);return o=-c*y,n<o&&(o=n),o<-n&&(o=-n),o}const ts=new r,es=new r,ss=new r,is=new r;function ns(t,e,s){const i=ts,n=es,o=ss,r=is;return e.vsub(t.position,i),i.cross(s,n),t.invInertiaWorld.vmult(n,r),r.cross(i,o),t.invMass+s.dot(o)}const os=new r,rs=new r,as=new r;function ls(t,e,s,i,n){const o=n.lengthSquared();if(o>1.1)return 0;const r=os,a=rs,l=as;t.getVelocityAtWorldPoint(e,r),s.getVelocityAtWorldPoint(i,a),r.vsub(a,l);const h=n.dot(l),c=.2,u=1/(t.invMass+s.invMass),d=-c*h*u;return d}class hs extends g{constructor(t){if(super({type:g.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new r);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,i){const n=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const e=o[r];s[e]=t[e]-n,i[e]=t[e]+n}}}class cs{constructor(t){void 0===t&&(t={}),this.wheelBodies=[],this.coordinateSystem="undefined"!==typeof t.coordinateSystem?t.coordinateSystem.clone():new r(1,2,3),t.chassisBody?this.chassisBody=t.chassisBody:this.chassisBody=new I({mass:1,shape:new C(new r(5,.5,2))}),this.constraints=[],this.wheelAxes=[],this.wheelForces=[]}addWheel(t){let e;void 0===t&&(t={}),e=t.body?t.body:new I({mass:1,shape:new hs(1.2)}),this.wheelBodies.push(e),this.wheelForces.push(0);const s="undefined"!==typeof t.position?t.position.clone():new r,i=new r;this.chassisBody.pointToWorldFrame(s,i),e.position.set(i.x,i.y,i.z);const n="undefined"!==typeof t.axis?t.axis.clone():new r(0,0,1);this.wheelAxes.push(n);const o=new ve(this.chassisBody,e,{pivotA:s,axisA:n,pivotB:r.ZERO,axisB:n,collideConnected:!1});return this.constraints.push(o),this.wheelBodies.length-1}setSteeringValue(t,e){const s=this.wheelAxes[e],i=Math.cos(t),n=Math.sin(t),o=s.x,r=s.z;this.constraints[e].axisA.set(-i*o+n*r,0,n*o+i*r)}setMotorSpeed(t,e){const s=this.constraints[e];s.enableMotor(),s.motorTargetVelocity=t}disableMotor(t){const e=this.constraints[t];e.disableMotor()}setWheelForce(t,e){this.wheelForces[e]=t}applyWheelForce(t,e){const s=this.wheelAxes[e],i=this.wheelBodies[e],n=i.torque;s.scale(t,us),i.vectorToWorldFrame(us,us),n.vadd(us,n)}addToWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let i=0;i<s.length;i++)t.addBody(s[i]);for(let i=0;i<e.length;i++)t.addConstraint(e[i]);t.addEventListener("preStep",this._update.bind(this))}_update(){const t=this.wheelForces;for(let e=0;e<t.length;e++)this.applyWheelForce(t[e],e)}removeFromWorld(t){const e=this.constraints,s=this.wheelBodies.concat([this.chassisBody]);for(let i=0;i<s.length;i++)t.removeBody(s[i]);for(let i=0;i<e.length;i++)t.removeConstraint(e[i])}getWheelSpeed(t){const e=this.wheelAxes[t],s=this.wheelBodies[t],i=s.angularVelocity;return this.chassisBody.vectorToWorldFrame(e,ds),i.dot(ds)}}const us=new r,ds=new r;class ps{constructor(){this.particles=[],this.density=1,this.smoothingRadius=1,this.speedOfSound=1,this.viscosity=.01,this.eps=1e-6,this.pressures=[],this.densities=[],this.neighbors=[]}add(t){this.particles.push(t),this.neighbors.length<this.particles.length&&this.neighbors.push([])}remove(t){const e=this.particles.indexOf(t);-1!==e&&(this.particles.splice(e,1),this.neighbors.length>this.particles.length&&this.neighbors.pop())}getNeighbors(t,e){const s=this.particles.length,i=t.id,n=this.smoothingRadius*this.smoothingRadius,o=ys;for(let r=0;r!==s;r++){const s=this.particles[r];s.position.vsub(t.position,o),i!==s.id&&o.lengthSquared()<n&&e.push(s)}}update(){const t=this.particles.length,e=ms,s=this.speedOfSound,i=this.eps;for(let h=0;h!==t;h++){const t=this.particles[h],i=this.neighbors[h];i.length=0,this.getNeighbors(t,i),i.push(this.particles[h]);const n=i.length;let o=0;for(let s=0;s!==n;s++){t.position.vsub(i[s].position,e);const n=e.length(),r=this.w(n);o+=i[s].mass*r}this.densities[h]=o,this.pressures[h]=s*s*(this.densities[h]-this.density)}const n=vs,o=fs,r=ws,a=gs,l=xs;for(let h=0;h!==t;h++){const t=this.particles[h];let e,s;n.set(0,0,0),o.set(0,0,0);const c=this.neighbors[h],u=c.length;for(let d=0;d!==u;d++){const u=c[d];t.position.vsub(u.position,a);const p=a.length();e=-u.mass*(this.pressures[h]/(this.densities[h]*this.densities[h]+i)+this.pressures[d]/(this.densities[d]*this.densities[d]+i)),this.gradw(a,r),r.scale(e,r),n.vadd(r,n),u.velocity.vsub(t.velocity,l),l.scale(1/(1e-4+this.densities[h]*this.densities[d])*this.viscosity*u.mass,l),s=this.nablaw(p),l.scale(s,l),o.vadd(l,o)}o.scale(t.mass,o),n.scale(t.mass,n),t.force.vadd(o,t.force),t.force.vadd(n,t.force)}}w(t){const e=this.smoothingRadius;return 315/(64*Math.PI*e**9)*(e*e-t*t)**3}gradw(t,e){const s=t.length(),i=this.smoothingRadius;t.scale(945/(32*Math.PI*i**9)*(i*i-s*s)**2,e)}nablaw(t){const e=this.smoothingRadius,s=945/(32*Math.PI*e**9)*(e*e-t*t)*(7*t*t-3*e*e);return s}}const ys=new r,ms=new r,vs=new r,fs=new r,ws=new r,gs=new r,xs=new r;class bs extends B{constructor(t,e,s,i){if(void 0===t&&(t=1),void 0===e&&(e=1),void 0===s&&(s=1),void 0===i&&(i=8),t<0)throw new Error("The cylinder radiusTop cannot be negative.");if(e<0)throw new Error("The cylinder radiusBottom cannot be negative.");const n=i,o=[],a=[],l=[],h=[],c=[],u=Math.cos,d=Math.sin;o.push(new r(-e*d(0),.5*-s,e*u(0))),h.push(0),o.push(new r(-t*d(0),.5*s,t*u(0))),c.push(1);for(let y=0;y<n;y++){const i=2*Math.PI/n*(y+1),p=2*Math.PI/n*(y+.5);y<n-1?(o.push(new r(-e*d(i),.5*-s,e*u(i))),h.push(2*y+2),o.push(new r(-t*d(i),.5*s,t*u(i))),c.push(2*y+3),l.push([2*y,2*y+1,2*y+3,2*y+2])):l.push([2*y,2*y+1,1,0]),(n%2===1||y<n/2)&&a.push(new r(-d(p),0,u(p)))}l.push(h),a.push(new r(0,1,0));const p=[];for(let r=0;r<c.length;r++)p.push(c[c.length-r-1]);l.push(p),super({vertices:o,faces:l,axes:a}),this.type=g.types.CYLINDER,this.radiusTop=t,this.radiusBottom=e,this.height=s,this.numSegments=i}}class Bs extends g{constructor(){super({type:g.types.PARTICLE})}calculateLocalInertia(t,e){return void 0===e&&(e=new r),e.set(0,0,0),e}volume(){return 0}updateBoundingSphereRadius(){this.boundingSphereRadius=0}calculateWorldAABB(t,e,s,i){s.copy(t),i.copy(t)}}class As extends g{constructor(){super({type:g.types.PLANE}),this.worldNormal=new r,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new r),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){Es.set(0,0,1),e.vmult(Es,Es);const n=Number.MAX_VALUE;s.set(-n,-n,-n),i.set(n,n,n),1===Es.x?i.x=t.x:-1===Es.x&&(s.x=t.x),1===Es.y?i.y=t.y:-1===Es.y&&(s.y=t.y),1===Es.z?i.z=t.z:-1===Es.z&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const Es=new r;class Ss extends g{constructor(t,e){void 0===e&&(e={}),e=Ot.defaults(e,{maxValue:null,minValue:null,elementSize:1}),super({type:g.types.HEIGHTFIELD}),this.data=t,this.maxValue=e.maxValue,this.minValue=e.minValue,this.elementSize=e.elementSize,null===e.minValue&&this.updateMinValue(),null===e.maxValue&&this.updateMaxValue(),this.cacheEnabled=!0,this.pillarConvex=new B,this.pillarOffset=new r,this.updateBoundingSphereRadius(),this._cachedPillars={}}update(){this._cachedPillars={}}updateMinValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const n=t[s][i];n<e&&(e=n)}this.minValue=e}updateMaxValue(){const t=this.data;let e=t[0][0];for(let s=0;s!==t.length;s++)for(let i=0;i!==t[s].length;i++){const n=t[s][i];n>e&&(e=n)}this.maxValue=e}setHeightValueAtIndex(t,e,s){const i=this.data;i[t][e]=s,this.clearCachedConvexTrianglePillar(t,e,!1),t>0&&(this.clearCachedConvexTrianglePillar(t-1,e,!0),this.clearCachedConvexTrianglePillar(t-1,e,!1)),e>0&&(this.clearCachedConvexTrianglePillar(t,e-1,!0),this.clearCachedConvexTrianglePillar(t,e-1,!1)),e>0&&t>0&&this.clearCachedConvexTrianglePillar(t-1,e-1,!0)}getRectMinMax(t,e,s,i,n){void 0===n&&(n=[]);const o=this.data;let r=this.minValue;for(let a=t;a<=s;a++)for(let t=e;t<=i;t++){const e=o[a][t];e>r&&(r=e)}n[0]=this.minValue,n[1]=r}getIndexOfPosition(t,e,s,i){const n=this.elementSize,o=this.data;let r=Math.floor(t/n),a=Math.floor(e/n);return s[0]=r,s[1]=a,i&&(r<0&&(r=0),a<0&&(a=0),r>=o.length-1&&(r=o.length-1),a>=o[0].length-1&&(a=o[0].length-1)),!(r<0||a<0||r>=o.length-1||a>=o[0].length-1)}getTriangleAt(t,e,s,i,n,o){const r=zs;this.getIndexOfPosition(t,e,r,s);let a=r[0],l=r[1];const h=this.data;s&&(a=Math.min(h.length-2,Math.max(0,a)),l=Math.min(h[0].length-2,Math.max(0,l)));const c=this.elementSize,u=(t/c-a)**2+(e/c-l)**2,d=(t/c-(a+1))**2+(e/c-(l+1))**2,p=u>d;return this.getTriangle(a,l,p,i,n,o),p}getNormalAt(t,e,s,i){const n=Ts,o=Is,r=Ps,a=qs,l=Ns;this.getTriangleAt(t,e,s,n,o,r),o.vsub(n,a),r.vsub(n,l),a.cross(l,i),i.normalize()}getAabbAtIndex(t,e,s){let{lowerBound:i,upperBound:n}=s;const o=this.data,r=this.elementSize;i.set(t*r,e*r,o[t][e]),n.set((t+1)*r,(e+1)*r,o[t+1][e+1])}getHeightAt(t,e,s){const i=this.data,n=Fs,o=Ms,r=Rs,a=zs;this.getIndexOfPosition(t,e,a,s);let l=a[0],h=a[1];s&&(l=Math.min(i.length-2,Math.max(0,l)),h=Math.min(i[0].length-2,Math.max(0,h)));const c=this.getTriangleAt(t,e,s,n,o,r);Ls(t,e,n.x,n.y,o.x,o.y,r.x,r.y,Cs);const u=Cs;return c?i[l+1][h+1]*u.x+i[l][h+1]*u.y+i[l+1][h]*u.z:i[l][h]*u.x+i[l+1][h]*u.y+i[l][h+1]*u.z}getCacheConvexTrianglePillarKey(t,e,s){return`${t}_${e}_${s?1:0}`}getCachedConvexTrianglePillar(t,e,s){return this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}setCachedConvexTrianglePillar(t,e,s,i,n){this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]={convex:i,offset:n}}clearCachedConvexTrianglePillar(t,e,s){delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(t,e,s)]}getTriangle(t,e,s,i,n,o){const r=this.data,a=this.elementSize;s?(i.set((t+1)*a,(e+1)*a,r[t+1][e+1]),n.set(t*a,(e+1)*a,r[t][e+1]),o.set((t+1)*a,e*a,r[t+1][e])):(i.set(t*a,e*a,r[t][e]),n.set((t+1)*a,e*a,r[t+1][e]),o.set(t*a,(e+1)*a,r[t][e+1]))}getConvexTrianglePillar(t,e,s){let i=this.pillarConvex,n=this.pillarOffset;if(this.cacheEnabled){const o=this.getCachedConvexTrianglePillar(t,e,s);if(o)return this.pillarConvex=o.convex,void(this.pillarOffset=o.offset);i=new B,n=new r,this.pillarConvex=i,this.pillarOffset=n}const o=this.data,a=this.elementSize,l=i.faces;i.vertices.length=6;for(let u=0;u<6;u++)i.vertices[u]||(i.vertices[u]=new r);l.length=5;for(let r=0;r<5;r++)l[r]||(l[r]=[]);const h=i.vertices,c=(Math.min(o[t][e],o[t+1][e],o[t][e+1],o[t+1][e+1])-this.minValue)/2+this.minValue;s?(n.set((t+.75)*a,(e+.75)*a,c),h[0].set(.25*a,.25*a,o[t+1][e+1]-c),h[1].set(-.75*a,.25*a,o[t][e+1]-c),h[2].set(.25*a,-.75*a,o[t+1][e]-c),h[3].set(.25*a,.25*a,-Math.abs(c)-1),h[4].set(-.75*a,.25*a,-Math.abs(c)-1),h[5].set(.25*a,-.75*a,-Math.abs(c)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=2,l[2][1]=5,l[2][2]=3,l[2][3]=0,l[3][0]=3,l[3][1]=4,l[3][2]=1,l[3][3]=0,l[4][0]=1,l[4][1]=4,l[4][2]=5,l[4][3]=2):(n.set((t+.25)*a,(e+.25)*a,c),h[0].set(-.25*a,-.25*a,o[t][e]-c),h[1].set(.75*a,-.25*a,o[t+1][e]-c),h[2].set(-.25*a,.75*a,o[t][e+1]-c),h[3].set(-.25*a,-.25*a,-Math.abs(c)-1),h[4].set(.75*a,-.25*a,-Math.abs(c)-1),h[5].set(-.25*a,.75*a,-Math.abs(c)-1),l[0][0]=0,l[0][1]=1,l[0][2]=2,l[1][0]=5,l[1][1]=4,l[1][2]=3,l[2][0]=0,l[2][1]=2,l[2][2]=5,l[2][3]=3,l[3][0]=1,l[3][1]=0,l[3][2]=3,l[3][3]=4,l[4][0]=4,l[4][1]=5,l[4][2]=2,l[4][3]=1),i.computeNormals(),i.computeEdges(),i.updateBoundingSphereRadius(),this.setCachedConvexTrianglePillar(t,e,s,i,n)}calculateLocalInertia(t,e){return void 0===e&&(e=new r),e.set(0,0,0),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,i){s.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),i.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)}updateBoundingSphereRadius(){const t=this.data,e=this.elementSize;this.boundingSphereRadius=new r(t.length*e,t[0].length*e,Math.max(Math.abs(this.maxValue),Math.abs(this.minValue))).length()}setHeightsFromImage(t,e){const{x:s,z:i,y:n}=e,o=document.createElement("canvas");o.width=t.width,o.height=t.height;const r=o.getContext("2d");r.drawImage(t,0,0);const a=r.getImageData(0,0,t.width,t.height),l=this.data;l.length=0,this.elementSize=Math.abs(s)/a.width;for(let h=0;h<a.height;h++){const t=[];for(let e=0;e<a.width;e++){const n=a.data[4*(h*a.height+e)],o=a.data[4*(h*a.height+e)+1],r=a.data[4*(h*a.height+e)+2],l=(n+o+r)/4/255*i;s<0?t.push(l):t.unshift(l)}n<0?l.unshift(t):l.push(t)}this.updateMaxValue(),this.updateMinValue(),this.update()}}const zs=[],Cs=new r,Fs=new r,Ms=new r,Rs=new r,Ts=new r,Is=new r,Ps=new r,qs=new r,Ns=new r;function Ls(t,e,s,i,n,o,r,a,l){l.x=((o-a)*(t-r)+(r-n)*(e-a))/((o-a)*(s-r)+(r-n)*(i-a)),l.y=((a-i)*(t-r)+(s-r)*(e-a))/((o-a)*(s-r)+(r-n)*(i-a)),l.z=1-l.x-l.y}class Ws{constructor(t){void 0===t&&(t={}),this.root=t.root||null,this.aabb=t.aabb?t.aabb.clone():new c,this.data=[],this.children=[]}reset(){this.children.length=this.data.length=0}insert(t,e,s){void 0===s&&(s=0);const i=this.data;if(!this.aabb.contains(t))return!1;const n=this.children,o=this.maxDepth||this.root.maxDepth;if(s<o){let i=!1;n.length||(this.subdivide(),i=!0);for(let o=0;8!==o;o++)if(n[o].insert(t,e,s+1))return!0;i&&(n.length=0)}return i.push(e),!0}subdivide(){const t=this.aabb,e=t.lowerBound,s=t.upperBound,i=this.children;i.push(new Ws({aabb:new c({lowerBound:new r(0,0,0)})}),new Ws({aabb:new c({lowerBound:new r(1,0,0)})}),new Ws({aabb:new c({lowerBound:new r(1,1,0)})}),new Ws({aabb:new c({lowerBound:new r(1,1,1)})}),new Ws({aabb:new c({lowerBound:new r(0,1,1)})}),new Ws({aabb:new c({lowerBound:new r(0,0,1)})}),new Ws({aabb:new c({lowerBound:new r(1,0,1)})}),new Ws({aabb:new c({lowerBound:new r(0,1,0)})})),s.vsub(e,js),js.scale(.5,js);const n=this.root||this;for(let o=0;8!==o;o++){const t=i[o];t.root=n;const s=t.aabb.lowerBound;s.x*=js.x,s.y*=js.y,s.z*=js.z,s.vadd(e,s),s.vadd(js,t.aabb.upperBound)}}aabbQuery(t,e){this.data,this.children;const s=[this];while(s.length){const i=s.pop();i.aabb.overlaps(t)&&Array.prototype.push.apply(e,i.data),Array.prototype.push.apply(s,i.children)}return e}rayQuery(t,e,s){return t.getAABB(Os),Os.toLocalFrame(e,Os),this.aabbQuery(Os,s),s}removeEmptyNodes(){for(let t=this.children.length-1;t>=0;t--)this.children[t].removeEmptyNodes(),this.children[t].children.length||this.children[t].data.length||this.children.splice(t,1)}}class Vs extends Ws{constructor(t,e){void 0===e&&(e={}),super({root:null,aabb:t}),this.maxDepth="undefined"!==typeof e.maxDepth?e.maxDepth:8}}const js=new r,Os=new c;class ks extends g{constructor(t,e){super({type:g.types.TRIMESH}),this.vertices=new Float32Array(t),this.indices=new Int16Array(e),this.normals=new Float32Array(e.length),this.aabb=new c,this.edges=null,this.scale=new r(1,1,1),this.tree=new Vs,this.updateEdges(),this.updateNormals(),this.updateAABB(),this.updateBoundingSphereRadius(),this.updateTree()}updateTree(){const t=this.tree;t.reset(),t.aabb.copy(this.aabb);const e=this.scale;t.aabb.lowerBound.x*=1/e.x,t.aabb.lowerBound.y*=1/e.y,t.aabb.lowerBound.z*=1/e.z,t.aabb.upperBound.x*=1/e.x,t.aabb.upperBound.y*=1/e.y,t.aabb.upperBound.z*=1/e.z;const s=new c,i=new r,n=new r,o=new r,a=[i,n,o];for(let r=0;r<this.indices.length/3;r++){const e=3*r;this._getUnscaledVertex(this.indices[e],i),this._getUnscaledVertex(this.indices[e+1],n),this._getUnscaledVertex(this.indices[e+2],o),s.setFromPoints(a),t.insert(s,r)}t.removeEmptyNodes()}getTrianglesInAABB(t,e){Hs.copy(t);const s=this.scale,i=s.x,n=s.y,o=s.z,r=Hs.lowerBound,a=Hs.upperBound;return r.x/=i,r.y/=n,r.z/=o,a.x/=i,a.y/=n,a.z/=o,this.tree.aabbQuery(Hs,e)}setScale(t){const e=this.scale.x===this.scale.y&&this.scale.y===this.scale.z,s=t.x===t.y&&t.y===t.z;e&&s||this.updateNormals(),this.scale.copy(t),this.updateAABB(),this.updateBoundingSphereRadius()}updateNormals(){const t=_s,e=this.normals;for(let s=0;s<this.indices.length/3;s++){const i=3*s,n=this.indices[i],o=this.indices[i+1],r=this.indices[i+2];this.getVertex(n,Xs),this.getVertex(o,$s),this.getVertex(r,Ks),ks.computeNormal($s,Xs,Ks,t),e[i]=t.x,e[i+1]=t.y,e[i+2]=t.z}}updateEdges(){const t={},e=(e,s)=>{const i=e<s?`${e}_${s}`:`${s}_${e}`;t[i]=!0};for(let i=0;i<this.indices.length/3;i++){const t=3*i,s=this.indices[t],n=this.indices[t+1],o=this.indices[t+2];e(s,n),e(n,o),e(o,s)}const s=Object.keys(t);this.edges=new Int16Array(2*s.length);for(let i=0;i<s.length;i++){const t=s[i].split("_");this.edges[2*i]=parseInt(t[0],10),this.edges[2*i+1]=parseInt(t[1],10)}}getEdgeVertex(t,e,s){const i=this.edges[2*t+(e?1:0)];this.getVertex(i,s)}getEdgeVector(t,e){const s=Ds,i=Us;this.getEdgeVertex(t,0,s),this.getEdgeVertex(t,1,i),i.vsub(s,e)}static computeNormal(t,e,s,i){e.vsub(t,Gs),s.vsub(e,Ys),Ys.cross(Gs,i),i.isZero()||i.normalize()}getVertex(t,e){const s=this.scale;return this._getUnscaledVertex(t,e),e.x*=s.x,e.y*=s.y,e.z*=s.z,e}_getUnscaledVertex(t,e){const s=3*t,i=this.vertices;return e.set(i[s],i[s+1],i[s+2])}getWorldVertex(t,e,s,i){return this.getVertex(t,i),x.pointToWorldFrame(e,s,i,i),i}getTriangleVertices(t,e,s,i){const n=3*t;this.getVertex(this.indices[n],e),this.getVertex(this.indices[n+1],s),this.getVertex(this.indices[n+2],i)}getNormal(t,e){const s=3*t;return e.set(this.normals[s],this.normals[s+1],this.normals[s+2])}calculateLocalInertia(t,e){this.computeLocalAABB(Zs);const s=Zs.upperBound.x-Zs.lowerBound.x,i=Zs.upperBound.y-Zs.lowerBound.y,n=Zs.upperBound.z-Zs.lowerBound.z;return e.set(1/12*t*(2*i*2*i+2*n*2*n),1/12*t*(2*s*2*s+2*n*2*n),1/12*t*(2*i*2*i+2*s*2*s))}computeLocalAABB(t){const e=t.lowerBound,s=t.upperBound,i=this.vertices.length;this.vertices;const n=Qs;this.getVertex(0,n),e.copy(n),s.copy(n);for(let o=0;o!==i;o++)this.getVertex(o,n),n.x<e.x?e.x=n.x:n.x>s.x&&(s.x=n.x),n.y<e.y?e.y=n.y:n.y>s.y&&(s.y=n.y),n.z<e.z?e.z=n.z:n.z>s.z&&(s.z=n.z)}updateAABB(){this.computeLocalAABB(this.aabb)}updateBoundingSphereRadius(){let t=0;const e=this.vertices,s=new r;for(let i=0,n=e.length/3;i!==n;i++){this.getVertex(i,s);const e=s.lengthSquared();e>t&&(t=e)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,i){const n=Js,o=ti;n.position=t,n.quaternion=e,this.aabb.toWorldFrame(n,o),s.copy(o.lowerBound),i.copy(o.upperBound)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}static createTorus(t,e,s,i,n){void 0===t&&(t=1),void 0===e&&(e=.5),void 0===s&&(s=8),void 0===i&&(i=6),void 0===n&&(n=2*Math.PI);const o=[],r=[];for(let a=0;a<=s;a++)for(let r=0;r<=i;r++){const l=r/i*n,h=a/s*Math.PI*2,c=(t+e*Math.cos(h))*Math.cos(l),u=(t+e*Math.cos(h))*Math.sin(l),d=e*Math.sin(h);o.push(c,u,d)}for(let a=1;a<=s;a++)for(let t=1;t<=i;t++){const e=(i+1)*a+t-1,s=(i+1)*(a-1)+t-1,n=(i+1)*(a-1)+t,o=(i+1)*a+t;r.push(e,s,o),r.push(s,n,o)}return new ks(o,r)}}const _s=new r,Hs=new c,Ds=new r,Us=new r,Ys=new r,Gs=new r,Xs=new r,$s=new r,Ks=new r,Zs=new c,Qs=new r,Js=new x,ti=new c;class ei{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);-1!==s&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class si extends ei{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const i=this.iterations,n=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,m;if(0!==r)for(let g=0;g!==l;g++)a[g].updateSolveMassProperties();const v=ni,f=oi,w=ii;v.length=r,f.length=r,w.length=r;for(let g=0;g!==r;g++){const t=o[g];w[g]=0,f[g]=t.computeB(h),v[g]=1/t.computeC()}if(0!==r){for(let s=0;s!==l;s++){const t=a[s],e=t.vlambda,i=t.wlambda;e.set(0,0,0),i.set(0,0,0)}for(s=0;s!==i;s++){p=0;for(let t=0;t!==r;t++){const e=o[t];c=f[t],u=v[t],m=w[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*m),m+d<e.minForce?d=e.minForce-m:m+d>e.maxForce&&(d=e.maxForce-m),w[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<n)break}for(let s=0;s!==l;s++){const t=a[s],e=t.velocity,i=t.angularVelocity;t.vlambda.vmul(t.linearFactor,t.vlambda),e.vadd(t.vlambda,e),t.wlambda.vmul(t.angularFactor,t.wlambda),i.vadd(t.wlambda,i)}let t=o.length;const e=1/h;while(t--)o[t].multiplier=w[t]*e}return s}}const ii=[],ni=[],oi=[];class ri extends ei{constructor(t){super(),this.iterations=10,this.tolerance=1e-7,this.subsolver=t,this.nodes=[],this.nodePool=[];while(this.nodePool.length<128)this.nodePool.push(this.createNode())}createNode(){return{body:null,children:[],eqs:[],visited:!1}}solve(t,e){const s=ai,i=this.nodePool,n=e.bodies,o=this.equations,r=o.length,a=n.length,l=this.subsolver;while(i.length<a)i.push(this.createNode());s.length=a;for(let p=0;p<a;p++)s[p]=i[p];for(let p=0;p!==a;p++){const t=s[p];t.body=n[p],t.children.length=0,t.eqs.length=0,t.visited=!1}for(let p=0;p!==r;p++){const t=o[p],e=n.indexOf(t.bi),i=n.indexOf(t.bj),r=s[e],a=s[i];r.children.push(a),r.eqs.push(t),a.children.push(r),a.eqs.push(t)}let h,c=0,u=li;l.tolerance=this.tolerance,l.iterations=this.iterations;const d=hi;while(h=ui(s)){u.length=0,d.bodies.length=0,pi(h,yi,d.bodies,u);const e=u.length;u=u.sort(mi);for(let t=0;t!==e;t++)l.addEquation(u[t]);l.solve(t,d),l.removeAllEquations(),c++}return c}}const ai=[],li=[],hi={bodies:[]},ci=I.STATIC;function ui(t){const e=t.length;for(let s=0;s!==e;s++){const e=t[s];if(!e.visited&&!(e.body.type&ci))return e}return!1}const di=[];function pi(t,e,s,i){di.push(t),t.visited=!0,e(t,s,i);while(di.length){const t=di.pop();let n;while(n=ui(t.children))n.visited=!0,e(n,s,i),di.push(n)}}function yi(t,e,s){e.push(t.body);const i=t.eqs.length;for(let n=0;n!==i;n++){const e=t.eqs[n];s.includes(e)||s.push(e)}}function mi(t,e){return e.id-t.id}class vi{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;while(e.length>t)e.pop();while(e.length<t)e.push(this.constructObject());return this}}class fi extends vi{constructor(){super(...arguments),this.type=r}constructObject(){return new r}}const wi={sphereSphere:g.types.SPHERE,spherePlane:g.types.SPHERE|g.types.PLANE,boxBox:g.types.BOX|g.types.BOX,sphereBox:g.types.SPHERE|g.types.BOX,planeBox:g.types.PLANE|g.types.BOX,convexConvex:g.types.CONVEXPOLYHEDRON,sphereConvex:g.types.SPHERE|g.types.CONVEXPOLYHEDRON,planeConvex:g.types.PLANE|g.types.CONVEXPOLYHEDRON,boxConvex:g.types.BOX|g.types.CONVEXPOLYHEDRON,sphereHeightfield:g.types.SPHERE|g.types.HEIGHTFIELD,boxHeightfield:g.types.BOX|g.types.HEIGHTFIELD,convexHeightfield:g.types.CONVEXPOLYHEDRON|g.types.HEIGHTFIELD,sphereParticle:g.types.PARTICLE|g.types.SPHERE,planeParticle:g.types.PLANE|g.types.PARTICLE,boxParticle:g.types.BOX|g.types.PARTICLE,convexParticle:g.types.PARTICLE|g.types.CONVEXPOLYHEDRON,cylinderCylinder:g.types.CYLINDER,sphereCylinder:g.types.SPHERE|g.types.CYLINDER,planeCylinder:g.types.PLANE|g.types.CYLINDER,boxCylinder:g.types.BOX|g.types.CYLINDER,convexCylinder:g.types.CONVEXPOLYHEDRON|g.types.CYLINDER,heightfieldCylinder:g.types.HEIGHTFIELD|g.types.CYLINDER,particleCylinder:g.types.PARTICLE|g.types.CYLINDER,sphereTrimesh:g.types.SPHERE|g.types.TRIMESH,planeTrimesh:g.types.PLANE|g.types.TRIMESH};class gi{get[wi.sphereSphere](){return this.sphereSphere}get[wi.spherePlane](){return this.spherePlane}get[wi.boxBox](){return this.boxBox}get[wi.sphereBox](){return this.sphereBox}get[wi.planeBox](){return this.planeBox}get[wi.convexConvex](){return this.convexConvex}get[wi.sphereConvex](){return this.sphereConvex}get[wi.planeConvex](){return this.planeConvex}get[wi.boxConvex](){return this.boxConvex}get[wi.sphereHeightfield](){return this.sphereHeightfield}get[wi.boxHeightfield](){return this.boxHeightfield}get[wi.convexHeightfield](){return this.convexHeightfield}get[wi.sphereParticle](){return this.sphereParticle}get[wi.planeParticle](){return this.planeParticle}get[wi.boxParticle](){return this.boxParticle}get[wi.convexParticle](){return this.convexParticle}get[wi.cylinderCylinder](){return this.convexConvex}get[wi.sphereCylinder](){return this.sphereConvex}get[wi.planeCylinder](){return this.planeConvex}get[wi.boxCylinder](){return this.boxConvex}get[wi.convexCylinder](){return this.convexConvex}get[wi.heightfieldCylinder](){return this.heightfieldCylinder}get[wi.particleCylinder](){return this.particleCylinder}get[wi.sphereTrimesh](){return this.sphereTrimesh}get[wi.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new fi,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,i,n,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Kt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&i.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,h=i.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=n||s,r.sj=o||i,r}createFrictionEquationsFromContact(t,e){const s=t.bi,i=t.bj,n=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=n.material||s.material,c=o.material||i.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const n=l*r.gravity.length();let o=s.invMass+i.invMass;o>0&&(o=1/o);const h=this.frictionEquationPool,c=h.length?h.pop():new ge(s,i,n*o),u=h.length?h.pop():new ge(s,i,n*o);return c.bi=u.bi=s,c.bj=u.bj=i,c.minForce=u.minForce=-n*o,c.maxForce=u.maxForce=n*o,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const s=this.frictionResult[this.frictionResult.length-2],i=this.frictionResult[this.frictionResult.length-1];xi.setZero(),bi.setZero(),Bi.setZero();const n=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==n?(xi.vadd(e.ni,xi),bi.vadd(e.ri,bi),Bi.vadd(e.rj,Bi)):(xi.vsub(e.ni,xi),bi.vadd(e.rj,bi),Bi.vadd(e.ri,Bi));const o=1/t;bi.scale(o,s.ri),Bi.scale(o,s.rj),i.ri.copy(s.ri),i.rj.copy(s.rj),xi.normalize(),xi.tangents(s.t,i.t)}getContacts(t,e,s,i,n,o,r){this.contactPointPool=n,this.frictionEquationPool=r,this.result=i,this.frictionResult=o;const a=Si,l=zi,h=Ai,c=Ei;for(let u=0,d=t.length;u!==d;u++){const i=t[u],n=e[u];let o=null;i.material&&n.material&&(o=s.getContactMaterial(i.material,n.material)||null);const r=i.type&I.KINEMATIC&&n.type&I.STATIC||i.type&I.STATIC&&n.type&I.KINEMATIC||i.type&I.KINEMATIC&&n.type&I.KINEMATIC;for(let t=0;t<i.shapes.length;t++){i.quaternion.mult(i.shapeOrientations[t],a),i.quaternion.vmult(i.shapeOffsets[t],h),h.vadd(i.position,h);const e=i.shapes[t];for(let t=0;t<n.shapes.length;t++){n.quaternion.mult(n.shapeOrientations[t],l),n.quaternion.vmult(n.shapeOffsets[t],c),c.vadd(n.position,c);const u=n.shapes[t];if(!(e.collisionFilterMask&u.collisionFilterGroup&&u.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+u.boundingSphereRadius)continue;let d=null;e.material&&u.material&&(d=s.getContactMaterial(e.material,u.material)||null),this.currentContactMaterial=d||o||s.defaultContactMaterial;const p=e.type|u.type,y=this[p];if(y){let t=!1;t=e.type<u.type?y.call(this,e,u,h,c,a,l,i,n,e,u,r):y.call(this,u,e,c,h,l,a,n,i,e,u,r),t&&r&&(s.shapeOverlapKeeper.set(e.id,u.id),s.bodyOverlapKeeper.set(i.id,n.id))}}}}}sphereSphere(t,e,s,i,n,o,r,a,l,h,c){if(c)return s.distanceSquared(i)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);i.vsub(s,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(s,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(i,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,s,i,n,o,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),o.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),s.vsub(i,Ui),u.ni.scale(u.ni.dot(Ui),Yi),Ui.vsub(Yi,u.rj),-Ui.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(s,t),t.vsub(r.position,t),e.vadd(i,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,i,n,o,r,a,t,e,c)}sphereBox(t,e,s,i,n,o,r,a,l,h,c){const u=this.v3pool,d=en;s.vsub(i,Zi),e.getSideNormals(d,o);const p=t.radius;let y=!1;const m=nn,v=on,f=rn;let w=null,g=0,x=0,b=0,B=null;for(let T=0,I=d.length;T!==I&&!1===y;T++){const t=Qi;t.copy(d[T]);const e=t.length();t.normalize();const s=Zi.dot(t);if(s<e+p&&s>0){const i=Ji,n=tn;i.copy(d[(T+1)%3]),n.copy(d[(T+2)%3]);const o=i.length(),r=n.length();i.normalize(),n.normalize();const a=Zi.dot(i),l=Zi.dot(n);if(a<o&&a>-o&&l<r&&l>-r){const o=Math.abs(s-e-p);if((null===B||o<B)&&(B=o,x=a,b=l,w=e,m.copy(t),v.copy(i),f.copy(n),g++,c))return!0}}}if(g){y=!0;const n=this.createContactEquation(r,a,t,e,l,h);m.scale(-p,n.ri),n.ni.copy(m),n.ni.negate(n.ni),m.scale(w,m),v.scale(x,v),m.vadd(v,m),f.scale(b,f),m.vadd(f,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}let A=u.get();const E=sn;for(let T=0;2!==T&&!y;T++)for(let n=0;2!==n&&!y;n++)for(let o=0;2!==o&&!y;o++)if(A.set(0,0,0),T?A.vadd(d[0],A):A.vsub(d[0],A),n?A.vadd(d[1],A):A.vsub(d[1],A),o?A.vadd(d[2],A):A.vsub(d[2],A),i.vadd(A,E),E.vsub(s,E),E.lengthSquared()<p*p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);n.ri.copy(E),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(p,n.ri),n.rj.copy(A),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}u.release(A),A=null;const S=u.get(),z=u.get(),C=u.get(),F=u.get(),M=u.get(),R=d.length;for(let T=0;T!==R&&!y;T++)for(let n=0;n!==R&&!y;n++)if(T%3!==n%3){d[n].cross(d[T],S),S.normalize(),d[T].vadd(d[n],z),C.copy(s),C.vsub(z,C),C.vsub(i,C);const o=C.dot(S);S.scale(o,F);let u=0;while(u===T%3||u===n%3)u++;M.copy(s),M.vsub(F,M),M.vsub(z,M),M.vsub(i,M);const m=Math.abs(o),v=M.length();if(m<d[u].length()&&v<p){if(c)return!0;y=!0;const n=this.createContactEquation(r,a,t,e,l,h);z.vadd(F,n.rj),n.rj.copy(n.rj),M.negate(n.ni),n.ni.normalize(),n.ri.copy(n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(s,n.ri),n.ri.normalize(),n.ri.scale(p,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}u.release(S,z,C,F,M)}planeBox(t,e,s,i,n,o,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,i,n,o,r,a,t,e,c)}convexConvex(t,e,s,i,n,o,r,a,l,h,c,u,d){const p=bn;if(!(s.distanceTo(i)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,n,i,o,p,u,d)){const u=[],d=Bn;t.clipAgainstHull(s,n,e,i,o,p,-100,100,u);let y=0;for(let n=0;n!==u.length;n++){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),m=o.ri,v=o.rj;p.negate(o.ni),u[n].normal.negate(d),d.scale(u[n].depth,d),u[n].point.vadd(d,m),v.copy(u[n].point),m.vsub(s,m),v.vsub(i,v),m.vadd(s,m),m.vsub(r.position,m),v.vadd(i,v),v.vsub(a.position,v),this.result.push(o),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,s,i,n,o,r,a,l,h,c){const u=this.v3pool;s.vsub(i,an);const d=e.faceNormals,p=e.faces,y=e.vertices,m=t.radius;let v=!1;for(let f=0;f!==y.length;f++){const n=y[f],u=un;o.vmult(n,u),i.vadd(u,u);const d=cn;if(u.vsub(s,d),d.lengthSquared()<m*m){if(c)return!0;v=!0;const n=this.createContactEquation(r,a,t,e,l,h);return n.ri.copy(d),n.ri.normalize(),n.ni.copy(n.ri),n.ri.scale(m,n.ri),u.vsub(i,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),void this.createFrictionEquationsFromContact(n,this.frictionResult)}}for(let f=0,w=p.length;f!==w&&!1===v;f++){const n=d[f],w=p[f],g=dn;o.vmult(n,g);const x=pn;o.vmult(y[w[0]],x),x.vadd(i,x);const b=yn;g.scale(-m,b),s.vadd(b,b);const B=mn;b.vsub(x,B);const A=B.dot(g),E=vn;if(s.vsub(x,E),A<0&&E.dot(g)>0){const n=[];for(let t=0,e=w.length;t!==e;t++){const e=u.get();o.vmult(y[w[t]],e),i.vadd(e,e),n.push(e)}if(Ki(n,g,s)){if(c)return!0;v=!0;const o=this.createContactEquation(r,a,t,e,l,h);g.scale(-m,o.ri),g.negate(o.ni);const d=u.get();g.scale(-A,d);const p=u.get();g.scale(-m,p),s.vsub(i,o.rj),o.rj.vadd(p,o.rj),o.rj.vadd(d,o.rj),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),u.release(d),u.release(p),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return}for(let d=0;d!==w.length;d++){const p=u.get(),v=u.get();o.vmult(y[w[(d+1)%w.length]],p),o.vmult(y[w[(d+2)%w.length]],v),i.vadd(p,p),i.vadd(v,v);const f=ln;v.vsub(p,f);const g=hn;f.unit(g);const x=u.get(),b=u.get();s.vsub(p,b);const B=b.dot(g);g.scale(B,x),x.vadd(p,x);const A=u.get();if(x.vsub(s,A),B>0&&B*B<f.lengthSquared()&&A.lengthSquared()<m*m){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);x.vsub(i,o.rj),x.vsub(s,o.ni),o.ni.normalize(),o.ni.scale(m,o.ri),o.rj.vadd(i,o.rj),o.rj.vsub(a.position,o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(r.position,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult);for(let t=0,e=n.length;t!==e;t++)u.release(n[t]);return u.release(p),u.release(v),u.release(x),u.release(A),void u.release(b)}u.release(p),u.release(v),u.release(x),u.release(A),u.release(b)}for(let t=0,e=n.length;t!==e;t++)u.release(n[t])}}}planeConvex(t,e,s,i,n,o,r,a,l,h,c){const u=fn,d=wn;d.set(0,0,1),n.vmult(d,d);let p=0;const y=gn;for(let m=0;m!==e.vertices.length;m++){u.copy(e.vertices[m]),o.vmult(u,u),i.vadd(u,u),u.vsub(s,y);const n=d.dot(y);if(n<=0){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),o=xn;d.scale(d.dot(y),o),u.vsub(o,o),o.vsub(s,n.ri),n.ni.copy(d),u.vsub(i,n.rj),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.vadd(i,n.rj),n.rj.vsub(a.position,n.rj),this.result.push(n),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}sphereHeightfield(t,e,s,i,n,o,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=Ln,m=Nn;x.pointToLocalFrame(i,o,s,m);let v=Math.floor((m.x-d)/p)-1,f=Math.ceil((m.x+d)/p)+1,w=Math.floor((m.y-d)/p)-1,g=Math.ceil((m.y+d)/p)+1;if(f<0||g<0||v>u.length||w>u[0].length)return;v<0&&(v=0),f<0&&(f=0),w<0&&(w=0),g<0&&(g=0),v>=u.length&&(v=u.length-1),f>=u.length&&(f=u.length-1),g>=u[0].length&&(g=u[0].length-1),w>=u[0].length&&(w=u[0].length-1);const b=[];e.getRectMinMax(v,w,f,g,b);const B=b[0],A=b[1];if(m.z-d>A||m.z+d<B)return;const E=this.result;for(let S=v;S<f;S++)for(let l=w;l<g;l++){const h=E.length;let u=!1;if(e.getConvexTrianglePillar(S,l,!1),x.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,a,t,e,c)),c&&u)return!0;if(e.getConvexTrianglePillar(S,l,!0),x.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,s,y,n,o,r,a,t,e,c)),c&&u)return!0;const d=E.length-h;if(d>2)return}}boxHeightfield(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}convexHeightfield(t,e,s,i,n,o,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=Pn,m=qn,v=In;x.pointToLocalFrame(i,o,s,v);let f=Math.floor((v.x-p)/d)-1,w=Math.ceil((v.x+p)/d)+1,g=Math.floor((v.y-p)/d)-1,b=Math.ceil((v.y+p)/d)+1;if(w<0||b<0||f>u.length||g>u[0].length)return;f<0&&(f=0),w<0&&(w=0),g<0&&(g=0),b<0&&(b=0),f>=u.length&&(f=u.length-1),w>=u.length&&(w=u.length-1),b>=u[0].length&&(b=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const B=[];e.getRectMinMax(f,g,w,b,B);const A=B[0],E=B[1];if(!(v.z-p>E||v.z+p<A))for(let S=f;S<w;S++)for(let l=g;l<b;l++){let h=!1;if(e.getConvexTrianglePillar(S,l,!1),x.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,a,null,null,c,m,null)),c&&h)return!0;if(e.getConvexTrianglePillar(S,l,!0),x.pointToWorldFrame(i,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,s,y,n,o,r,a,null,null,c,m,null)),c&&h)return!0}}sphereParticle(t,e,s,i,n,o,r,a,l,h,c){const u=zn;u.set(0,0,1),i.vsub(s,u);const d=u.lengthSquared();if(d<=t.radius*t.radius){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);u.normalize(),s.rj.copy(u),s.rj.scale(t.radius,s.rj),s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}planeParticle(t,e,s,i,n,o,r,a,l,h,c){const u=An;u.set(0,0,1),r.quaternion.vmult(u,u);const d=En;i.vsub(r.position,d);const p=u.dot(d);if(p<=0){if(c)return!0;const s=this.createContactEquation(a,r,e,t,l,h);s.ni.copy(u),s.ni.negate(s.ni),s.ri.set(0,0,0);const n=Sn;u.scale(u.dot(i),n),i.vsub(n,n),s.rj.copy(n),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}boxParticle(t,e,s,i,n,o,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,i,n,o,r,a,t,e,c)}convexParticle(t,e,s,i,n,o,r,a,l,h,c){let u=-1;const d=Mn,p=Tn;let y=null;const m=Fn;if(m.copy(i),m.vsub(s,m),n.conjugate(Cn),Cn.vmult(m,m),t.pointIsInside(m)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,n),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(n);for(let e=0,s=t.faces.length;e!==s;e++){const s=[t.worldVertices[t.faces[e][0]]],n=t.worldFaceNormals[e];i.vsub(s[0],Rn);const o=-n.dot(Rn);if(null===y||Math.abs(o)<Math.abs(y)){if(c)return!0;y=o,u=e,d.copy(n)}}if(-1!==u){const n=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(i,p),p.vsub(s,p),n.rj.copy(p),d.negate(n.ni),n.ri.set(0,0,0);const o=n.ri,c=n.rj;o.vadd(i,o),o.vsub(a.position,o),c.vadd(s,c),c.vsub(r.position,c),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,i,n,o,r,a,l,h,c){return this.convexHeightfield(e,t,i,s,o,n,a,r,l,h,c)}particleCylinder(t,e,s,i,n,o,r,a,l,h,c){return this.convexParticle(e,t,i,s,o,n,a,r,l,h,c)}sphereTrimesh(t,e,s,i,n,o,r,a,l,h,c){const u=qi,d=Ni,p=Li,y=Wi,m=Vi,v=ji,f=Hi,w=Pi,g=Ti,b=Di;x.pointToLocalFrame(i,o,s,m);const B=t.radius;f.lowerBound.set(m.x-B,m.y-B,m.z-B),f.upperBound.set(m.x+B,m.y+B,m.z+B),e.getTrianglesInAABB(f,b);const A=Ii,E=t.radius*t.radius;for(let M=0;M<b.length;M++)for(let n=0;n<3;n++)if(e.getVertex(e.indices[3*b[M]+n],A),A.vsub(m,g),g.lengthSquared()<=E){if(w.copy(A),x.pointToWorldFrame(i,o,w,A),A.vsub(s,g),c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);n.ni.copy(g),n.ni.normalize(),n.ri.copy(n.ni),n.ri.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),n.rj.copy(A),n.rj.vsub(a.position,n.rj),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}for(let M=0;M<b.length;M++)for(let n=0;n<3;n++){e.getVertex(e.indices[3*b[M]+n],u),e.getVertex(e.indices[3*b[M]+(n+1)%3],d),d.vsub(u,p),m.vsub(d,v);const f=v.dot(p);m.vsub(u,v);let w=v.dot(p);if(w>0&&f<0){m.vsub(u,v),y.copy(p),y.normalize(),w=v.dot(y),y.scale(w,v),v.vadd(u,v);const n=v.distanceTo(m);if(n<t.radius){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);v.vsub(m,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),x.pointToWorldFrame(i,o,v,v),v.vsub(a.position,n.rj),x.vectorToWorldFrame(o,n.ni,n.ni),x.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}}const S=Oi,z=ki,C=_i,F=Ri;for(let M=0,R=b.length;M!==R;M++){e.getTriangleVertices(b[M],S,z,C),e.getNormal(b[M],F),m.vsub(S,v);let n=v.dot(F);if(F.scale(n,v),m.vsub(v,v),n=v.distanceTo(m),ht.pointInTriangle(v,S,z,C)&&n<t.radius){if(c)return!0;let n=this.createContactEquation(r,a,t,e,l,h);v.vsub(m,n.ni),n.ni.normalize(),n.ni.scale(t.radius,n.ri),n.ri.vadd(s,n.ri),n.ri.vsub(r.position,n.ri),x.pointToWorldFrame(i,o,v,v),v.vsub(a.position,n.rj),x.vectorToWorldFrame(o,n.ni,n.ni),x.vectorToWorldFrame(o,n.ri,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult)}}b.length=0}planeTrimesh(t,e,s,i,n,o,a,l,h,c,u){const d=new r,p=Ci;p.set(0,0,1),n.vmult(p,p);for(let y=0;y<e.vertices.length/3;y++){e.getVertex(y,d);const n=new r;n.copy(d),x.pointToWorldFrame(i,o,n,d);const m=Fi;d.vsub(s,m);const v=p.dot(m);if(v<=0){if(u)return!0;const s=this.createContactEquation(a,l,t,e,h,c);s.ni.copy(p);const i=Mi;p.scale(m.dot(p),i),d.vsub(i,i),s.ri.copy(i),s.ri.vsub(a.position,s.ri),s.rj.copy(d),s.rj.vsub(l.position,s.rj),this.result.push(s),this.createFrictionEquationsFromContact(s,this.frictionResult)}}}}const xi=new r,bi=new r,Bi=new r,Ai=new r,Ei=new r,Si=new m,zi=new m,Ci=new r,Fi=new r,Mi=new r,Ri=new r,Ti=new r;new r;const Ii=new r,Pi=new r,qi=new r,Ni=new r,Li=new r,Wi=new r,Vi=new r,ji=new r,Oi=new r,ki=new r,_i=new r,Hi=new c,Di=[],Ui=new r,Yi=new r,Gi=new r,Xi=new r,$i=new r;function Ki(t,e,s){let i=null;const n=t.length;for(let o=0;o!==n;o++){const r=t[o],a=Gi;t[(o+1)%n].vsub(r,a);const l=Xi;a.cross(e,l);const h=$i;s.vsub(r,h);const c=l.dot(h);if(!(null===i||c>0&&!0===i||c<=0&&!1===i))return!1;null===i&&(i=c>0)}return!0}const Zi=new r,Qi=new r,Ji=new r,tn=new r,en=[new r,new r,new r,new r,new r,new r],sn=new r,nn=new r,on=new r,rn=new r,an=new r,ln=new r,hn=new r,cn=new r,un=new r,dn=new r,pn=new r,yn=new r,mn=new r,vn=new r;new r,new r;const fn=new r,wn=new r,gn=new r,xn=new r,bn=new r,Bn=new r,An=new r,En=new r,Sn=new r,zn=new r,Cn=new m,Fn=new r;new r;const Mn=new r,Rn=new r,Tn=new r,In=new r,Pn=new r,qn=[0],Nn=new r,Ln=new r;class Wn{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),i=this.current;let n=0;while(s>i[n])n++;if(s!==i[n]){for(let t=i.length-1;t>=n;t--)i[t+1]=i[t];i[n]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,i=this.previous,n=s.length,o=i.length;let r=0;for(let a=0;a<n;a++){let e=!1;const n=s[a];while(n>i[r])r++;e=n===i[r],e||Vn(t,n)}r=0;for(let a=0;a<o;a++){let t=!1;const n=i[a];while(n>s[r])r++;t=s[r]===n,t||Vn(e,n)}}}function Vn(t,e){t.push((4294901760&e)>>16,65535&e)}const jn=(t,e)=>t<e?`${t}-${e}`:`${e}-${t}`;class On{constructor(){this.data={keys:[]}}get(t,e){const s=jn(t,e);return this.data[s]}set(t,e,s){const i=jn(t,e);this.get(t,e)||this.data.keys.push(i),this.data[i]=s}delete(t,e){const s=jn(t,e),i=this.data.keys.indexOf(s);-1!==i&&this.data.keys.splice(i,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;while(e.length>0){const s=e.pop();delete t[s]}}}class kn extends y{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new r,t.gravity&&this.gravity.copy(t.gravity),this.broadphase=void 0!==t.broadphase?t.broadphase:new J,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new si,this.constraints=[],this.narrowphase=new gi(this),this.collisionMatrix=new p,this.collisionMatrixPrevious=new p,this.bodyOverlapKeeper=new Wn,this.shapeOverlapKeeper=new Wn,this.contactmaterials=[],this.contactMaterialTable=new On,this.defaultMaterial=new Ae("default"),this.defaultContactMaterial=new Be(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof tt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.ALL,s.from=t,s.to=e,s.callback=i,_n.intersectWorld(this,s)}raycastAny(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.ANY,s.from=t,s.to=e,s.result=i,_n.intersectWorld(this,s)}raycastClosest(t,e,s,i){return void 0===s&&(s={}),s.mode=ht.CLOSEST,s.from=t,s.to=e,s.result=i,_n.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof I&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,i=s.indexOf(t);if(-1!==i){s.splice(i,1);for(let t=0;t!==s.length;t++)s[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const i=e[s].shapes;for(let e=0;e<i.length;e++){const s=i[e];if(s.id===t)return s}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const s=Hn.now()/1e3;if(this.lastCallTime){const i=s-this.lastCallTime;this.step(t,i,e)}else this.step(t,void 0,e);this.lastCallTime=s}step(t,e,s){if(void 0===s&&(s=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const i=Hn.now();let n=0;while(this.accumulator>=t&&n<s)if(this.internalStep(t),this.accumulator-=t,n++,Hn.now()-i>1e3*t)break;this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,o,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,o,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=$n,i=Kn,n=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=I.DYNAMIC;let u=-1/0;const d=this.constraints,p=Xn;a.length();const y=a.x,m=a.y,v=a.z;let f=0;for(l&&(u=Hn.now()),f=0;f!==n;f++){const t=o[f];if(t.type===c){const e=t.force,s=t.mass;e.x+=s*y,e.y+=s*m,e.z+=s*v}}for(let F=0,M=this.subsystems.length;F!==M;F++)this.subsystems[F].update();l&&(u=Hn.now()),s.length=0,i.length=0,this.broadphase.collisionPairs(this,s,i),l&&(h.broadphase=Hn.now()-u);let w=d.length;for(f=0;f!==w;f++){const t=d[f];if(!t.collideConnected)for(let e=s.length-1;e>=0;e-=1)(t.bodyA===s[e]&&t.bodyB===i[e]||t.bodyB===s[e]&&t.bodyA===i[e])&&(s.splice(e,1),i.splice(e,1))}this.collisionMatrixTick(),l&&(u=Hn.now());const g=Gn,x=e.length;for(f=0;f!==x;f++)g.push(e[f]);e.length=0;const b=this.frictionEquations.length;for(f=0;f!==b;f++)p.push(this.frictionEquations[f]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,i,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=Hn.now()-u),l&&(u=Hn.now()),f=0;f<this.frictionEquations.length;f++)r.addEquation(this.frictionEquations[f]);const B=e.length;for(let F=0;F!==B;F++){const t=e[F],s=t.bi,i=t.bj,n=t.si,o=t.sj;let a;if(a=s.material&&i.material&&this.getContactMaterial(s.material,i.material)||this.defaultContactMaterial,a.friction,s.material&&i.material&&(s.material.friction>=0&&i.material.friction>=0&&(s.material.friction,i.material.friction),s.material.restitution>=0&&i.material.restitution>=0&&(t.restitution=s.material.restitution*i.material.restitution)),r.addEquation(t),s.allowSleep&&s.type===I.DYNAMIC&&s.sleepState===I.SLEEPING&&i.sleepState===I.AWAKE&&i.type!==I.STATIC){const t=i.velocity.lengthSquared()+i.angularVelocity.lengthSquared(),e=i.sleepSpeedLimit**2;t>=2*e&&(s.wakeUpAfterNarrowphase=!0)}if(i.allowSleep&&i.type===I.DYNAMIC&&i.sleepState===I.SLEEPING&&s.sleepState===I.AWAKE&&s.type!==I.STATIC){const t=s.velocity.lengthSquared()+s.angularVelocity.lengthSquared(),e=s.sleepSpeedLimit**2;t>=2*e&&(i.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(s,i,!0),this.collisionMatrixPrevious.get(s,i)||(Yn.body=i,Yn.contact=t,s.dispatchEvent(Yn),Yn.body=s,i.dispatchEvent(Yn)),this.bodyOverlapKeeper.set(s.id,i.id),this.shapeOverlapKeeper.set(n.id,o.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=Hn.now()-u,u=Hn.now()),f=0;f!==n;f++){const t=o[f];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(w=d.length,f=0;f!==w;f++){const t=d[f];t.update();for(let e=0,s=t.equations.length;e!==s;e++){const s=t.equations[e];r.addEquation(s)}}r.solve(t,this),l&&(h.solve=Hn.now()-u),r.removeAllEquations();const A=Math.pow;for(f=0;f!==n;f++){const e=o[f];if(e.type&c){const s=A(1-e.linearDamping,t),i=e.velocity;i.scale(s,i);const n=e.angularVelocity;if(n){const s=A(1-e.angularDamping,t);n.scale(s,n)}}}this.dispatchEvent(Un),l&&(u=Hn.now());const E=this.stepnumber,S=E%(this.quatNormalizeSkip+1)===0,z=this.quatNormalizeFast;for(f=0;f!==n;f++)o[f].integrate(t,S,z);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=Hn.now()-u),this.stepnumber+=1,this.dispatchEvent(Dn);let C=!0;if(this.allowSleep)for(C=!1,f=0;f!==n;f++){const t=o[f];t.sleepTick(this.time),t.sleepState!==I.SLEEPING&&(C=!0)}this.hasActiveBodies=C}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(Zn,Qn),t){for(let t=0,e=Zn.length;t<e;t+=2)Jn.bodyA=this.getBodyById(Zn[t]),Jn.bodyB=this.getBodyById(Zn[t+1]),this.dispatchEvent(Jn);Jn.bodyA=Jn.bodyB=null}if(e){for(let t=0,e=Qn.length;t<e;t+=2)to.bodyA=this.getBodyById(Qn[t]),to.bodyB=this.getBodyById(Qn[t+1]),this.dispatchEvent(to);to.bodyA=to.bodyB=null}Zn.length=Qn.length=0;const s=this.hasAnyEventListener("beginShapeContact"),i=this.hasAnyEventListener("endShapeContact");if((s||i)&&this.shapeOverlapKeeper.getDiff(Zn,Qn),s){for(let t=0,e=Zn.length;t<e;t+=2){const e=this.getShapeById(Zn[t]),s=this.getShapeById(Zn[t+1]);eo.shapeA=e,eo.shapeB=s,e&&(eo.bodyA=e.body),s&&(eo.bodyB=s.body),this.dispatchEvent(eo)}eo.bodyA=eo.bodyB=eo.shapeA=eo.shapeB=null}if(i){for(let t=0,e=Qn.length;t<e;t+=2){const e=this.getShapeById(Qn[t]),s=this.getShapeById(Qn[t+1]);so.shapeA=e,so.shapeB=s,e&&(so.bodyA=e.body),s&&(so.bodyB=s.body),this.dispatchEvent(so)}so.bodyA=so.bodyB=so.shapeA=so.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const e=t[s];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new c;const _n=new ht,Hn=globalThis.performance||{};if(!Hn.now){let t=Date.now();Hn.timing&&Hn.timing.navigationStart&&(t=Hn.timing.navigationStart),Hn.now=()=>Date.now()-t}new r;const Dn={type:"postStep"},Un={type:"preStep"},Yn={type:I.COLLIDE_EVENT_NAME,body:null,contact:null},Gn=[],Xn=[],$n=[],Kn=[],Zn=[],Qn=[],Jn={type:"beginContact",bodyA:null,bodyB:null},to={type:"endContact",bodyA:null,bodyB:null},eo={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},so={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}}}]);
//# sourceMappingURL=904.8a385365.js.map